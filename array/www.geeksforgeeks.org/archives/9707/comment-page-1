<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Functions that cannot be overloaded in C++ - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/function-overloading-in-c/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Functions that cannot be overloaded in C++ - GeeksforGeeks" />
<meta property="og:description" content="In C++, following function declarations cannot be overloaded. 1) Function declarations that differ only in the return type. For example, the following program fails in compilation. 2) Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration. For example, following program &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/function-overloading-in-c/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="C/C++ Puzzles" />
<meta property="article:published_time" content="2011-02-18T19:19:51+00:00" />
<meta property="article:modified_time" content="2014-05-31T18:29:47+00:00" />
<meta property="og:updated_time" content="2014-05-31T18:29:47+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.505 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111008 14.139.239.66';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Functions that cannot be overloaded in C++</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>In C++, following function declarations <strong>cannot</strong> be overloaded.<span id="more-9707"></span></p>
<p>1) Function declarations that differ only in the return type. For example, the following program fails in compilation.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;iostream&gt;
int foo() { 
  return 10; 
}

char foo() { 
  return 'a'; 
}

int main()
{
   char x = foo();
   getchar();
   return 0;
}
</pre>
<p>2) Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.  For example, following program fails in compilation.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;iostream&gt;
class Test {
   static void fun(int i) {}
   void fun(int i) {}   
};

int main()
{
   Test t;
   getchar();
   return 0;
}
</pre>
<p>3) Parameter declarations that differ only in a pointer * versus an array [] are equivalent. That is, the array declaration is adjusted to become a pointer declaration. Only the second and subsequent array dimensions are significant in parameter types. For example, following two function declarations are equivalent.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int fun(int *ptr);
int fun(int ptr[]); // redeclaration of fun(int *ptr)
</pre>
<p>4) Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
  void h(int ());
  void h(int (*)()); // redeclaration of h(int())
</pre>
<p>5) Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent. That is, the const and volatile type-specifiers for each parameter type are ignored when determining which function is being declared, defined, or called. For example, following program fails in compilation with error <em>&#8220;redefinition of `int f(int)&#8217; &#8220;</em></p>
<p>Example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;iostream&gt;
#include&lt;stdio.h&gt;
 
using namespace std;
 
int f ( int x) {
    return x+10;
}

int f ( const int x) {
    return x+10;
}

int main() {     
  getchar();
  return 0;
}
</pre>
<p>Only the const and volatile type-specifiers at the outermost level of the parameter type specification are ignored in this fashion; const and volatile type-specifiers buried within a parameter type specification are significant and can be used to distinguish overloaded function declarations. In particular, for any type T,<br />
“pointer to T,” “pointer to const T,” and “pointer to volatile T” are considered distinct parameter types, as are “reference to T,” “reference to const T,” and “reference to volatile T.”  For example, see the example in <a href="http://www.geeksforgeeks.org/archives/9707/comment-page-1#comment-3319">this comment</a> posted by Venki.</p>
<p>6) Two parameter declarations that differ only in their default arguments are equivalent. For example, following program fails in compilation with error <em>&#8220;redefinition of `int f(int, int)&#8217; &#8220;</em></p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;iostream&gt;
#include&lt;stdio.h&gt;
 
using namespace std;
 
int f ( int x, int y) {
    return x+10;
}

int f ( int x, int y = 10) {
    return x+y;
}

int main() {     
  getchar();
  return 0;
}
</pre>
<p>References:<br />
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf</a></p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/comparison-float-value-c/" title="Comparison of a float with a value in C">Comparison of a float with a value in C</a></li><li><a href="http://www.geeksforgeeks.org/pure-virtual-destructor-c/" title="Pure virtual destructor in C++">Pure virtual destructor in C++</a></li><li><a href="http://www.geeksforgeeks.org/c-mutable-keyword/" title="C++ mutable keyword">C++ mutable keyword</a></li><li><a href="http://www.geeksforgeeks.org/possible-call-constructor-destructor-explicitly/" title="Is it possible to call constructor and destructor explicitly?">Is it possible to call constructor and destructor explicitly?</a></li><li><a href="http://www.geeksforgeeks.org/multithreading-c-2/" title="Multithreading in C">Multithreading in C</a></li><li><a href="http://www.geeksforgeeks.org/c-prgram-print-range-basic-data-types-without-library-function-constant/" title="How to print range of basic data types without any library function and constant in C?">How to print range of basic data types without any library function and constant in C?</a></li><li><a href="http://www.geeksforgeeks.org/c-final-specifier/" title="C++ final specifier">C++ final specifier</a></li><li><a href="http://www.geeksforgeeks.org/print-substring-of-a-given-string-without-using-any-string-function-and-loop-in-c/" title="Print substring of a given string without using any string function and loop in C">Print substring of a given string without using any string function and loop in C</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Ffunction-overloading-in-c%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/function-overloading-in-c/" data-text="Functions that cannot be overloaded in C++" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/function-overloading-in-c/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-32779">
        <div id="dsq-comment-header-32779" class="dsq-comment-header">
            <cite id="dsq-cite-32779">
                <span id="dsq-author-user-32779">Satyabrata Barik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32779" class="dsq-comment-body">
            <div id="dsq-comment-message-32779" class="dsq-comment-message"><p>following program is ambiguous at the time of compilation.<br />
#include</p>
<p>using namespace std;</p>
<p>void  fun(  int  i )</p>
<p>{</p>
<p>cout&lt;&lt;&quot;1st funn&quot;;</p>
<p>}</p>
<p>void fun(  int  i, int  j=0 )</p>
<p>{</p>
<p>cout&lt;&lt;&quot;2nd funn&quot;;</p>
<p>}</p>
<p>int main()</p>
<p>{</p>
<p>fun(10);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32778">
        <div id="dsq-comment-header-32778" class="dsq-comment-header">
            <cite id="dsq-cite-32778">
                <span id="dsq-author-user-32778">Satyabrata Barik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32778" class="dsq-comment-body">
            <div id="dsq-comment-message-32778" class="dsq-comment-message"><p>following program is ambiguous at the time of compilation.<br />
#include</p>
<p>using namespace std;</p>
<p>void  fun(  int  i )</p>
<p>{</p>
<p>cout&lt;&lt;&quot;1st funn&quot;;</p>
<p>}</p>
<p>void fun(  int  i, int  j=0 )</p>
<p>{</p>
<p>cout&lt;&lt;&quot;2nd funn&quot;;</p>
<p>}</p>
<p>int main()</p>
<p>{</p>
<p>fun(10);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-21853">
        <div id="dsq-comment-header-21853" class="dsq-comment-header">
            <cite id="dsq-cite-21853">
                <span id="dsq-author-user-21853">Rahul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21853" class="dsq-comment-body">
            <div id="dsq-comment-message-21853" class="dsq-comment-message"><p>Can anyone tell why we can not overload functions on the basis of return type? What is the exact reason behind it?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-22967">
        <div id="dsq-comment-header-22967" class="dsq-comment-header">
            <cite id="dsq-cite-22967">
                <span id="dsq-author-user-22967">Vivek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22967" class="dsq-comment-body">
            <div id="dsq-comment-message-22967" class="dsq-comment-message"><p>Because the compiler can&#8217;t decide which type of value to return by the function call statement.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-28974">
        <div id="dsq-comment-header-28974" class="dsq-comment-header">
            <cite id="dsq-cite-28974">
                <span id="dsq-author-user-28974">Nitin Bansal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28974" class="dsq-comment-body">
            <div id="dsq-comment-message-28974" class="dsq-comment-message"><p>Function Overloading is totally based on Arguments of function, not on return type. Take an example given below</p>
<p>  void myFun(int,int);<br />
  int  myFun(int,int);</p>
<p>  void main()<br />
 {<br />
        myFun(4,6);<br />
 }</p>
<p>In this example, myFun(4,6), you specify only parameters that the method will take, there is no provision to specify the return type of method to which we want to call. Now above statement will call to which method? Compiler will get confuse, so Developers of C++ have given that there can be no Overloading on the basis of Return Type. We pass parameters to method and compiler checks there type and come to know which method it will call on execution but we dont pass return type of method to which we want to call in method calling statement.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-32808">
        <div id="dsq-comment-header-32808" class="dsq-comment-header">
            <cite id="dsq-cite-32808">
                <span id="dsq-author-user-32808">Satyabrata Barik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32808" class="dsq-comment-body">
            <div id="dsq-comment-message-32808" class="dsq-comment-message"><p>bcoz when we are making a function call at that time we are not mentioning the return type :-<br />
ex:-fun(10);   (function call for a single argument (int) function)<br />
here we are not mentioning the return type.<br />
So how the compiler will identify the exact function based on return type.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-18273">
        <div id="dsq-comment-header-18273" class="dsq-comment-header">
            <cite id="dsq-cite-18273">
                <span id="dsq-author-user-18273">Bhupesh Pant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18273" class="dsq-comment-body">
            <div id="dsq-comment-message-18273" class="dsq-comment-message"><p>Similarly I also want to add an example,</p>
<p>try this,</p>
<p>void func(int a, int b =10);<br />
void func(int a);</p>
<p>first function with two parameters cannot be called with one parameters, it is an ambiguous call for compiler to solve. </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4821">
        <div id="dsq-comment-header-4821" class="dsq-comment-header">
            <cite id="dsq-cite-4821">
                <span id="dsq-author-user-4821">Sunil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4821" class="dsq-comment-body">
            <div id="dsq-comment-message-4821" class="dsq-comment-message"><p>void h(int ()); What does this statement mean??</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-6346">
        <div id="dsq-comment-header-6346" class="dsq-comment-header">
            <cite id="dsq-cite-6346">
                <span id="dsq-author-user-6346">anmol</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6346" class="dsq-comment-body">
            <div id="dsq-comment-message-6346" class="dsq-comment-message"><p>It is a different way of writing void h(int (*)());</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-rubybaranwal odd alt thread-odd thread-alt depth-1" id="dsq-comment-4043">
        <div id="dsq-comment-header-4043" class="dsq-comment-header">
            <cite id="dsq-cite-4043">
                <span id="dsq-author-user-4043">rubybaranwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4043" class="dsq-comment-body">
            <div id="dsq-comment-message-4043" class="dsq-comment-message"><p>Does overloading depend on constantness of the function? Why doesn&#8217;t the following pgm show any error?</p>
<pre> <code language="CPP">
class A
{
public:
 void f() const
 {
 cout&lt;&lt;&quot;inside const f()&quot;&lt;&lt;endl;
 }
 void f()
 {
 cout&lt;&lt;&quot;inside simple f&quot;&lt;&lt;endl;
 }
};

int main()
{
 A ob1;
 ob1.f();
 return 0;
}
</code> </pre>
<p>When can i expect &quot;void f() const&quot; to get executed?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4726">
        <div id="dsq-comment-header-4726" class="dsq-comment-header">
            <cite id="dsq-cite-4726">
                <span id="dsq-author-user-4726">Bidyapati</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4726" class="dsq-comment-body">
            <div id="dsq-comment-message-4726" class="dsq-comment-message"><p>I tried it long back in VC++, if any mistake please comment:</p>
<p>It is possible to overload based on constness of a function.<br />
If you create a const object it will call const function, if you create a non-const object it will call non-const function.<br />
const A a;<br />
A b;<br />
a.f();<br />
b.f();</p>
<p>Same way with const pointers also.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-4830">
        <div id="dsq-comment-header-4830" class="dsq-comment-header">
            <cite id="dsq-cite-4830">
                <span id="dsq-author-user-4830">Sunil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4830" class="dsq-comment-body">
            <div id="dsq-comment-message-4830" class="dsq-comment-message"><p>also try overloading these 2 functions<br />
display(char *) and display(const char*), it gives no error</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-21339">
        <div id="dsq-comment-header-21339" class="dsq-comment-header">
            <cite id="dsq-cite-21339">
                <span id="dsq-author-user-21339">koluram</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21339" class="dsq-comment-body">
            <div id="dsq-comment-message-21339" class="dsq-comment-message"><p>nope bro!!its showing error-&#8220;call of overloaded is ambiguous&#8221; in DEVCPP </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-29147">
        <div id="dsq-comment-header-29147" class="dsq-comment-header">
            <cite id="dsq-cite-29147">
                <span id="dsq-author-user-29147">GuestPost</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29147" class="dsq-comment-body">
            <div id="dsq-comment-message-29147" class="dsq-comment-message"><p>const A ob2(10); //add a constructor of this type to your code</p>
<p>ob2.f()     //calls void f() const.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4039">
        <div id="dsq-comment-header-4039" class="dsq-comment-header">
            <cite id="dsq-cite-4039">
                <span id="dsq-author-user-4039">the other guy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4039" class="dsq-comment-body">
            <div id="dsq-comment-message-4039" class="dsq-comment-message"><pre> <code language="CPP">
int foo() {
  return 10;
}
 
char foo() {
  return 'a';
}
 
int main()
{
   char x = foo();
  // getchar();
   return 0;
}
</code> </pre>
<p>received following error<br />
g++ test.cpp<br />
test.cpp: In function ‘char foo()’:<br />
test.cpp:6: error: new declaration ‘char foo()’<br />
test.cpp:2: error: ambiguates old declaration ‘int foo()’</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-5396">
        <div id="dsq-comment-header-5396" class="dsq-comment-header">
            <cite id="dsq-cite-5396">
                <span id="dsq-author-user-5396">rahul goyal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5396" class="dsq-comment-body">
            <div id="dsq-comment-message-5396" class="dsq-comment-message"><p>based on the return type we can say that 2 functions are overloaded..<br />
for example<br />
int add(int a,int b);<br />
void add(int a,int b);</p>
<p>though these 2 function hav different return type &#8230;the arguments r same<br />
therefore..it is ambiguous.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-vinit even thread-odd thread-alt depth-1" id="dsq-comment-3938">
        <div id="dsq-comment-header-3938" class="dsq-comment-header">
            <cite id="dsq-cite-3938">
                <span id="dsq-author-user-3938">vinit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3938" class="dsq-comment-body">
            <div id="dsq-comment-message-3938" class="dsq-comment-message"><pre> <code language="CPP">
class Test
{
public:
	static void fun() { }
	void fun(int i) { }
};

int main()
{
	Test obj;
	obj.fun();
	return 0;
}
</code> </pre>
<p>this code seems working fine. It didnt give me any compilation error.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-3941">
        <div id="dsq-comment-header-3941" class="dsq-comment-header">
            <cite id="dsq-cite-3941">
                <span id="dsq-author-user-3941">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3941" class="dsq-comment-body">
            <div id="dsq-comment-message-3941" class="dsq-comment-message"><p>@vinit: This code works because one function takes integer as argument and other doesn&#8217;t. There was a typo in the example code. Intention was to have same arguments in both functions.  We have corrected the typo now.  Thanks!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-18240">
        <div id="dsq-comment-header-18240" class="dsq-comment-header">
            <cite id="dsq-cite-18240">
                <span id="dsq-author-user-18240">krishna oza</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18240" class="dsq-comment-body">
            <div id="dsq-comment-message-18240" class="dsq-comment-message"><p>What if the object type is static can now the function overloading can be done.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-anjankumar-g-k odd alt thread-even depth-1" id="dsq-comment-3351">
        <div id="dsq-comment-header-3351" class="dsq-comment-header">
            <cite id="dsq-cite-3351">
                <span id="dsq-author-user-3351">AK</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3351" class="dsq-comment-body">
            <div id="dsq-comment-message-3351" class="dsq-comment-message"><p>@GeeksforGeeks and Venki,<br />
Thanks for the write up. I was curious about the item 6 above. I tried the below code and the result was as expected:<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<pre> <code language="C">int foo(int i, int j = 23){ return 0;}
int foo( int a, float k = 33.3){ return 1;}

int main(){
	//cout &lt;&lt; foo(45) &lt;&lt; endl;  // This puts compiler in ambiguity!
	cout &lt;&lt; foo(11,55) &lt;&lt; endl;  // invokes foo(int,int).
}</code> </pre>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<p>Rightly, the name mangling for the above 2 functions are &#8220;?foo@@YAHHH@Z&#8221; and &#8220;?foo@@YAHHM@Z&#8221; resp&#8217;ly. Thus, the compiler has no issues choosing the right function.</p>
<p>&#8211; AK</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-venki even depth-2" id="dsq-comment-3356">
        <div id="dsq-comment-header-3356" class="dsq-comment-header">
            <cite id="dsq-cite-3356">
http://www.linkedin.com/in/ramanawithu                <span id="dsq-author-user-3356">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3356" class="dsq-comment-body">
            <div id="dsq-comment-message-3356" class="dsq-comment-message"><p>@AK, please note that conversion from float to int is allowed and implicit by default. When we are providing two different functions with overladed types that are implicitly convertible, the compiler can&#8217;t decide which function to be called. Hence the error, cast the right parameter to explicitly type to get rid of the error.</p>
<p>Name mangling is for the compiler to distinguish the overloaded functions (it varies from compiler to compile). But which function to be called is decided by syntactical rules and type system.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-17042">
        <div id="dsq-comment-header-17042" class="dsq-comment-header">
            <cite id="dsq-cite-17042">
                <span id="dsq-author-user-17042">prince goyal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17042" class="dsq-comment-body">
            <div id="dsq-comment-message-17042" class="dsq-comment-message"><p>if one pass the parameter to foo as foo(11, 55.0), then it will give compilation error, as double can be converted to float or int, so ambiguity.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-venki even thread-odd thread-alt depth-1" id="dsq-comment-3319">
        <div id="dsq-comment-header-3319" class="dsq-comment-header">
            <cite id="dsq-cite-3319">
http://www.linkedin.com/in/ramanawithu                <span id="dsq-author-user-3319">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3319" class="dsq-comment-body">
            <div id="dsq-comment-message-3319" class="dsq-comment-message"><p>The item 5 is not always correct. Functions can be overloaded using const or volatile qualifiers in some scenarios. Plain types can&#8217;t be overloaded by const or volatile qualifiers. But pointer to any type can be differentiated by const and volatile qualifiers.</p>
<p>Putting in other words, const and volatile participate in name mangling if they are qualifying a pointer to some type.</p>
<p>The following code compiles properly,</p>
<pre> <code language="C"> 
int function ( int *x ) {
    return *x + 10;
}
 
int function ( int const *x ) {
    return *x + 10;
}

int main() {
  return 0;
}
</code> </pre>
<p>The plain types can&#8217;t be overloaded using qualifiers, see the following example in co-relation to item 5 of above cited one,</p>
<p>f(100);</p>
<p>Now the compiler have to choose between f(int) and f(const int). The type of 100 is just plain <em>int</em>, and is literal. The compiler will be in dilemma, to avoid such troubles it won&#8217;t allow overloading plain type using qualifiers.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-3320">
        <div id="dsq-comment-header-3320" class="dsq-comment-header">
            <cite id="dsq-cite-3320">
                <span id="dsq-author-user-3320">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3320" class="dsq-comment-body">
            <div id="dsq-comment-message-3320" class="dsq-comment-message"><p>@Venki: Thanks for pointing this out. The point has been added to the post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/function-overloading-in-c/';
var disqus_identifier = '9707 http://geeksforgeeks.org/?p=9707';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Functions that cannot be overloaded in C++";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.206 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:26:48 -->

<!-- Compression = gzip -->
<!-- super cache -->