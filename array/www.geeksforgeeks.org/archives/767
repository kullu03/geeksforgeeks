<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Write a C program to print all permutations of a given string - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Write a C program to print all permutations of a given string - GeeksforGeeks" />
<meta property="og:description" content="A permutation, also called an &#8220;arrangement number&#8221; or &#8220;order,&#8221; is a rearrangement of the elements of an ordered list S into a one-to-one correspondence with S itself. A string of length n has n! permutation. Source: Mathword(http://mathworld.wolfram.com/Permutation.html) Below are the permutations of string ABC. ABC, ACB, BAC, BCA, CAB, CBA Here is a solution using &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Backtracking" />
<meta property="article:tag" content="MathematicalAlgo" />
<meta property="article:section" content="Strings" />
<meta property="article:published_time" content="2009-08-02T12:35:48+00:00" />
<meta property="article:modified_time" content="2013-06-01T23:12:37+00:00" />
<meta property="og:updated_time" content="2013-06-01T23:12:37+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.513 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110925 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Write a C program to print all permutations of a given string</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>A permutation, also called an &#8220;arrangement number&#8221; or &#8220;order,&#8221; is a rearrangement of the elements of an ordered list S into a one-to-one correspondence with S itself. A string of length n has n! permutation.<span id="more-767"></span><br />
Source: Mathword(<a href="http://mathworld.wolfram.com/Permutation.html">http://mathworld.wolfram.com/Permutation.html</a>)</p>
<p>Below are the permutations of string ABC.<br />
ABC, ACB, BAC, BCA, CAB, CBA</p>
<p>Here is a solution using backtracking.</p>
<p><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif" alt="NewPermutation" width="565" height="231" class="aligncenter size-full wp-image-118925" /></a></p>
<pre class="brush: cpp; highlight: [12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]; title: ; notranslate" title="">
# include &lt;stdio.h&gt;

/* Function to swap values at two pointers */
void swap (char *x, char *y)
{
    char temp;
    temp = *x;
    *x = *y;
    *y = temp;
}
 
/* Function to print permutations of string
   This function takes three parameters:
   1. String
   2. Starting index of the string
   3. Ending index of the string. */
void permute(char *a, int i, int n) 
{
   int j; 
   if (i == n)
     printf(&quot;%s\n&quot;, a);
   else
   {
        for (j = i; j &lt;= n; j++)
       {
          swap((a+i), (a+j));
          permute(a, i+1, n);
          swap((a+i), (a+j)); //backtrack
       }
   }
} 

/* Driver program to test above functions */
int main()
{
   char a[] = &quot;ABC&quot;;  
   permute(a, 0, 2);
   getchar();
   return 0;
}
</pre>
<p>Output:
<pre>ABC
ACB
BAC
BCA
CBA
CAB</pre>
<p><strong><br />
Algorithm Paradigm: </strong>Backtracking<br />
<strong>Time Complexity:  </strong>O(n*n!)</p>
<p>Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-5-longest-common-substring-2/" title="Suffix Tree Application 5 &#8211; Longest Common Substring">Suffix Tree Application 5 &#8211; Longest Common Substring</a></li><li><a href="http://www.geeksforgeeks.org/generalized-suffix-tree-1/" title="Generalized Suffix Tree 1">Generalized Suffix Tree 1</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-4-build-linear-time-suffix-array/" title="Suffix Tree Application 4 &#8211; Build Linear Time Suffix Array">Suffix Tree Application 4 &#8211; Build Linear Time Suffix Array</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-3-longest-repeated-substring/" title="Suffix Tree Application 3 &#8211; Longest Repeated Substring">Suffix Tree Application 3 &#8211; Longest Repeated Substring</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-2-searching-all-patterns/" title="Suffix Tree Application 2 &#8211; Searching All Patterns">Suffix Tree Application 2 &#8211; Searching All Patterns</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-1-substring-check/" title="Suffix Tree Application 1 &#8211; Substring Check">Suffix Tree Application 1 &#8211; Substring Check</a></li><li><a href="http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-6/" title="Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 6">Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 6</a></li><li><a href="http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-5/" title="Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 5">Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 5</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/backtracking/" rel="tag">Backtracking</a>, <a href="http://www.geeksforgeeks.org/tag/mathematicalalgo/" rel="tag">MathematicalAlgo</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fwrite-a-c-program-to-print-all-permutations-of-a-given-string%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" data-text="Write a C program to print all permutations of a given string" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34822">
        <div id="dsq-comment-header-34822" class="dsq-comment-header">
            <cite id="dsq-cite-34822">
                <span id="dsq-author-user-34822">Ankit Jain</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34822" class="dsq-comment-body">
            <div id="dsq-comment-message-34822" class="dsq-comment-message"><p>#include<br />
#include<br />
void permutation(char str[],char a[],int j,int flag[])<br />
{<br />
    int i;<br />
    if(j==strlen(str))<br />
    {<br />
        a[j]=0;<br />
        printf(&#8220;%sn&#8221;,a);<br />
    }<br />
    else<br />
    {<br />
        for(i=0;i&lt;strlen(str);i++)<br />
        {<br />
            if(!flag[str[i]-65])<br />
            {<br />
                a[j]=str[i];<br />
                flag[str[i]-65]=1;<br />
                permutation(str,a,j+1,flag);<br />
                flag[str[i]-65]=0;<br />
            }<br />
        }<br />
    }<br />
}</p>
<p>main()<br />
{<br />
    char str[]=&quot;ABCD&quot;,a[50];<br />
    int flag[50],i;<br />
    for(i=0;i&lt;50;i++)<br />
        flag[i]=0;<br />
    permutation(str,a,0,flag);<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34423">
        <div id="dsq-comment-header-34423" class="dsq-comment-header">
            <cite id="dsq-cite-34423">
                <span id="dsq-author-user-34423">Sab</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34423" class="dsq-comment-body">
            <div id="dsq-comment-message-34423" class="dsq-comment-message"><p>int ncpoints = 10;</p>
<p>int Npoints = (pow(2,ncpoints))-2;<br />
for(int i=0; i&lt;Npoints; i++)<br />
  {<br />
    int series[10]={0,1,2,3,4,5,6,7,8,9};<br />
    for(int j=0; j&lt;ncpoints; j++)<br />
    {<br />
       int val = (int)pow(2.0,j);<br />
       if(i &amp; (val))<br />
       {<br />
          t = series[j];<br />
      if(j+1 &lt; ncpoints)<br />
          {<br />
              series[j] = series[j+1];<br />
         series[j+1] = t;<br />
          }<br />
          else<br />
      {<br />
             series[j] = series[0];<br />
             series[0] = t;<br />
          }<br />
       }<br />
    }<br />
for(int i=0;i&lt;Npoints;i++)</p>
<p>{<br />
for(int k=0;k&lt;ncpoints;k++)<br />
{<br />
printf(&quot;%d&quot;,series[k]);<br />
}<br />
printf(&quot;n&quot;);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-34167">
        <div id="dsq-comment-header-34167" class="dsq-comment-header">
            <cite id="dsq-cite-34167">
                <span id="dsq-author-user-34167">Tokala</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34167" class="dsq-comment-body">
            <div id="dsq-comment-message-34167" class="dsq-comment-message"><p><a href="http://ideone.com/nyAHFT" rel="nofollow">http://ideone.com/nyAHFT</a><br />
is O(n!)  solution we cannot do better than this because we have n! permutations of string of length n</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34165">
        <div id="dsq-comment-header-34165" class="dsq-comment-header">
            <cite id="dsq-cite-34165">
                <span id="dsq-author-user-34165">duskoKoscica</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34165" class="dsq-comment-body">
            <div id="dsq-comment-message-34165" class="dsq-comment-message"><p>Permutations, permutations, permutations!              Nice stuff for sure, but there is at last five ways to achieve this thing&gt; recursion, sorting parst of array, throu vectors and next permut, some data structures, and yesterday I got one more way, you have permutations of 2 then you bild it up to 3, &#8230;  etc. There are manny way one could achieve this task, but one very important fact is there is N! of them. You could even solve some problems with it but it would be to slow for real time applications. The better way could be sometime accieved thorou some other technikes, but sometimes you have the ways to dissmiss some paths as not possible so there is a chance for applicatons of this one. Or it could be used in scientific sitautions where you need to solve something but you don&#8217;t care how long it takes! Mutlythreading is the way to go this years in my oppinion!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-34164">
        <div id="dsq-comment-header-34164" class="dsq-comment-header">
            <cite id="dsq-cite-34164">
                <span id="dsq-author-user-34164">duskoKoscica</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34164" class="dsq-comment-body">
            <div id="dsq-comment-message-34164" class="dsq-comment-message"><p>Permutations, permutations, permutations!              Nice stuff for sure, but there is at last five ways to achieve this thing&gt; recursion, sorting parst of array, throu vectors and next permut, some data structures, and yesterday I got one more way, you have permutations of 2 then you bild it up to 3, &#8230;  etc. There are manny way one could achieve this task, but one very important fact is there is N! of them. You could even solve some problems with it but it would be to slow for real time applications. The better way could be sometime accieved thorou some other technikes, but sometimes you have the ways to dissmiss some paths as not possible so there is a chance for applicatons of this one. Or it could be used in scientific sitautions where you need to solve something but you don&#8217;t care how long it takes! Mutlythreading is the way to go this years in my oppinion!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33723">
        <div id="dsq-comment-header-33723" class="dsq-comment-header">
            <cite id="dsq-cite-33723">
                <span id="dsq-author-user-33723">rohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33723" class="dsq-comment-body">
            <div id="dsq-comment-message-33723" class="dsq-comment-message"><p>DFS can be used to generate all permutations of a string.</p>
<p>Code: <a href="http://ideone.com/cKgy3m" rel="nofollow">http://ideone.com/cKgy3m</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-33646">
        <div id="dsq-comment-header-33646" class="dsq-comment-header">
            <cite id="dsq-cite-33646">
                <span id="dsq-author-user-33646">ar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33646" class="dsq-comment-body">
            <div id="dsq-comment-message-33646" class="dsq-comment-message"><p>what is the way of passing very huge numbers in c a normal double array is not working ,is there a way to intialize a array with say 10000000000 digits,i.e each digit for one array space  or some what of that type &#8230;&#8230;?or c doesnt handle such huge numbers ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33583">
        <div id="dsq-comment-header-33583" class="dsq-comment-header">
            <cite id="dsq-cite-33583">
                <span id="dsq-author-user-33583">SN</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33583" class="dsq-comment-body">
            <div id="dsq-comment-message-33583" class="dsq-comment-message"><p>Using std::string and member-functions for the below c++ solution:</p>
<p>/* Generate permutations of a string */</p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>using namespace std;</p>
<p>vector GenPrmutations(std::string str) {</p>
<p>  vector strList;</p>
<p>  if (str.empty()) {</p>
<p>    return vector();</p>
<p>  }</p>
<p>  if (str.length() == 1) {</p>
<p>    strList.push_back(str);</p>
<p>  }</p>
<p>  else {</p>
<p>    char c = str.at(0);</p>
<p>    string rest = str.substr(1, str.length()-1);</p>
<p>    vector restList = GenPrmutations(rest);</p>
<p>    for (vector::iterator itr = restList.begin();</p>
<p>             itr != restList.end(); itr++) {</p>
<p>      unsigned int len = (*itr).length();</p>
<p>      for (unsigned int pos=0; pos &lt;= len; ++pos) {</p>
<p>        string tmp = (*itr);</p>
<p>        tmp.insert(pos, 1, c);</p>
<p>        strList.push_back(tmp);</p>
<p>      }</p>
<p>    }</p>
<p>  }</p>
<p>  return strList;</p>
<p>}</p>
<p>int main () {</p>
<p>  vector strList = GenPrmutations(&#8220;abc&#8221;);</p>
<p>  for (vector::iterator itr = strList.begin();</p>
<p>           itr != strList.end(); itr++) {</p>
<p>    cout &lt;&lt; (*itr) &lt;&lt; endl;</p>
<p>  }</p>
<p>  return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-32750">
        <div id="dsq-comment-header-32750" class="dsq-comment-header">
            <cite id="dsq-cite-32750">
                <span id="dsq-author-user-32750">Kai</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32750" class="dsq-comment-body">
            <div id="dsq-comment-message-32750" class="dsq-comment-message"><p>The solution doesn&#8217;t work if the string contains duplicate charaters like &#8216;AAB&#8217; , obviously this case should be handled by the permutation algo.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32371">
        <div id="dsq-comment-header-32371" class="dsq-comment-header">
            <cite id="dsq-cite-32371">
                <span id="dsq-author-user-32371">Pratham</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32371" class="dsq-comment-body">
            <div id="dsq-comment-message-32371" class="dsq-comment-message"><p>I wrote the code for variable length string but the program gives segmentation fault.<br />
#include<br />
void swap(char *i,char *j)<br />
{<br />
     char t;<br />
     t=*i;<br />
     *i=*j;<br />
     *j=t;<br />
}<br />
void perm(char *str,int i,int n)<br />
{<br />
    int j;<br />
     if(i==n)<br />
     {<br />
             printf(&#8220;%s&#8221;,str);<br />
     }<br />
     else<br />
     {<br />
           for(j=i;j&lt;=n;j++)<br />
           {<br />
                           swap(str+i,str+j);<br />
                           perm(str,i+1,n);<br />
                           swap(str+i,str+j);<br />
           }<br />
     }<br />
}</p>
<p>int main()<br />
{<br />
    char *string;<br />
    int n;<br />
    printf(&quot;Enter the string&quot;);<br />
    scanf(&quot;%s&quot;,string);<br />
    n=strlen(string);<br />
    perm(string,0,n);<br />
    return 0;<br />
}</p>
<p>please tell me where i went wrong</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-32403">
        <div id="dsq-comment-header-32403" class="dsq-comment-header">
            <cite id="dsq-cite-32403">
                <span id="dsq-author-user-32403">Javed</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32403" class="dsq-comment-body">
            <div id="dsq-comment-message-32403" class="dsq-comment-message"><p>in the main() funcion you need to pass 1 less than strlen(string) i.e the maximum actual index in the string i.e. n-1 to the function perm().</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-32449">
        <div id="dsq-comment-header-32449" class="dsq-comment-header">
            <cite id="dsq-cite-32449">
                <span id="dsq-author-user-32449">Pratham</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32449" class="dsq-comment-body">
            <div id="dsq-comment-message-32449" class="dsq-comment-message"><p>I tried it javed but still it is giving me the same segmentation fault .<br />
I am using dev C++ ide</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-32780">
        <div id="dsq-comment-header-32780" class="dsq-comment-header">
            <cite id="dsq-cite-32780">
                <span id="dsq-author-user-32780">SHANTANU AGRAWAL</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32780" class="dsq-comment-body">
            <div id="dsq-comment-message-32780" class="dsq-comment-message"><p><a href="http://ideone.com/WPCW48" rel="nofollow">http://ideone.com/WPCW48</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-32163">
        <div id="dsq-comment-header-32163" class="dsq-comment-header">
            <cite id="dsq-cite-32163">
                <span id="dsq-author-user-32163">Ankit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32163" class="dsq-comment-body">
            <div id="dsq-comment-message-32163" class="dsq-comment-message"><p>Can someone tell me that when I use char *temp in the swap function why doesn&#8217;t my program work?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-32393">
        <div id="dsq-comment-header-32393" class="dsq-comment-header">
            <cite id="dsq-cite-32393">
                <span id="dsq-author-user-32393">sonu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32393" class="dsq-comment-body">
            <div id="dsq-comment-message-32393" class="dsq-comment-message"><p>When length of string is unknown ,i.e. Char array can be of any size , Pass by reference  is used .</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31996">
        <div id="dsq-comment-header-31996" class="dsq-comment-header">
            <cite id="dsq-cite-31996">
                <span id="dsq-author-user-31996">Vignesh A</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31996" class="dsq-comment-body">
            <div id="dsq-comment-message-31996" class="dsq-comment-message"><p>The code works fine with out Back Tracking.. Please explain the logic</p>
<p>void permute(char *a, int i, int n)<br />
{<br />
   int j;<br />
   if (i == n)<br />
     printf(&#8220;%sn&#8221;, a);<br />
   else<br />
   {<br />
        for (j = i; j &lt;= n; j++)<br />
       {<br />
          swap((a+i), (a+j));<br />
          permute(a, i+1, n);<br />
        //  swap((a+i), (a+j)); //backtrack<br />
       }<br />
   }<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-32417">
        <div id="dsq-comment-header-32417" class="dsq-comment-header">
            <cite id="dsq-cite-32417">
                <span id="dsq-author-user-32417">Sudheer Reddy Jakkam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32417" class="dsq-comment-body">
            <div id="dsq-comment-message-32417" class="dsq-comment-message"><p>with out backtracking ,The string order will not be changed for every iteration.<br />
try with string &#8220;ABCD&#8221;.you will find repeated patterns with B.<br />
Once you swap the elements in the every iteration,it is better to swap the elements back to the original order .</p>
<p>see this link</p>
<p><a href="http://ideone.com/Cd4WUq" rel="nofollow">http://ideone.com/Cd4WUq</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31477">
        <div id="dsq-comment-header-31477" class="dsq-comment-header">
            <cite id="dsq-cite-31477">
                <span id="dsq-author-user-31477">Andria</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31477" class="dsq-comment-body">
            <div id="dsq-comment-message-31477" class="dsq-comment-message"><p>Hello everyone!I have to create a similar algorithm that records all possible rearrangements of the characters at a string with five different characters.My program has to be general (the user types the string). Can someone help me? Thank&#8217;s!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-31023">
        <div id="dsq-comment-header-31023" class="dsq-comment-header">
            <cite id="dsq-cite-31023">
                <span id="dsq-author-user-31023">saurabh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31023" class="dsq-comment-body">
            <div id="dsq-comment-message-31023" class="dsq-comment-message"><p>In this algorithm, if we avoid the second swap function, the program still works. Can someone please explain this?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-31173">
        <div id="dsq-comment-header-31173" class="dsq-comment-header">
            <cite id="dsq-cite-31173">
                <span id="dsq-author-user-31173">Charles</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31173" class="dsq-comment-body">
            <div id="dsq-comment-message-31173" class="dsq-comment-message"><p>no, it won&#8217;t work , try &#8216;abcd&#8217;, you can see though you still got 24 strings, some of them are duplicated , the reason for the 2nd swap is to restore the original permutation so that you won&#8217;t have a false positive result.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30668">
        <div id="dsq-comment-header-30668" class="dsq-comment-header">
            <cite id="dsq-cite-30668">
                <span id="dsq-author-user-30668">Gaurav Ramesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30668" class="dsq-comment-body">
            <div id="dsq-comment-message-30668" class="dsq-comment-message"><p>you could change the condition for swap to make it work for repeated characters, where the number of permutations reduce..</p>
<p>for(..){<br />
  if(a+i == a+j &amp;&amp; i != j) continue;<br />
  // rest of the code as given<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30641">
        <div id="dsq-comment-header-30641" class="dsq-comment-header">
            <cite id="dsq-cite-30641">
                <span id="dsq-author-user-30641">mragrid</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30641" class="dsq-comment-body">
            <div id="dsq-comment-message-30641" class="dsq-comment-message"><p>What if i want the algorithm to stop if it reaches a limit ? for example if we have 3628800 (10!) permutations and i want it to stop when we have generated 1000 permutations ? and what time complexity we will have that way ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30579">
        <div id="dsq-comment-header-30579" class="dsq-comment-header">
            <cite id="dsq-cite-30579">
                <span id="dsq-author-user-30579">Jingguo Yao</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30579" class="dsq-comment-body">
            <div id="dsq-comment-message-30579" class="dsq-comment-message"><p>Lexicographic permutation generation algorithm handles duplicated characters. See page 319 of The Art of Computer Programming, Volume 4A, Chapter 7.2.1.2.<br />
<code><br />
import sys<br />
MIN_INT = -sys.maxint - 1<br />
def lexicographic_order_generation(A):<br />
    A[0:0] = [MIN_INT]<br />
    A.sort()<br />
    n = len(A) - 1<br />
    while True:<br />
        print("".join([str(x) for x in A[1:]]))<br />
        j = n - 1<br />
        while A[j] &gt;= A[j + 1]:<br />
            j -= 1<br />
        if j == 0:<br />
            return<br />
        l = n<br />
        while A[j] &gt;= A[l]:<br />
            l -= 1<br />
        A[j], A[l] = A[l], A[j]<br />
        suffix = A[j+1:]<br />
        suffix.reverse()<br />
        A = A[:(j + 1)] + suffix</p>
<p>A = [1, 2, 3]<br />
lexicographic_order_generation(A)<br />
A = list("AABAAC")<br />
lexicographic_order_generation(A)<br />
</code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30521">
        <div id="dsq-comment-header-30521" class="dsq-comment-header">
            <cite id="dsq-cite-30521">
                <span id="dsq-author-user-30521">mathsmaths</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30521" class="dsq-comment-body">
            <div id="dsq-comment-message-30521" class="dsq-comment-message"><p>thanks</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-29238">
        <div id="dsq-comment-header-29238" class="dsq-comment-header">
            <cite id="dsq-cite-29238">
                <span id="dsq-author-user-29238">DevilGeek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29238" class="dsq-comment-body">
            <div id="dsq-comment-message-29238" class="dsq-comment-message"><p>Just like a tower of Hanoi.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29230">
        <div id="dsq-comment-header-29230" class="dsq-comment-header">
            <cite id="dsq-cite-29230">
http://atiqwhiz.blogspot.in/                <span id="dsq-author-user-29230">atiq</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29230" class="dsq-comment-body">
            <div id="dsq-comment-message-29230" class="dsq-comment-message"><p>//Repeatation will not harm my code&#8230;.<br />
#include<br />
#include<br />
using namespace std;</p>
<p>void Swap(char Str[],int m,int n)<br />
{<br />
char temp=Str[m];<br />
Str[m]=Str[n];<br />
Str[n]=temp;<br />
}<br />
bool Match(char Str[],int i,int j)<br />
{<br />
    if(i == j)<br />
    		return false;<br />
		else<br />
			for(;i=n){cout&lt;&lt;Str&lt;&lt;endl;return;}<br />
    for(int i=m;i&lt;=n;i++)<br />
    {  if(!Match(Str,m,i))<br />
       {<br />
        Swap(Str,i,m);<br />
        Permute(Str,m+1,n);<br />
        Swap(Str,i,m);<br />
       }</p>
<p>    }<br />
}</p>
<p>int main()<br />
{<br />
  char Str[]=&quot;AAB&quot;;<br />
  Permute(Str,0,strlen(Str)-1);</p>
<p>   return 0;<br />
}<br />
//Happy coding</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30391">
        <div id="dsq-comment-header-30391" class="dsq-comment-header">
            <cite id="dsq-cite-30391">
                <span id="dsq-author-user-30391">Sriharsha g.r.v</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30391" class="dsq-comment-body">
            <div id="dsq-comment-message-30391" class="dsq-comment-message"><p>well done and thanq</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28909">
        <div id="dsq-comment-header-28909" class="dsq-comment-header">
            <cite id="dsq-cite-28909">
                <span id="dsq-author-user-28909">Sriharsha g.r.v</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28909" class="dsq-comment-body">
            <div id="dsq-comment-message-28909" class="dsq-comment-message"><p>it will not work for repeated character strings i.e &#8220;abaaa&#8221; it prints many repeated strings</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30667">
        <div id="dsq-comment-header-30667" class="dsq-comment-header">
            <cite id="dsq-cite-30667">
                <span id="dsq-author-user-30667">Gaurav Ramesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30667" class="dsq-comment-body">
            <div id="dsq-comment-message-30667" class="dsq-comment-message"><p>you can change the swap condition .. to only swap when character at i and j are not same.. </p>
<p>so your condition inside for will look like:</p>
<p>for(..){<br />
 if(a+i == a+j &amp;&amp; i != j) continue;<br />
 // rest of the code as given.. </p>
<p>}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-31040">
        <div id="dsq-comment-header-31040" class="dsq-comment-header">
            <cite id="dsq-cite-31040">
                <span id="dsq-author-user-31040">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31040" class="dsq-comment-body">
            <div id="dsq-comment-message-31040" class="dsq-comment-message"><p>should be </p>
<p> if((*(char *)(a+i) == *(char *)(a+j)) &amp;&amp; (i != j)) continue;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-31238">
        <div id="dsq-comment-header-31238" class="dsq-comment-header">
            <cite id="dsq-cite-31238">
                <span id="dsq-author-user-31238">derek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31238" class="dsq-comment-body">
            <div id="dsq-comment-message-31238" class="dsq-comment-message"><p>not correct,<br />
for example &#8216;aabb&#8217;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-32772">
        <div id="dsq-comment-header-32772" class="dsq-comment-header">
            <cite id="dsq-cite-32772">
                <span id="dsq-author-user-32772">Gaurav Ramesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32772" class="dsq-comment-body">
            <div id="dsq-comment-message-32772" class="dsq-comment-message"><p>Hey Derek, I don&#8217;t see why this shouldn&#8217;t work for your input ! when i and j are both pointing to a or b, they shouldn&#8217;t be swapped and just continue..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-31532">
        <div id="dsq-comment-header-31532" class="dsq-comment-header">
            <cite id="dsq-cite-31532">
                <span id="dsq-author-user-31532">akshita</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31532" class="dsq-comment-body">
            <div id="dsq-comment-message-31532" class="dsq-comment-message"><p>will you help me in understanding this code plz</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-32773">
        <div id="dsq-comment-header-32773" class="dsq-comment-header">
            <cite id="dsq-cite-32773">
                <span id="dsq-author-user-32773">Gaurav Ramesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32773" class="dsq-comment-body">
            <div id="dsq-comment-message-32773" class="dsq-comment-message"><p>Hi Akshita,</p>
<p>If you&#8217;ve understood the main code, the change I&#8217;ve suggested is just to prevent swapping of the letters when both letters at i and j are same ! thus avoiding the repeated permutations..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28898">
        <div id="dsq-comment-header-28898" class="dsq-comment-header">
            <cite id="dsq-cite-28898">
                <span id="dsq-author-user-28898">Sameer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28898" class="dsq-comment-body">
            <div id="dsq-comment-message-28898" class="dsq-comment-message"><p><a href="http://codingrecipies.blogspot.in/2013/10/permutation-of-string.html" rel="nofollow">http://codingrecipies.blogspot.in/2013/10/permutation-of-string.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28851">
        <div id="dsq-comment-header-28851" class="dsq-comment-header">
            <cite id="dsq-cite-28851">
                <span id="dsq-author-user-28851">DarkProtocol</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28851" class="dsq-comment-body">
            <div id="dsq-comment-message-28851" class="dsq-comment-message"><p>Without recursion is greatly appreciated!!! Thanks in advance.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-29151">
        <div id="dsq-comment-header-29151" class="dsq-comment-header">
            <cite id="dsq-cite-29151">
                <span id="dsq-author-user-29151">GuestPost</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29151" class="dsq-comment-body">
            <div id="dsq-comment-message-29151" class="dsq-comment-message"><p>//check this<br />
//http://www.cplusplus.com/reference/algorithm/next_permutation/</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28603">
        <div id="dsq-comment-header-28603" class="dsq-comment-header">
            <cite id="dsq-cite-28603">
                <span id="dsq-author-user-28603">Puzzled</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28603" class="dsq-comment-body">
            <div id="dsq-comment-message-28603" class="dsq-comment-message"><p>Can someone explain the time complexity</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27809">
        <div id="dsq-comment-header-27809" class="dsq-comment-header">
            <cite id="dsq-cite-27809">
                <span id="dsq-author-user-27809">Neha Garg</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27809" class="dsq-comment-body">
            <div id="dsq-comment-message-27809" class="dsq-comment-message"><p>i am unable to understand this code ..plz explain it step wise</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-28090">
        <div id="dsq-comment-header-28090" class="dsq-comment-header">
            <cite id="dsq-cite-28090">
                <span id="dsq-author-user-28090">Bharath G M</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28090" class="dsq-comment-body">
            <div id="dsq-comment-message-28090" class="dsq-comment-message"><p><a href="http://www.youtube.com/watch?v=MQcwxQK2DPA" rel="nofollow">http://www.youtube.com/watch?v=MQcwxQK2DPA</a> Good one..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-30128">
        <div id="dsq-comment-header-30128" class="dsq-comment-header">
            <cite id="dsq-cite-30128">
                <span id="dsq-author-user-30128">Guy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30128" class="dsq-comment-body">
            <div id="dsq-comment-message-30128" class="dsq-comment-message"><p>the idea is that for every N length string we can calculate the permutation of that string by first calculating all the strings which start at the first letter of the original string + all the permutations of the rest of the string and then the permutations of the string starts with the second letter + all the permutations of the rest of the string and so on until we reach the strings which starts with the last letter of the string + all the permutations of the rest of the string .<br />
following that logic the recursion tree grows.<br />
the swap simply moves to the start the letter we wanted to start with and is used to make all the changes &#8220;in place&#8221; thus not to waste extra space.<br />
(if space is not a problem then this could also be done by creating an array of strings and concatenating the first letter to the already generated string each time instead of the swap).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27679">
        <div id="dsq-comment-header-27679" class="dsq-comment-header">
            <cite id="dsq-cite-27679">
                <span id="dsq-author-user-27679">all izz well</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27679" class="dsq-comment-body">
            <div id="dsq-comment-message-27679" class="dsq-comment-message"><p>iam not able to understand this program &#8230;.<br />
can anyone trace and explian it plz &#8230;&#8230;&#8230;.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-28091">
        <div id="dsq-comment-header-28091" class="dsq-comment-header">
            <cite id="dsq-cite-28091">
                <span id="dsq-author-user-28091">Bharath G M</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28091" class="dsq-comment-body">
            <div id="dsq-comment-message-28091" class="dsq-comment-message"><p><a href="http://www.youtube.com/watch?v=MQcwxQK2DPA" rel="nofollow">http://www.youtube.com/watch?v=MQcwxQK2DPA</a>.. Good one</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27485">
        <div id="dsq-comment-header-27485" class="dsq-comment-header">
            <cite id="dsq-cite-27485">
                <span id="dsq-author-user-27485">Nhan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27485" class="dsq-comment-body">
            <div id="dsq-comment-message-27485" class="dsq-comment-message"><p>Time Complexity is O(n!), not O(n*n!)</p>
<p>First for-loop is n times, second for-loop in the first recursive call is (n-1) times and so on. Hence O(n!), or more tightly _Theta_(n!) as both lower and upper bounds are (n!)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27427">
        <div id="dsq-comment-header-27427" class="dsq-comment-header">
            <cite id="dsq-cite-27427">
                <span id="dsq-author-user-27427">Silent</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27427" class="dsq-comment-body">
            <div id="dsq-comment-message-27427" class="dsq-comment-message"><p>what is the need of backtrack step here?? answer is still correct without this step..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27622">
        <div id="dsq-comment-header-27622" class="dsq-comment-header">
            <cite id="dsq-cite-27622">
                <span id="dsq-author-user-27622">Pranjal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27622" class="dsq-comment-body">
            <div id="dsq-comment-message-27622" class="dsq-comment-message"><p>Its correct for the ABC case &#8212; Try it with 4 characters and you will see the importance of backtracking !!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-31828">
        <div id="dsq-comment-header-31828" class="dsq-comment-header">
            <cite id="dsq-cite-31828">
                <span id="dsq-author-user-31828">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31828" class="dsq-comment-body">
            <div id="dsq-comment-message-31828" class="dsq-comment-message"><p>the need 4 backtracking is to always work with the original string..in the second iteration after a and b are swapped the string becomes bac..when the function is recurively called..the permutation of bac keepin b fixed are Bac and Bca&#8230;if we leave the string as bca..in the next iteration when we have to swap  a and c(in original string abc) to form cba it would not be possible correctly unless we revert Bca back to bac&#8230;then it would go back change bac to the original string abc after which a and c are swapped  to cba for the next iteration&#8230;see the figure above</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27257">
        <div id="dsq-comment-header-27257" class="dsq-comment-header">
            <cite id="dsq-cite-27257">
                <span id="dsq-author-user-27257">Subrahmanyan Sankaran</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27257" class="dsq-comment-body">
            <div id="dsq-comment-message-27257" class="dsq-comment-message"><p><code><br />
// TreeToDLL.cpp : Defines the entry point for the console application.<br />
#include "stdafx.h"<br />
#include<br />
using namespace std;<br />
struct Node<br />
{<br />
      int data;<br />
      Node *left;<br />
      Node *right;<br />
};<br />
class Tree<br />
{<br />
         static int l;<br />
         static int flip;<br />
         static int leafdepth;<br />
         static Node * prev;<br />
         static Node * previous;<br />
         static int count;<br />
public:<br />
      Node *head;<br />
       int maxdepth;<br />
Tree()<br />
{<br />
   head = NULL;<br />
   maxdepth = 0;<br />
}<br />
void Inorder(Node *node)<br />
{<br />
   if(node)<br />
  {<br />
      Inorder(node-&gt;left);<br />
      std::cout&lt;&lt;&quot; [ &quot;&lt;data &lt;right);<br />
  }<br />
}<br />
void TreetoDLL(Node *node)<br />
{<br />
      if(node)<br />
       {<br />
               TreetoDLL(node-&gt;left);<br />
                if(previous)<br />
                 {<br />
                     previous-&gt;right = node;<br />
                     node-&gt;left = previous;<br />
                 }<br />
                 if(count == 0)<br />
                 {<br />
                   head = node;<br />
                  count = count + 1;<br />
                  }<br />
                     previous = node;<br />
                 TreetoDLL(node-&gt;right);<br />
       }<br />
}<br />
void PrintDLL()<br />
{<br />
    Node *tmp = head;<br />
    while(tmp)<br />
     {<br />
        std::cout&lt;data;<br />
        tmp = tmp-&gt;right;<br />
      }<br />
}<br />
void InsertNode(Node *node,int data)<br />
{<br />
    Node * tmp = node;<br />
    if(head == NULL)<br />
   {<br />
        head = new Node;<br />
         head-&gt;data = data;<br />
         head-&gt;left = NULL;<br />
          head-&gt;right = NULL;<br />
         return;<br />
   }<br />
  else if(tmp)<br />
  {<br />
      prev = tmp;<br />
      if(data &gt; tmp-&gt;data)<br />
      {<br />
     l=0;<br />
      tmp = tmp -&gt; right;<br />
      InsertNode(tmp,data);<br />
     }<br />
    else<br />
    {<br />
         l=1;<br />
         InsertNode(tmp-&gt;left,data);<br />
     }<br />
 }<br />
         if(l == 1)<br />
         {<br />
                  prev-&gt;left = new Node;<br />
                   prev-&gt;left-&gt;data = data;<br />
                  prev-&gt;left-&gt;left = NULL;<br />
                  prev-&gt;left-&gt;right = NULL;<br />
                  l = -1;<br />
                  return;<br />
         }<br />
         else if(l == 0)<br />
         {<br />
                  prev-&gt;right = new Node;<br />
                  prev-&gt;right-&gt;data = data;<br />
                  prev-&gt;right-&gt;left = NULL;<br />
                  prev-&gt;right-&gt;right = NULL;<br />
                   l = -1;<br />
                   return;<br />
          }<br />
}<br />
};<br />
int Tree::l =0;<br />
int Tree::flip =0;<br />
int Tree::leafdepth =-1;<br />
int Tree::count = 0;<br />
Node * Tree::prev = NULL;<br />
Node * Tree::previous = NULL;<br />
int main(int argc, char* argv[])<br />
{<br />
Tree t;<br />
t.InsertNode(t.head,10);<br />
t.InsertNode(t.head,7);<br />
t.InsertNode(t.head,13);<br />
t.InsertNode(t.head,5);<br />
t.InsertNode(t.head,9);<br />
t.InsertNode(t.head,12);<br />
t.InsertNode(t.head,15);<br />
t.InsertNode(t.head,3);<br />
t.InsertNode(t.head,6);<br />
t.InsertNode(t.head,8);<br />
t.InsertNode(t.head,11);<br />
t.InsertNode(t.head,1);<br />
t.InsertNode(t.head,4);<br />
t.InsertNode(t.head,2);<br />
t.TreetoDLL(t.head);<br />
t.PrintDLL();<br />
return 0;<br />
}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-raghvendra even thread-odd thread-alt depth-1" id="dsq-comment-26650">
        <div id="dsq-comment-header-26650" class="dsq-comment-header">
            <cite id="dsq-cite-26650">
                <span id="dsq-author-user-26650">raghvendra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-26650" class="dsq-comment-body">
            <div id="dsq-comment-message-26650" class="dsq-comment-message"><pre> <code language="C">
#include &lt;iostream&gt;
#include&lt;stdlib.h&gt;
#include&lt;cstring&gt;
using namespace std;
char str[100];
void permutation(int n)
{
    char x;
    if(n&lt;=0)
    {
        cout&lt;&lt;str&lt;&lt;endl;
        return;
    }
    for(int i=0;i&lt;n;i++)
    {
        x=str[i];
        str[i]=str[n-1];
        str[n-1]=x;
        permutation(n-1);
        x=str[i];
        str[i]=str[n-1];
        str[n-1]=x;
    }
}
int main()
{
    cin&gt;&gt;str;
    cout&lt;&lt;&quot;the permutations are:\n&quot;
    permutation(strlen(str));
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27319">
        <div id="dsq-comment-header-27319" class="dsq-comment-header">
            <cite id="dsq-cite-27319">
                <span id="dsq-author-user-27319">EDGE</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27319" class="dsq-comment-body">
            <div id="dsq-comment-message-27319" class="dsq-comment-message"><p>The output size is too large (infinite loop or larger text output).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-nomank even thread-even depth-1" id="dsq-comment-24419">
        <div id="dsq-comment-header-24419" class="dsq-comment-header">
            <cite id="dsq-cite-24419">
                <span id="dsq-author-user-24419">nomank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24419" class="dsq-comment-body">
            <div id="dsq-comment-message-24419" class="dsq-comment-message"><p>public class StringPermutation {<br />
	public static void main(String[] args) {<br />
		stringPermutation(&quot;TESTPERMUTATION&quot;);<br />
	}<br />
	public static void stringPermutation(String str) {<br />
		if (str == null )<br />
			return;<br />
		doPermutation(&quot;&quot;, str);</p>
<p>	}<br />
	public static void doPermutation(String prefix, String str) {<br />
		if (str.length() == 1) {<br />
			System.out.println(prefix + str);<br />
			return;<br />
		}<br />
		for (int i = 0; i &lt; str.length(); i++) {<br />
			doPermutation(prefix + str.charAt(i), removeCharAt(str,i));<br />
		}<br />
	}<br />
	public static String removeCharAt(String str, int index) {<br />
		StringBuilder sb = new StringBuilder(str);<br />
		sb.deleteCharAt(index);<br />
		return sb.toString();<br />
	}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-22843">
        <div id="dsq-comment-header-22843" class="dsq-comment-header">
            <cite id="dsq-cite-22843">
http://www.retrify.com                <span id="dsq-author-user-22843">irfanali</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22843" class="dsq-comment-body">
            <div id="dsq-comment-message-22843" class="dsq-comment-message"><pre> <code language="C">
public class permute {

    static void permute(int level, String permuted,
                    boolean used[], String original) {
        int length = original.length();
        if (level == length) {
            System.out.println(permuted);
        } else {
            for (int i = 0; i &lt; length; i++) {
                if (!used[i]) {
                    used[i] = true;
                    permute(level + 1, permuted + original.charAt(i),
                       used, original);
                    used[i] = false;
                }
            }
        }
    }

    public static void main(String[] args) {
        String s = &quot;hello&quot;;
        boolean used[] = {false, false, false, false, false};
        permute(0, &quot;&quot;, used, s);
    }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-raj-kishor even thread-even depth-1" id="dsq-comment-22539">
        <div id="dsq-comment-header-22539" class="dsq-comment-header">
            <cite id="dsq-cite-22539">
                <span id="dsq-author-user-22539">Raj Kishor</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22539" class="dsq-comment-body">
            <div id="dsq-comment-message-22539" class="dsq-comment-message"><p>//permutation of a string<br />
#include&lt;iostream&gt;<br />
#include&lt;string&gt;<br />
using namespace std;</p>
<p>void permute(string ,string , int);</p>
<p>int main()<br />
{<br />
	string str=&quot;&quot;,dats;<br />
	cout&lt;&lt;&quot;String: &quot;;<br />
	cin&gt;&gt;dats;<br />
	cout&lt;&lt;&quot;The Permutations of \&#8217;&quot;&lt;&lt;dats&lt;&lt;&quot;\&#8217; are&#8230;&quot;&lt;&lt;endl;<br />
	permute(str,dats,0);<br />
}</p>
<p>void permute(string str,string dats, int j)<br />
{<br />
	int l,i;<br />
	if(j==dats.length())<br />
	{<br />
		cout&lt;&lt;str&lt;&lt;endl;<br />
		return;<br />
	}<br />
	l=str.length();<br />
	string temp,p;<br />
	temp=str;<br />
	for(i=0;i&lt;=l;i++)<br />
	{<br />
		p=dats[j];<br />
		str.insert(l-i,p);<br />
		permute(str,dats,j+1);<br />
		str=temp;<br />
	}<br />
} </p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-22472">
        <div id="dsq-comment-header-22472" class="dsq-comment-header">
            <cite id="dsq-cite-22472">
                <span id="dsq-author-user-22472">vishal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22472" class="dsq-comment-body">
            <div id="dsq-comment-message-22472" class="dsq-comment-message"><p>//In C#&#8230;.<br />
public static void permutation(string strPrefix, string str)<br />
        {<br />
            int n = str.Length;</p>
<p>            if(n == 1)<br />
            Console.WriteLine(strPrefix + str);</p>
<p>            for (int i = 0; i &lt; str.Length; i++)<br />
            {<br />
                string prefix = strPrefix + str.Substring(i, 1);<br />
                permutation(prefix, str.Substring(0,i) + str.Substring(i+1,n-i-1));</p>
<p>            }<br />
        }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rajashekar007 even thread-even depth-1" id="dsq-comment-22376">
        <div id="dsq-comment-header-22376" class="dsq-comment-header">
            <cite id="dsq-cite-22376">
                <span id="dsq-author-user-22376">rajashekar007</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22376" class="dsq-comment-body">
            <div id="dsq-comment-message-22376" class="dsq-comment-message"><p>What if there are duplicates in the string?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-onlynishant odd alt thread-odd thread-alt depth-1" id="dsq-comment-21670">
        <div id="dsq-comment-header-21670" class="dsq-comment-header">
            <cite id="dsq-cite-21670">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-21670">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21670" class="dsq-comment-body">
            <div id="dsq-comment-message-21670" class="dsq-comment-message"><p>Modification in above code to print non duplicate string in lexicographic or dictionary order. Please note that this is not the best method. A n*n! solution is already available on this site. This is to just extend the concept of this problem.</p>
<pre> <code language="C">
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int count = 0;

int string_length(char str[])
{
   int i;
   for(i=0; i&lt;80; i++)
   {
     if(str[i]=='&#92;&#48;')
	 {
	    return(i);
	 }
   }
}

void string_sort(char s[])
{
  char tmp;
  int i, j, length;
  length=string_length(s);
  for(i=0; i&lt;length-1; i++)
  {
    for (j=i+1; j&lt;length; j++)
	{
	   if (s[i] &gt; s[j])
	   {
		 tmp=s[i];
		 s[i]=s[j];
		 s[j]=tmp;
	   }
	}
  }
}

void swap(char* str,int i,int j){
    char c = str[i];
    str[i] = str[j];
    str[j] = c;
}

int match(char* str,int i,int j){
    if(i==j)
    return 0;
    int k = i;
    for(k=i;k&lt;j;k++){
        if(str[k]==str[j])
        return 1;
    }
    return 0;
}

void foo(char* str,int i,int n){
    if(i==n){
        printf(&quot;%s\n&quot;,str);
        count++;
    }else{
        int j = 0;
        string_sort(str+i);
        for(j=i;j&lt;=n;j++){
            if(!match(str,i,j)){
                swap(str,i,j);
                foo(str,i+1,n);
                swap(str,j,i);
                string_sort(str+i);
            }
        }
    }
}

main()
{
   char str[] = &quot;AGRA&quot;;
   int size = sizeof(str)/sizeof(str[0]);
   foo(str,0,size-2);
  //string_sort(str+1);
   printf(&quot;Total String printed = %d&quot;,count);
   return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-onlynishant even depth-2" id="dsq-comment-21675">
        <div id="dsq-comment-header-21675" class="dsq-comment-header">
            <cite id="dsq-cite-21675">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-21675">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21675" class="dsq-comment-body">
            <div id="dsq-comment-message-21675" class="dsq-comment-message"><p>last swap() in for loop is not required.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-24557">
        <div id="dsq-comment-header-24557" class="dsq-comment-header">
            <cite id="dsq-cite-24557">
                <span id="dsq-author-user-24557">coder!</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24557" class="dsq-comment-body">
            <div id="dsq-comment-message-24557" class="dsq-comment-message"><p>its required man!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-onlynishant even depth-4" id="dsq-comment-24684">
        <div id="dsq-comment-header-24684" class="dsq-comment-header">
            <cite id="dsq-cite-24684">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-24684">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24684" class="dsq-comment-body">
            <div id="dsq-comment-message-24684" class="dsq-comment-message"><p>@coder! &#8211; </p>
<pre> <code language="C">
swap(str,j,i);
string_sort(str+i);
</code> </pre>
<p>Swap() is swapping ith and jth char.In next line string_sort() is sorting the string after ith position (inclusive) and j will be always >= i. so the swap() is having no significance in this case.</p>
<p>Can you provide some test cases when without swap() it gives wrong output.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-5" id="dsq-comment-28922">
        <div id="dsq-comment-header-28922" class="dsq-comment-header">
            <cite id="dsq-cite-28922">
                <span id="dsq-author-user-28922">Sumit Gera</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28922" class="dsq-comment-body">
            <div id="dsq-comment-message-28922" class="dsq-comment-message"><p>It is required. Compare the outputs for input string &#8220;ABCD&#8221; with both the versions &#8211; one with and one without second swap().</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-5" id="dsq-comment-32101">
        <div id="dsq-comment-header-32101" class="dsq-comment-header">
            <cite id="dsq-cite-32101">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-32101">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32101" class="dsq-comment-body">
            <div id="dsq-comment-message-32101" class="dsq-comment-message"><p>@sumitgera:disqus my comment is in context with my code posted above. can you check it again? It works fine for &#8220;ABCD&#8221;.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-31976">
        <div id="dsq-comment-header-31976" class="dsq-comment-header">
            <cite id="dsq-cite-31976">
                <span id="dsq-author-user-31976">lk</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31976" class="dsq-comment-body">
            <div id="dsq-comment-message-31976" class="dsq-comment-message"><p>Could you please explain &#8220;match&#8221; method?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-32103">
        <div id="dsq-comment-header-32103" class="dsq-comment-header">
            <cite id="dsq-cite-32103">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-32103">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32103" class="dsq-comment-body">
            <div id="dsq-comment-message-32103" class="dsq-comment-message"><p>@lk match() method ensure that we don&#8217;t process same character again in current sub string (in foo() method for loop) which will lead to duplicate result. Suppose if we are processing &#8220;AGRA&#8221; and in the very first recursion call we call the A + foo(&#8220;GRA&#8221;) here &#8216;A&#8217; is first character and suppose if we will call foo() gain with last &#8216;A&#8217; it will produce same result as with first character &#8216;A&#8217; . So to avoid this situation match() method loop through that sub string (string[i&#8230;n]) and match currently processing character. It it matches with previously processed character it will not process it further to avoid duplicate result. if &#8216;i&#8217; and &#8216;j&#8217; are same (in match method) that means we have just entered in that loop and has not processed any character yet so it will return 0.If you will expand the recursion call it will help you to understand it better.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-onlynishant odd alt thread-even depth-1" id="dsq-comment-21431">
        <div id="dsq-comment-header-21431" class="dsq-comment-header">
            <cite id="dsq-cite-21431">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-21431">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21431" class="dsq-comment-body">
            <div id="dsq-comment-message-21431" class="dsq-comment-message"><p>Small modification in given code to handle duplicate characters.</p>
<pre> <code language="C">
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int count = 0;

void swap(char* str,int i,int j){
    char c = str[i];
    str[i] = str[j];
    str[j] = c;
}

int match(char* str,int i,int j){
    if(i==j)
    return 0;
    int k = i;
    for(k=i;k&lt;j;k++){
        if(str[k]==str[j])
        return 1;
    }
    return 0;
}

void foo(char* str,int i,int n){
    if(i==n){
        printf(&quot;%s\n&quot;,str);
        count++;
    }else{
        int j = 0;
        for(j=i;j&lt;=n;j++){
            if(!match(str,i,j)){
                swap(str,i,j);
                foo(str,i+1,n);
                swap(str,j,i);
            }
        }
    }
}

main()
{
   char str[] = &quot;AGARA&quot;;
   int size = sizeof(str)/sizeof(str[0]);
   foo(str,0,size-2);
   printf(&quot;Total String printed = %d&quot;,count);
   return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-onlynishant even depth-2" id="dsq-comment-21435">
        <div id="dsq-comment-header-21435" class="dsq-comment-header">
            <cite id="dsq-cite-21435">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-21435">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21435" class="dsq-comment-body">
            <div id="dsq-comment-message-21435" class="dsq-comment-message"><p>A hash table can be used instead of for loop in match function to reduce lookup time.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-21550">
        <div id="dsq-comment-header-21550" class="dsq-comment-header">
            <cite id="dsq-cite-21550">
                <span id="dsq-author-user-21550">munish singla</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21550" class="dsq-comment-body">
            <div id="dsq-comment-message-21550" class="dsq-comment-message"><p>what the complexity of this programe..???</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-onlynishant even depth-3" id="dsq-comment-21674">
        <div id="dsq-comment-header-21674" class="dsq-comment-header">
            <cite id="dsq-cite-21674">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-21674">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21674" class="dsq-comment-body">
            <div id="dsq-comment-message-21674" class="dsq-comment-message"><p>It should be (n^2)*n!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-31535">
        <div id="dsq-comment-header-31535" class="dsq-comment-header">
            <cite id="dsq-cite-31535">
                <span id="dsq-author-user-31535">akshita</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31535" class="dsq-comment-body">
            <div id="dsq-comment-message-31535" class="dsq-comment-message"><p>how here size has been calculated plz tell me</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-32105">
        <div id="dsq-comment-header-32105" class="dsq-comment-header">
            <cite id="dsq-cite-32105">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-32105">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32105" class="dsq-comment-body">
            <div id="dsq-comment-message-32105" class="dsq-comment-message"><p>char str[] = &#8220;AGARA&#8221;;<br />
   int size = sizeof(str)/sizeof(str[0]);</p>
<p>Here, sizeof(str) will give you size of  array &#8216;str&#8217; in the memory at compile time which is 6 ((5 characters + one null character at the end ) * size of every element of array which is 1 in this case) and sizeof(str[0]) is nothing but size of first element (character) of the array &#8216;str&#8217; which is 1 because array is character array and it&#8217;s element are of type char. Now if we divide total size of array with size of one element of array we will get number of elements in array i.e. length of array.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-19017">
        <div id="dsq-comment-header-19017" class="dsq-comment-header">
            <cite id="dsq-cite-19017">
                <span id="dsq-author-user-19017">mahesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19017" class="dsq-comment-body">
            <div id="dsq-comment-message-19017" class="dsq-comment-message"><p>To get better understand of the code and map it to pictorial representation. Leaf nodes of the tree should also show ABC(because in the first case A is fixed and B is permuted with B itself and the B is permuted with C). This will be helpful in understanding the check.</p>
<p>If(i == n)<br />
   printf(&#8220;&#8221;);</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-19027">
        <div id="dsq-comment-header-19027" class="dsq-comment-header">
            <cite id="dsq-cite-19027">
                <span id="dsq-author-user-19027">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19027" class="dsq-comment-body">
            <div id="dsq-comment-message-19027" class="dsq-comment-message"><p>@mahesh: Thanks for your inputs.  We have updated the diagram for recursion tree.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-even depth-1" id="dsq-comment-17945">
        <div id="dsq-comment-header-17945" class="dsq-comment-header">
            <cite id="dsq-cite-17945">
                <span id="dsq-author-user-17945">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17945" class="dsq-comment-body">
            <div id="dsq-comment-message-17945" class="dsq-comment-message"><p>Important <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-abhishek08aug even depth-2" id="dsq-comment-17946">
        <div id="dsq-comment-header-17946" class="dsq-comment-header">
            <cite id="dsq-cite-17946">
                <span id="dsq-author-user-17946">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17946" class="dsq-comment-body">
            <div id="dsq-comment-message-17946" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17915">
        <div id="dsq-comment-header-17915" class="dsq-comment-header">
            <cite id="dsq-cite-17915">
http://code.scottshipp.com                <span id="dsq-author-user-17915">Scott Shipp</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17915" class="dsq-comment-body">
            <div id="dsq-comment-message-17915" class="dsq-comment-message"><p>Please see my series on this for a solution in Java, plus generating sub-permutations (for string &#8220;abcd&#8221; &#8211; all permutations of abcd, all permutations of bcd, all permutations of cd, etc), plus solving when duplicate characters are part of the string as in the examples, &#8220;aabc,&#8221; &#8220;dddd,&#8221; etc.</p>
<p><a href="http://code.scottshipp.com/2013/04/12/permutations-generator-part-1/" rel="nofollow">http://code.scottshipp.com/2013/04/12/permutations-generator-part-1/</a></p>
<p><a href="http://code.scottshipp.com/2013/04/16/permutation-generator-part-2/" rel="nofollow">http://code.scottshipp.com/2013/04/16/permutation-generator-part-2/</a></p>
<p><a href="http://code.scottshipp.com/2013/04/21/permutation-generator-part-3/" rel="nofollow">http://code.scottshipp.com/2013/04/21/permutation-generator-part-3/</a></p>
<p><a href="http://code.scottshipp.com/2013/04/29/permutation-generator-part-4/" rel="nofollow">http://code.scottshipp.com/2013/04/29/permutation-generator-part-4/</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-18272">
        <div id="dsq-comment-header-18272" class="dsq-comment-header">
            <cite id="dsq-cite-18272">
                <span id="dsq-author-user-18272">Sreenivas Doosa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18272" class="dsq-comment-body">
            <div id="dsq-comment-message-18272" class="dsq-comment-message"><p>Excellent Post duude <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-17861">
        <div id="dsq-comment-header-17861" class="dsq-comment-header">
            <cite id="dsq-cite-17861">
                <span id="dsq-author-user-17861">radhika</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17861" class="dsq-comment-body">
            <div id="dsq-comment-message-17861" class="dsq-comment-message"><p>How to print all possible permutations of strings?<br />
eg. for ABC, we have<br />
AAA<br />
AAB<br />
AAC<br />
ABA<br />
ACA<br />
&#8230;.<br />
CCC<br />
i am kind of stuck into it <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /> !!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-17919">
        <div id="dsq-comment-header-17919" class="dsq-comment-header">
            <cite id="dsq-cite-17919">
                <span id="dsq-author-user-17919">Hammond</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17919" class="dsq-comment-body">
            <div id="dsq-comment-message-17919" class="dsq-comment-message"><pre> <code language="C">
#include&lt;iostream.h&gt;
#include&lt;conio.h&gt;
#include&lt;string.h&gt;

void permute(int);
    
char s[50], temp[50];

int main()
{
    cout&lt;&lt;&quot;\nEnter String: &quot;;
    cin&gt;&gt;s;
    cout&lt;&lt;&quot;\n==========PERMUTATIONS==========\n&quot;;
    permute(0);
    getch();
    return(0);
} 

void permute(int n)
{
    for(int i=0; i&lt;strlen(s); i++)
        if(i == strchr(s, s[i]) - s)
        {
            temp[n] = s[i];
            if(n == strlen(s) - 1)
                cout&lt;&lt;temp&lt;&lt;&quot;\n&quot;;
            else
                permute(n+1);
        }
    temp[n] = NULL;    
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-algocoder odd alt depth-3" id="dsq-comment-21617">
        <div id="dsq-comment-header-21617" class="dsq-comment-header">
            <cite id="dsq-cite-21617">
                <span id="dsq-author-user-21617">AlgoCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21617" class="dsq-comment-body">
            <div id="dsq-comment-message-21617" class="dsq-comment-message"><p>What is the need of  if(i == strchr(s, s[i]) &#8211; s) condition. Can somebody please explain.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-21958">
        <div id="dsq-comment-header-21958" class="dsq-comment-header">
            <cite id="dsq-cite-21958">
                <span id="dsq-author-user-21958">Mridul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21958" class="dsq-comment-body">
            <div id="dsq-comment-message-21958" class="dsq-comment-message"><p>this code works, but can you give me a code which will take input all the 26 characters (A-Z) and give me output size of 10 each time ?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sanjay-agarwal odd alt depth-4" id="dsq-comment-22238">
        <div id="dsq-comment-header-22238" class="dsq-comment-header">
            <cite id="dsq-cite-22238">
                <span id="dsq-author-user-22238">Sanjay Agarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22238" class="dsq-comment-body">
            <div id="dsq-comment-message-22238" class="dsq-comment-message"><p>@Mridul you can go through the following code (written in C++)to get the output of desired size.<br />
In your case, pass k = 10.</p>
<pre> <code language="C">
#include&lt;iostream&gt;
#include&lt;conio.h&gt;
using namespace std;

void find_subset(char *set, char *subset,int n, int k, int j);

int main()
{
    int n,k,i;
    char set[100]={0}, subset[100]={0};
    cout&lt;&lt;&quot;Enter length of the set:&quot;;
    cin&gt;&gt;n;
    
    cout&lt;&lt;&quot;Enter the set:&quot;;
    for(i = 0; i &lt; n; i++)
        cin&gt;&gt;set[i];
    
    cout&lt;&lt;&quot;Enter the value of k(size of subset):&quot;;
    cin&gt;&gt;k;
    
    find_subset(set, subset, n, k, 0);
    
    getch();
    return 0;
}

void find_subset(char *set, char *subset,int n, int k, int j)
{
    if (k == 0){
        subset[j]= '&#92;&#48;';
        cout&lt;&lt;subset&lt;&lt;endl;
        return;
    }
    for(int i = 0; i &lt; n; i++){
        subset[j] = set[i];
        find_subset(set, subset, n, k-1, j+1);
    }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-17111">
        <div id="dsq-comment-header-17111" class="dsq-comment-header">
            <cite id="dsq-cite-17111">
                <span id="dsq-author-user-17111">Tunnu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17111" class="dsq-comment-body">
            <div id="dsq-comment-message-17111" class="dsq-comment-message"><p>Can any one explain in detail how the complexity of the published program is n*n!??</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-16920">
        <div id="dsq-comment-header-16920" class="dsq-comment-header">
            <cite id="dsq-cite-16920">
                <span id="dsq-author-user-16920">Deepesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16920" class="dsq-comment-body">
            <div id="dsq-comment-message-16920" class="dsq-comment-message"><p>A simple iterative function in java</p>
<pre> <code language="C">
	public static void permute(String s) {
		char[] ca = s.toCharArray();
		int l = ca.length;
		if(l == 1) {
			System.out.println(s);
			return;
		}
		int i = 0;
		int start = 0;
		while(start &lt; l) {
			for(int j=i+1; j&lt;l-1 &amp;&amp; j+1 != l; j++) {
				swap(ca, j, j+1);
				System.out.println(new String(ca));
				
			}
			swap(ca, i, l-1);
			System.out.println(new String(ca));
			start++;
		}
	}
	
	public static void swap(char[] arr, int a, int b) {
		char t = arr[a];
		arr[a] = arr[b];
		arr[b] = t;
	}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-16921">
        <div id="dsq-comment-header-16921" class="dsq-comment-header">
            <cite id="dsq-cite-16921">
                <span id="dsq-author-user-16921">Deepesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16921" class="dsq-comment-body">
            <div id="dsq-comment-message-16921" class="dsq-comment-message"><p>realized it will not work for length&gt;3</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-16032">
        <div id="dsq-comment-header-16032" class="dsq-comment-header">
            <cite id="dsq-cite-16032">
                <span id="dsq-author-user-16032">Shiv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16032" class="dsq-comment-body">
            <div id="dsq-comment-message-16032" class="dsq-comment-message"><p>#include<br />
#include</p>
<p>void swap(char *n,int x,int y){<br />
   char temp;<br />
   temp = *(n+x);<br />
   *(n+x) = *(n+y);<br />
   *(n+y) = temp;<br />
}</p>
<p>int main () {</p>
<p>   char b[] = &#8220;abcd&#8221;;<br />
   int size = strlen(b);<br />
   for(int k=0;k&lt;size;k++){<br />
        char *a = b;<br />
        swap(a,0,k);<br />
        for(int j=0;j1;i&#8211;){<br />
                swap(a,i-1,i);<br />
                printf(&#8220;%s \n&#8221;,a);<br />
           }<br />
        }<br />
   }</p>
<p>return 0;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-16033">
        <div id="dsq-comment-header-16033" class="dsq-comment-header">
            <cite id="dsq-cite-16033">
                <span id="dsq-author-user-16033">Shiv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16033" class="dsq-comment-body">
            <div id="dsq-comment-message-16033" class="dsq-comment-message"><p>int main () {</p>
<p>   char b[] = &#8220;abcd&#8221;;<br />
   int size = strlen(b);<br />
   for(int k=0;k&lt;size;k++){<br />
        char *a = b;<br />
        swap(a,0,k);<br />
        for(int j=0;j1;i&#8211;){<br />
                swap(a,i-1,i);<br />
                printf(&#8220;%s \n&#8221;,a);<br />
           }<br />
        }<br />
   }</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-16034">
        <div id="dsq-comment-header-16034" class="dsq-comment-header">
            <cite id="dsq-cite-16034">
                <span id="dsq-author-user-16034">Shiv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16034" class="dsq-comment-body">
            <div id="dsq-comment-message-16034" class="dsq-comment-message"><p>i have 2 time commented but another for-loop for increment i is not showing in the program <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-4" id="dsq-comment-16037">
        <div id="dsq-comment-header-16037" class="dsq-comment-header">
            <cite id="dsq-cite-16037">
                <span id="dsq-author-user-16037">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16037" class="dsq-comment-body">
            <div id="dsq-comment-message-16037" class="dsq-comment-message"><p>@Shiv: Apologies for the inconvenience.  Please try posing your comment between sourcecode tags.  Without sourcecode tags, the comment is processed as normal html content and comparison operators may be considered as beginning of a html tag.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-sid_das odd alt thread-even depth-1" id="dsq-comment-15841">
        <div id="dsq-comment-header-15841" class="dsq-comment-header">
            <cite id="dsq-cite-15841">
                <span id="dsq-author-user-15841">sid_das</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15841" class="dsq-comment-body">
            <div id="dsq-comment-message-15841" class="dsq-comment-message"><p>Permutation Without Repetition</p>
<pre> <code language="C">
# include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

/* Function to swap values at two pointers */
void swap (char *x, char *y)
{
char temp;
temp = *x;
*x = *y;
*y = temp;
}

/* Function to print permutations of string
This function takes three parameters:
1. String
2. Starting index of the string
3. Ending index of the string. */
void permute(char *a, int i, int n) 
{
int j; 
if (i == n)
printf(&quot;%s\n&quot;, a);
else
{
for (j = i; j &lt;= n; j++)
{
swap((a+i), (a+j));
permute(a, i+1, n);
swap((a+i), (a+j)); //backtrack
}
}
} 

/* Driver program to test above functions */
int main( )
{
char a[] = &quot;AAABBBCCC&quot;;
int i,j;
int size,cnt=0;
int s = strlen(a)-1;
size=s;
for(i=0;i&lt;=s;i++)
{
	for(j=i+1;j&lt;=s;j++){
		if(a[i]==a[j]) // AB_B
		{
		a[j]='-';
		//remove a[j] and slide other element there
		}
	}
}
j=s;

for(i=0 ;i&lt;s;i++)
{
	if(a[i]=='-')
	{
		while(a[j]=='-'){
				a[j]=' ';
				j--; size--;
		}
		if(i&lt;j){
		a[i]=a[j];
		a[j]='-';
		}
	}
	
}
printf(&quot;\nA is :&quot;);
puts(a);
permute(a, 0, size);
// getchar();
return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-volodk even thread-odd thread-alt depth-1" id="dsq-comment-15736">
        <div id="dsq-comment-header-15736" class="dsq-comment-header">
            <cite id="dsq-cite-15736">
                <span id="dsq-author-user-15736">volodk</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15736" class="dsq-comment-body">
            <div id="dsq-comment-message-15736" class="dsq-comment-message"><p>Piece of code that collects all permutations into collection. Beware of long strings. It goes out of memory.</p>
<pre> <code language="Java">
void permutate(String st, Queue&lt;String&gt; q) {
    if (st.length() &gt; 1) {
      char el = st.charAt(0);
      st = st.substring(1);

      permutate(st, q);

      while (!q.isEmpty() &amp;&amp; q.peek().length() == st.length()) {
        String _st = q.poll();
        for (int i = 0; i &lt;= _st.length(); i++) {
          StringBuilder sb = new StringBuilder(_st);
          sb.insert(i, el);
          q.offer(sb.toString());
        }
      }
    } else {
      q.add(st);
    }
  }
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15448">
        <div id="dsq-comment-header-15448" class="dsq-comment-header">
            <cite id="dsq-cite-15448">
http://www.groupme.in                <span id="dsq-author-user-15448">Nikin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15448" class="dsq-comment-body">
            <div id="dsq-comment-message-15448" class="dsq-comment-message"><pre> <code language="C">
// printChars.cpp : Defines the entry point for the console application.
//

#include &quot;stdafx.h&quot;
#include &lt;iostream&gt;
using namespace std;

void printChars(char *str, int len, int i, char *data, bool zeroFlag)
{

	if(*(str+i) == '*' &amp;&amp; zeroFlag)
	{
		*(data+i) = '0';
		i++;
	}

	if(*(str+i) == '*' &amp;&amp; !zeroFlag)
	{
		*(data+i) = '1';
		i++;
	}

	
	while(*(str+i) != '*' &amp;&amp; *(str+i) != '&#092;&#048;')
	{
		*(data+i) = *(str+i);
		i++;
	}

	if(*(str+i) == '*' &amp;&amp; *(str+i) != '&#092;&#048;')
	{
		for(int j = i; j&lt;len; j++)
		{
			printChars(str, len, j, data, zeroFlag);
			printChars(str, len, j, data, !zeroFlag);
			break;
		}
	}

	if(i &gt;= len)
	{
		*(data+i) = '&#092;&#048;';
		cout&lt;&lt;data&lt;&lt;endl;
		return;
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	char *str = &quot;a*b*c*d*&quot;;
	char *data  = (char*)malloc(sizeof(char) * strlen(str));
	printChars(str, strlen(str), 0, data, true);
	getchar();
	return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15371">
        <div id="dsq-comment-header-15371" class="dsq-comment-header">
            <cite id="dsq-cite-15371">
                <span id="dsq-author-user-15371">Hammond</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15371" class="dsq-comment-body">
            <div id="dsq-comment-message-15371" class="dsq-comment-message"><p>#include<br />
#include<br />
#include</p>
<p>void permute(int);<br />
int count(char[], char);</p>
<p>char s[50], temp[50];<br />
int perms = 0;</p>
<p>int main()<br />
{<br />
    cout&lt;&gt;s;<br />
    cout&lt;&lt;&quot;\n==========PERMUTATIONS==========\n&quot;;<br />
    permute(0);<br />
    cout&lt;&lt;&quot;\nFREQUENCY = &quot;&lt;&lt;perms;<br />
    getch();<br />
    return(0);<br />
} </p>
<p>void permute(int n)<br />
{<br />
    for(int i=0; i count(temp, s[i])))<br />
        {<br />
            temp[n] = s[i];<br />
            if(n == strlen(s) &#8211; 1)<br />
            {<br />
                cout&lt;&lt;temp&lt;&lt;&quot;\n&quot;;<br />
                perms++;<br />
            }<br />
            else<br />
                permute(n+1);<br />
        }<br />
    }<br />
    temp[n] = NULL;<br />
}        </p>
<p>int count(char x[], char c)<br />
{<br />
    int cnt = 0;<br />
    char *ptr = strchr(x, c);<br />
    while(ptr != NULL)<br />
    {<br />
        cnt++;<br />
        ptr = strchr(ptr+1, c);<br />
    }<br />
    return(cnt);<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-15372">
        <div id="dsq-comment-header-15372" class="dsq-comment-header">
            <cite id="dsq-cite-15372">
                <span id="dsq-author-user-15372">Hammond</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15372" class="dsq-comment-body">
            <div id="dsq-comment-message-15372" class="dsq-comment-message"><p>permute(0);<br />
    cout&lt;&lt;&quot;\nFREQUENCY = &quot;&lt;&lt;perms;</p>
<p>void permute(int n)<br />
{<br />
    for(int i=0; i count(temp, s[i])))<br />
        {<br />
            temp[n] = s[i];<br />
            if(n == strlen(s) &#8211; 1)<br />
            {<br />
                cout&lt;&lt;temp&lt;&lt;&quot;\n&quot;;<br />
                perms++;<br />
            }<br />
            else<br />
                permute(n+1);<br />
        }<br />
    }<br />
    temp[n] = NULL;<br />
}        </p>
<p>int count(char x[], char c)<br />
{<br />
    int cnt = 0;<br />
    char *ptr = strchr(x, c);<br />
    while(ptr != NULL)<br />
    {<br />
        cnt++;<br />
        ptr = strchr(ptr+1, c);<br />
    }<br />
    return(cnt);<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-15405">
        <div id="dsq-comment-header-15405" class="dsq-comment-header">
            <cite id="dsq-cite-15405">
                <span id="dsq-author-user-15405">Hammond</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15405" class="dsq-comment-body">
            <div id="dsq-comment-message-15405" class="dsq-comment-message"><p>/* Following is the for loop that didn&#8217;t get printed */</p>
<p>for(int i=0; i count(temp, s[i])))<br />
    {</p>
<p>/* works for all strings */</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-15406">
        <div id="dsq-comment-header-15406" class="dsq-comment-header">
            <cite id="dsq-cite-15406">
                <span id="dsq-author-user-15406">Hammond</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15406" class="dsq-comment-body">
            <div id="dsq-comment-message-15406" class="dsq-comment-message"><pre> <code language="C">
#include&lt;iostream.h&gt;
#include&lt;conio.h&gt;
#include&lt;string.h&gt;

void permute(int);
int count(char[], char);
    
char s[50], temp[50];
int perms = 0;

int main()
{
    cout&lt;&lt;&quot;\nEnter String: &quot;;
    cin&gt;&gt;s;
    cout&lt;&lt;&quot;\n==========PERMUTATIONS==========\n&quot;;
    permute(0);
    cout&lt;&lt;&quot;\nFREQUENCY = &quot;&lt;&lt;perms;
    getch();
    return(0);
} 

void permute(int n)
{
    for(int i=0; i&lt;strlen(s); i++)
    {
        if(strchr(temp, s[i]) == NULL || (i == strchr(s, s[i]) - s &amp;&amp; count(s, s[i]) &gt; count(temp, s[i])))
        {
            temp[n] = s[i];
            if(n == strlen(s) - 1)
            {
                cout&lt;&lt;temp&lt;&lt;&quot;\n&quot;;
                perms++;
            }
            else
                permute(n+1);
        }
    }
    temp[n] = NULL;    
}        

int count(char x[], char c)
{
    int cnt = 0;
    char *ptr = strchr(x, c);
    while(ptr != NULL)
    {
        cnt++;
        ptr = strchr(ptr+1, c);
    }    
    return(cnt);   
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-5" id="dsq-comment-15859">
        <div id="dsq-comment-header-15859" class="dsq-comment-header">
            <cite id="dsq-cite-15859">
                <span id="dsq-author-user-15859">Hammond</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15859" class="dsq-comment-body">
            <div id="dsq-comment-message-15859" class="dsq-comment-message"><pre> <code language="C">
/* Hey fellas, please try my code. It works for all strings. Let me know if otherwise. */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15370">
        <div id="dsq-comment-header-15370" class="dsq-comment-header">
            <cite id="dsq-cite-15370">
                <span id="dsq-author-user-15370">googlybhai</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15370" class="dsq-comment-body">
            <div id="dsq-comment-message-15370" class="dsq-comment-message"><p>optimized code given by Venki</p>
<pre> <code language="C">
# include &lt;stdio.h&gt;
 
/* Function to swap values at two pointers */
void swap (char *x, char *y)
{
    char temp;
    temp = *x;
    *x = *y;
    *y = temp;
}
  
/* Function to print permutations of string
   This function takes three parameters:
   1. String
   2. Starting index of the string
   3. Ending index of the string. */
void permute(char *a, int i, int n) 
{
   int j; 
   if (i == n)
     printf(&quot;%s\n&quot;, a);
   else
   {
        for (j = i; j &lt;= n; j++)
       {
          if (i != j)    
             swap((a+i), (a+j));
          permute(a, i+1, n);
          if (i != j)    
             swap((a+i), (a+j)); //backtrack
       }
   }
} 
 
/* Driver program to test above functions */
int main()
{
   char a[] = &quot;ABC&quot;;  
   permute(a, 0, 2);
   getchar();
   return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15030">
        <div id="dsq-comment-header-15030" class="dsq-comment-header">
            <cite id="dsq-cite-15030">
                <span id="dsq-author-user-15030">bharatJ</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15030" class="dsq-comment-body">
            <div id="dsq-comment-message-15030" class="dsq-comment-message"><p>You can use Lexicographic ordering to find all permutations :</p>
<p>import java.util.ArrayList;<br />
import java.util.Iterator;</p>
<p>public class LexicographicPermutations {</p>
<p>	private static String token = &#8220;abc&#8221;;<br />
	private static int indexI = 0;<br />
	private static int indexJ = 0;<br />
	public static String Reverse(String substring,int lowIndex,int highIndex){<br />
		String subs = &#8220;&#8221;;<br />
		for(int i = highIndex -1 ;i&gt;lowIndex;i&#8211;){<br />
			subs = subs + substring.charAt(i);<br />
		}<br />
		return subs;<br />
	}</p>
<p>	public static String swap(int L, int H, String subs){<br />
		char var = subs.charAt(L);<br />
		subs = subs.substring(0, L) + subs.charAt(H) + subs.substring(L+1);<br />
		subs = subs.substring(0, H) + var + subs.substring(H+1);<br />
		return subs;<br />
	}</p>
<p>	public static void main(String args[]){<br />
		String perms = &#8220;&#8221;;<br />
		String swapString = &#8220;&#8221;;<br />
		String revString = &#8220;&#8221;;<br />
		ArrayList permsArray = new ArrayList();<br />
		permsArray.add(token);<br />
		while(true){<br />
			for(int i=0;i&lt;token.length()-1;i++){<br />
				if(token.charAt(i) &lt; token.charAt(i+1)){<br />
					indexI = i;<br />
				}<br />
			}<br />
			for(int i=0;i&lt;token.length();i++){<br />
				if(token.charAt(indexI) &lt; token.charAt(i)){<br />
					indexJ = i;<br />
				}<br />
			}<br />
			if(indexI == indexJ){<br />
				break;<br />
			}<br />
			swapString = swap(indexI,indexJ,token);<br />
			revString = Reverse(swapString,indexI,token.length());<br />
			perms = swapString.substring(0,indexI + 1) + revString;<br />
			permsArray.add(perms);<br />
			indexI = 0;<br />
			indexJ = 0;<br />
			token = perms;<br />
		}<br />
		Iterator itr = permsArray.iterator();<br />
		while(itr.hasNext()){<br />
			System.out.print(itr.next() + &quot; , &quot;);<br />
		}<br />
	}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14834">
        <div id="dsq-comment-header-14834" class="dsq-comment-header">
            <cite id="dsq-cite-14834">
                <span id="dsq-author-user-14834">Dharmendra Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14834" class="dsq-comment-body">
            <div id="dsq-comment-message-14834" class="dsq-comment-message"><p>/**<br />
 *<br />
 * @author Dharmendra Singh<br />
 */<br />
public class PermutationOfStringCharsPassed {</p>
<p>    private void getPermutationOfStringCharsPassed(char[] keys){<br />
        int size = (int) Math.pow(2, keys.length);</p>
<p>        for(int i = 0 ; i &lt; size ; i++){<br />
            for(int k = 0; k &gt; k) &amp; 1) == 1){<br />
                    System.out.print(keys[k]);<br />
                }<br />
            }<br />
            System.out.println();<br />
        }<br />
    }</p>
<p>    public static void main(String[] args) {<br />
        char[] keys = {&#8216;a&#8217;,&#8217;b&#8217;,&#8217;c&#8217;,&#8217;d&#8217;};<br />
        PermutationOfStringCharsPassed p = new PermutationOfStringCharsPassed();<br />
        p.getPermutationOfStringCharsPassed(keys);<br />
    }<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-14835">
        <div id="dsq-comment-header-14835" class="dsq-comment-header">
            <cite id="dsq-cite-14835">
                <span id="dsq-author-user-14835">Dharmendra Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14835" class="dsq-comment-body">
            <div id="dsq-comment-message-14835" class="dsq-comment-message"><p>//Dont know how my program got changed after posting<br />
for(int i = 0 ; i &lt; size ; i++){<br />
            for(int k = 0; k &gt; k) &amp; 1) == 1){<br />
                    System.out.print(keys[k]);<br />
                }<br />
            }<br />
            System.out.println();<br />
        }</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-14833">
        <div id="dsq-comment-header-14833" class="dsq-comment-header">
            <cite id="dsq-cite-14833">
                <span id="dsq-author-user-14833">Dharmendra Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14833" class="dsq-comment-body">
            <div id="dsq-comment-message-14833" class="dsq-comment-message"><p>
/* Paste your code here (You may delete these lines if not writing code) */<br />
/**<br />
 *<br />
 * @author Dharmendra Singh<br />
 */<br />
public class PermutationOfStringCharsPassed {</p>
<p>    private void getPermutationOfStringCharsPassed(char[] keys){<br />
        int size = (int) Math.pow(2, keys.length);</p>
<p>        for(int i = 0 ; i &lt; size ; i++){<br />
            for(int k = 0; k &gt; k) &amp; 1) == 1){<br />
                    System.out.print(keys[k]);<br />
                }<br />
            }<br />
            System.out.println();<br />
        }<br />
    }</p>
<p>    public static void main(String[] args) {<br />
        char[] keys = {&#8216;a&#8217;,&#8217;b&#8217;,&#8217;c&#8217;,&#8217;d&#8217;};<br />
        PermutationOfStringCharsPassed p = new PermutationOfStringCharsPassed();<br />
        p.getPermutationOfStringCharsPassed(keys);<br />
    }<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-13947">
        <div id="dsq-comment-header-13947" class="dsq-comment-header">
            <cite id="dsq-cite-13947">
                <span id="dsq-author-user-13947">rahul732</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13947" class="dsq-comment-body">
            <div id="dsq-comment-message-13947" class="dsq-comment-message"><p>A program will such a bad complexity is never useful to learn. Just see the complexity. n*n! .</p>
<p>Isn&#8217;it ? There should be better thing available or if not then its not useful to use such an algorithm.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-14368">
        <div id="dsq-comment-header-14368" class="dsq-comment-header">
            <cite id="dsq-cite-14368">
                <span id="dsq-author-user-14368">geek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14368" class="dsq-comment-body">
            <div id="dsq-comment-message-14368" class="dsq-comment-message"><p>jab permutations hi n! hain to, think before you comment.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-14916">
        <div id="dsq-comment-header-14916" class="dsq-comment-header">
            <cite id="dsq-cite-14916">
                <span id="dsq-author-user-14916">Vikash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14916" class="dsq-comment-body">
            <div id="dsq-comment-message-14916" class="dsq-comment-message"><p>exactly&#8230;..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-14917">
        <div id="dsq-comment-header-14917" class="dsq-comment-header">
            <cite id="dsq-cite-14917">
                <span id="dsq-author-user-14917">Vikash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14917" class="dsq-comment-body">
            <div id="dsq-comment-message-14917" class="dsq-comment-message"><p>tell me one thing&#8230;.<br />
will your code work for input &#8216;AABBCC&#8217;??</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-11910">
        <div id="dsq-comment-header-11910" class="dsq-comment-header">
            <cite id="dsq-cite-11910">
                <span id="dsq-author-user-11910">Chirag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11910" class="dsq-comment-body">
            <div id="dsq-comment-message-11910" class="dsq-comment-message"><p>#include<br />
#include<br />
#include<br />
#include<br />
main()<br />
{<br />
char ch[10],temp;<br />
int i,k=1,b,f;<br />
clrscr();<br />
printf(&#8220;enter the string&#8221;);<br />
gets(ch);<br />
for(i=1;i&lt;=strlen(ch);i++)<br />
{<br />
k=k*i;<br />
}<br />
 for(i=0;i&lt;k;i++)<br />
 {<br />
 b=((i%(strlen(ch))-1));<br />
 printf(&quot;%d&quot;,b);<br />
 temp = ch[b+1];<br />
 ch[b+1]=ch[b];<br />
 ch[b]=temp;<br />
 printf(&quot;%s\n&quot;,ch);<br />
 }<br />
 getch();<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-11911">
        <div id="dsq-comment-header-11911" class="dsq-comment-header">
            <cite id="dsq-cite-11911">
                <span id="dsq-author-user-11911">Chirag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11911" class="dsq-comment-body">
            <div id="dsq-comment-message-11911" class="dsq-comment-message"><p>without any function calling&#8230;very simple..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-11913">
        <div id="dsq-comment-header-11913" class="dsq-comment-header">
            <cite id="dsq-cite-11913">
                <span id="dsq-author-user-11913">Chirag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11913" class="dsq-comment-body">
            <div id="dsq-comment-message-11913" class="dsq-comment-message"><p>little bit changes<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
#include<br />
#include<br />
#include<br />
#include<br />
main()<br />
{<br />
char ch[10],temp;<br />
int i,k=1,b,f;<br />
clrscr();<br />
printf(&#8220;enter the string&#8221;);<br />
gets(ch);<br />
for(i=1;i&lt;=strlen(ch);i++)<br />
{<br />
k=k*i;<br />
}<br />
f=strlen(ch);<br />
for(i=0;i&lt;k;i++)<br />
{<br />
b=i%(f-1);<br />
temp = ch[b+1];<br />
ch[b+1]=ch[b];<br />
ch[b]=temp;<br />
printf(&quot;%s\n&quot;,ch);<br />
}<br />
getch();<br />
}</p>
<p>now it will work</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-11909">
        <div id="dsq-comment-header-11909" class="dsq-comment-header">
            <cite id="dsq-cite-11909">
                <span id="dsq-author-user-11909">Chirag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11909" class="dsq-comment-body">
            <div id="dsq-comment-message-11909" class="dsq-comment-message"><p>it will work<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
#include<br />
#include<br />
#include<br />
#include<br />
main()<br />
{<br />
char ch[10],temp;<br />
int i,k=1,b,f;<br />
clrscr();<br />
printf(&#8220;enter the string&#8221;);<br />
gets(ch);<br />
for(i=1;i&lt;=strlen(ch);i++)<br />
{<br />
k=k*i;<br />
}<br />
 for(i=0;i&lt;k;i++)<br />
 {<br />
 b=((i%(strlen(ch))-1));<br />
 printf(&quot;%d&quot;,b);<br />
 temp = ch[b+1];<br />
 ch[b+1]=ch[b];<br />
 ch[b]=temp;<br />
 printf(&quot;%s\n&quot;,ch);<br />
 }<br />
 getch();<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-11521">
        <div id="dsq-comment-header-11521" class="dsq-comment-header">
            <cite id="dsq-cite-11521">
                <span id="dsq-author-user-11521">sreeram</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11521" class="dsq-comment-body">
            <div id="dsq-comment-message-11521" class="dsq-comment-message"><p>simple check to avoid duplicates </p>
<pre> <code language="C"></code> </pre>
<p>/* Paste your code here (You may delete these lines if not writing code) */<br />
[# include </p>
<p>/* Function to swap values at two pointers */<br />
void swap (char *x, char *y)<br />
{<br />
    char temp;<br />
    temp = *x;<br />
    *x = *y;<br />
    *y = temp;<br />
}<br />
int check(char *arr,int i,int j)<br />
{<br />
if(i==j)<br />
return 1;<br />
for(;i&lt; j;i++)<br />
if(arr[i]==arr[j])<br />
return 0;<br />
return 1;<br />
}<br />
/* Function to print permutations of string<br />
   This function takes three parameters:<br />
   1. String<br />
   2. Starting index of the string<br />
   3. Ending index of the string. */<br />
void permute(char *a, int i, int n)<br />
{<br />
   int j;<br />
   if (i == n)<br />
     printf(&quot;%s\n&quot;, a);<br />
   else<br />
   {<br />
        for (j = i; j &lt;= n; j++)<br />
       {<br />
          if(check(a,i,j)){<br />
          swap((a+i), (a+j));<br />
          permute(a, i+1, n);<br />
          swap((a+i), (a+j));<br />
          } //backtrack}<br />
       }<br />
   }<br />
} </p>
<p>/* Driver program to test above functions */<br />
int main()<br />
{<br />
   char a[] = &quot;APPLE&quot;;<br />
   permute(a, 0, 4);<br />
   getchar();<br />
   return 0;<br />
}]</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-11885">
        <div id="dsq-comment-header-11885" class="dsq-comment-header">
            <cite id="dsq-cite-11885">
                <span id="dsq-author-user-11885">ChangingNameEveryTime</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11885" class="dsq-comment-body">
            <div id="dsq-comment-message-11885" class="dsq-comment-message"><p>The code is working awesome.</p>
<p>Very good!</p>
<p>Keep it up!</p>
<pre> <code language="C">

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-11912">
        <div id="dsq-comment-header-11912" class="dsq-comment-header">
            <cite id="dsq-cite-11912">
                <span id="dsq-author-user-11912">Chirag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11912" class="dsq-comment-body">
            <div id="dsq-comment-message-11912" class="dsq-comment-message"><p>little bit changes<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
#include<br />
#include<br />
#include<br />
#include<br />
main()<br />
{<br />
char ch[10],temp;<br />
int i,k=1,b,f;<br />
clrscr();<br />
printf(&#8220;enter the string&#8221;);<br />
gets(ch);<br />
for(i=1;i&lt;=strlen(ch);i++)<br />
{<br />
k=k*i;<br />
}<br />
f=strlen(ch);<br />
 for(i=0;i&lt;k;i++)<br />
 {<br />
 b=i%(f-1);<br />
 temp = ch[b+1];<br />
 ch[b+1]=ch[b];<br />
 ch[b]=temp;<br />
 printf(&quot;%s\n&quot;,ch);<br />
 }<br />
 getch();<br />
}</p>
<p>now it will work</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-11029">
        <div id="dsq-comment-header-11029" class="dsq-comment-header">
            <cite id="dsq-cite-11029">
                <span id="dsq-author-user-11029">aaryan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11029" class="dsq-comment-body">
            <div id="dsq-comment-message-11029" class="dsq-comment-message"><pre> <code language="C">

A better code.....generate all permutation of given string ...takes care of duplicacy....nd presents permutations in lexicographic order...

 
#include &lt;stdio.h&gt;
#include&lt;time.h&gt;
#include &lt;string.h&gt;
#include&lt;conio.h&gt;
void swap (char* pArray, int i, int j)
{
	char temp = pArray[i];
	pArray[i] = pArray[j];
	pArray[j] = temp;
}
void perm (char* pArray, int size, int index)
{
	int i,j,k;
	if(index==size)
	{
	      printf(&quot;%s\n&quot;, pArray);
	}
	else
	{
		for(i = index; i &lt; size; i++)
		{                                         // for duplicacy
			if(pArray[i] == pArray[i+1])
					{
				continue;
			}

			swap(pArray,i,index);
		       for(j=index+1;j&lt;=i;j++)
			{
				if(pArray[j]&gt;pArray[i])             // for lexicographic
				{
					swap(pArray,j,i);
				}
			}
			perm(pArray,size,index+1);
		   for(j=i;j&gt;=index+1;j--)
			{
				if(pArray[j]&lt;pArray[i])
				{
					swap(pArray,j,i);
				}
			}
			swap(pArray,i,index);
		}
	}
}
void main ()
{
	char array[100];
	clock_t start,end;
	clrscr();
	gets(array);
	printf(&quot;Permutations:\n&quot;);
	start=clock();
	perm(array,strlen(array),0);
	end=clock();
	printf(&quot;%f&quot;,(end-start)/CLK_TCK);
	getch();
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-13193">
        <div id="dsq-comment-header-13193" class="dsq-comment-header">
            <cite id="dsq-cite-13193">
                <span id="dsq-author-user-13193">Satyarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13193" class="dsq-comment-body">
            <div id="dsq-comment-message-13193" class="dsq-comment-message"><p>U r assuming that char array is alphabetically sorted. BTW Nice Code!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10403">
        <div id="dsq-comment-header-10403" class="dsq-comment-header">
            <cite id="dsq-cite-10403">
                <span id="dsq-author-user-10403">sumit saha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10403" class="dsq-comment-body">
            <div id="dsq-comment-message-10403" class="dsq-comment-message"><p>this code can permutate strings of any length and is written only for strings without any repeatation.</p>
<p>how do i improve so as to incorporate the strings with repeatation&#8230;&#8230;</p>
<p>/* Paste your code here (You may delete these lines if not writing code) */</p>
<p>//***************anagrams**************//</p>
<p>//************************************** this code works only when there are no repeatations in the original string*************//<br />
#include&lt;iostream&gt;<br />
using namespace std;</p>
<p>int counter=0;</p>
<p>void print(char empty[],int size)<br />
{</p>
<p>    for(int i=0;i&lt;size;i++)<br />
    {<br />
        cout&lt;&lt;empty[i];<br />
    }<br />
    cout&lt;&lt;endl;<br />
}</p>
<p>void makecombination(char original[],char empty[],char comb[],int k,int&amp; nc,int size)<br />
{<br />
    nc=0;</p>
<p>    int flag=0;<br />
    for(int i=0;i&lt;size;i++)<br />
    {<br />
        flag=0;                                                                   // {<br />
        for(int j=0;j&lt;k;j++)<br />
        {<br />
            if(empty[j]==original[i])                                                                // remove this code fragment<br />
            {                                                                                        // to print permutations with repeatation<br />
                flag=1;<br />
                break;<br />
            }<br />
        }<br />
        if(flag==0)                                                                // }<br />
        {<br />
            comb[nc++]=original[i];<br />
        }<br />
    }<br />
   // cout&lt;&lt;&quot;checks  &quot;;<br />
    //    print(comb,nc);<br />
}</p>
<p>void recurse(char original[],char empty[],int k,int size)<br />
{<br />
    char *comb=new char[size];</p>
<p>    int nc;</p>
<p>    if(k==size)<br />
    {<br />
        counter++;<br />
        print(empty,size);</p>
<p>    }<br />
    else<br />
    {<br />
        makecombination(original,empty,comb,k,nc,size);<br />
        k=k+1;<br />
        for(int i=0;i&lt;nc;i++)<br />
        {<br />
            empty[k-1]=comb[i];<br />
            //cout&lt;&lt;&quot;checks  &quot;;<br />
            //print(empty,size);<br />
            recurse(original,empty,k,size);<br />
        }<br />
    }</p>
<p>}</p>
<p>int main()<br />
{<br />
    const int size=4;<br />
    int k=0;<br />
    char original[]=&quot;ABCD&quot;;</p>
<p>   char empty[size];<br />
    for(int f=0;f&lt;size;f++)<br />
    empty[f]=&#8217;*';</p>
<p>    recurse(original,empty,k,size);</p>
<p>    cout&lt;&lt;endl&lt;&lt;counter&lt;&lt;endl;<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-9647">
        <div id="dsq-comment-header-9647" class="dsq-comment-header">
            <cite id="dsq-cite-9647">
                <span id="dsq-author-user-9647">gaya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9647" class="dsq-comment-body">
            <div id="dsq-comment-message-9647" class="dsq-comment-message"><p>code doesn&#8217;t work</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9425">
        <div id="dsq-comment-header-9425" class="dsq-comment-header">
            <cite id="dsq-cite-9425">
                <span id="dsq-author-user-9425">andrew</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9425" class="dsq-comment-body">
            <div id="dsq-comment-message-9425" class="dsq-comment-message"><p>missing case: string with repeat characters.<br />
such as: abcdmabc </p>
<pre> <code language="C">
void swap(char str[], int i, int j){
 char c;
 c = str[i];
 str[i] = str[j];
 str[j] = c;
}

void printStr(char str[], int k, int m){
 if(k == m){
  cout&lt;&lt;str&lt;&lt;endl;
 }else{
  for(int i=k; i&lt;=m; i++){
   for(int j=k;j&lt;i;j++) // remove the repeat characters
	   if(str[j]==str[i]) goto nextloop;
   swap(str, i, k);
   printStr(str, k+1, m);
   swap(str, k, i);
   nextloop:;
  }
 }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-9218">
        <div id="dsq-comment-header-9218" class="dsq-comment-header">
            <cite id="dsq-cite-9218">
                <span id="dsq-author-user-9218">arya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9218" class="dsq-comment-body">
            <div id="dsq-comment-message-9218" class="dsq-comment-message"><pre> <code language="C"></code> </pre>
<p>/* Paste your code here (You may delete these lines if not writing code) */<br />
[/code to print all puarmutation of integer array?]</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9197">
        <div id="dsq-comment-header-9197" class="dsq-comment-header">
            <cite id="dsq-cite-9197">
                <span id="dsq-author-user-9197">user123</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9197" class="dsq-comment-body">
            <div id="dsq-comment-message-9197" class="dsq-comment-message"><p>how is this O(n*n!)?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8604">
        <div id="dsq-comment-header-8604" class="dsq-comment-header">
            <cite id="dsq-cite-8604">
                <span id="dsq-author-user-8604">Guddu sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8604" class="dsq-comment-body">
            <div id="dsq-comment-message-8604" class="dsq-comment-message"><p>Please help me in finding the time complexity of this approach.</p>
<pre> <code language="C">
void Anagram(int depth,char *Orig,int *track,char *Permut)
{
	int i,j;
	if(depth==SIZE)
	{
		for(j=0;j&lt;SIZE;j++)
			printf(&quot;%c&quot;,Permut[j]);
		printf(&quot;\n&quot;);
	}
	else
	{
		for(i=0;i&lt;SIZE;i++)
		{
			count++;
			if(!track[i])
			{
				track[i]=1;		//to indicate that ith character has been taken
				Permut[depth]=Orig[i];
				Anagram(depth+1,Orig,track,Permut);
				track[i]=0;
			}
		}
	}
}

Please let me know if this is a better approach.
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8316">
        <div id="dsq-comment-header-8316" class="dsq-comment-header">
            <cite id="dsq-cite-8316">
                <span id="dsq-author-user-8316">charanjeet</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8316" class="dsq-comment-body">
            <div id="dsq-comment-message-8316" class="dsq-comment-message"><p>What is the need to call swap once again after the permute function. I tried removing it and it still generates all the permutations except that order differs!<br />
With 2nd Swap -&gt;<br />
ABC<br />
ACB<br />
BAC<br />
BCA<br />
CBA<br />
CAB<br />
Without 2nd Swap -&gt;<br />
ABC<br />
ACB<br />
CAB<br />
CBA<br />
ABC<br />
ACB</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-8319">
        <div id="dsq-comment-header-8319" class="dsq-comment-header">
            <cite id="dsq-cite-8319">
                <span id="dsq-author-user-8319">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8319" class="dsq-comment-body">
            <div id="dsq-comment-message-8319" class="dsq-comment-message"><p>@charanjeet, check your output (ABC repeated twice). It is backtracking step which restores the state once returned from previous explored node.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-9619">
        <div id="dsq-comment-header-9619" class="dsq-comment-header">
            <cite id="dsq-cite-9619">
                <span id="dsq-author-user-9619">Vinayaka Bhat</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9619" class="dsq-comment-body">
            <div id="dsq-comment-message-9619" class="dsq-comment-message"><p>Without the second swap, there are no strings that are generated with B</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8315">
        <div id="dsq-comment-header-8315" class="dsq-comment-header">
            <cite id="dsq-cite-8315">
                <span id="dsq-author-user-8315">charanjeet</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8315" class="dsq-comment-body">
            <div id="dsq-comment-message-8315" class="dsq-comment-message"><p>Whats the need for calling swap after calling permute function?<br />
I tried removing that, and its still generating all the permutations, only the order differs!</p>
<p>Please explain.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-13685">
        <div id="dsq-comment-header-13685" class="dsq-comment-header">
            <cite id="dsq-cite-13685">
                <span id="dsq-author-user-13685">hARRY</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13685" class="dsq-comment-body">
            <div id="dsq-comment-message-13685" class="dsq-comment-message"><p>Not only order differs check carefully for input:abcd or inputs whose length greater than 3 there will be duplicates!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7767">
        <div id="dsq-comment-header-7767" class="dsq-comment-header">
            <cite id="dsq-cite-7767">
                <span id="dsq-author-user-7767">kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7767" class="dsq-comment-body">
            <div id="dsq-comment-message-7767" class="dsq-comment-message"><p>plz give the program using loop in c and without any pointers or dynamic allocations&#8230; plz help</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-xushi odd alt thread-even depth-1" id="dsq-comment-7766">
        <div id="dsq-comment-header-7766" class="dsq-comment-header">
            <cite id="dsq-cite-7766">
                <span id="dsq-author-user-7766">xushi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7766" class="dsq-comment-body">
            <div id="dsq-comment-message-7766" class="dsq-comment-message"><pre> <code language="C">
Let's say given 9 cities. How should I permute them and split it into 3 vehicles, so that each vehicles take 3 cities?

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-xushi even thread-odd thread-alt depth-1" id="dsq-comment-7765">
        <div id="dsq-comment-header-7765" class="dsq-comment-header">
            <cite id="dsq-cite-7765">
                <span id="dsq-author-user-7765">xushi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7765" class="dsq-comment-body">
            <div id="dsq-comment-message-7765" class="dsq-comment-message"><p>Let&#8217;s say given 9 cities. How should I permute them and split it into 3 vehicles, so that each vehicles take 3 cities?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7683">
        <div id="dsq-comment-header-7683" class="dsq-comment-header">
            <cite id="dsq-cite-7683">
                <span id="dsq-author-user-7683">Sourodeep Roy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7683" class="dsq-comment-body">
            <div id="dsq-comment-message-7683" class="dsq-comment-message"><p>This programme works only for three letters, if I am using more than 3 then whats the option???</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-jalajb2k7 even depth-2" id="dsq-comment-7692">
        <div id="dsq-comment-header-7692" class="dsq-comment-header">
            <cite id="dsq-cite-7692">
                <span id="dsq-author-user-7692">jalajb2k7</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7692" class="dsq-comment-body">
            <div id="dsq-comment-message-7692" class="dsq-comment-message"><p>then just pass the length-1 instead of 2 in permute</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7496">
        <div id="dsq-comment-header-7496" class="dsq-comment-header">
            <cite id="dsq-cite-7496">
                <span id="dsq-author-user-7496">Avinash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7496" class="dsq-comment-body">
            <div id="dsq-comment-message-7496" class="dsq-comment-message"><pre> <code language="C">
permute(int input[])
{
	int n=size(input[]);
	int out[]=malloc(sizeof(input[]));
	int used[]=malloc(sizeof(input[]));
	for(int i=0;i&lt;size(used[]);i++)
	{
		used[i]=0;
	}	
	dopermute(input,0,n,out,used);
} 

void dopermute(int input[],int level, int size, int out[],int used[])
{
	If(level&gt;=size)
	{
		for(int i=0;i&lt;size(out);i++)
		{
			printf(&quot;%c&quot;,out[i]);
		}
		return;
	}
	
	for(j=0;j&lt;size;j++)
	{
		If used[i] continue;
		used[j]=1
		out[level]=arr[j];
		dopermute(input,level+1,size,out,used);
		used[j]=0;
	}
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-7453">
        <div id="dsq-comment-header-7453" class="dsq-comment-header">
            <cite id="dsq-cite-7453">
                <span id="dsq-author-user-7453">niak</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7453" class="dsq-comment-body">
            <div id="dsq-comment-message-7453" class="dsq-comment-message"><p>number is {1,2,3,4,5,6}it will print as by rotating 1 place it will look likjs 6,1,2,3,4,5</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7400">
        <div id="dsq-comment-header-7400" class="dsq-comment-header">
            <cite id="dsq-cite-7400">
                <span id="dsq-author-user-7400">guru</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7400" class="dsq-comment-body">
            <div id="dsq-comment-message-7400" class="dsq-comment-message"><pre> <code language="Java">
ArrayList&lt;String&gt; permutationsOf(String s) {
    ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();

    if (s.length() == 1) { 
       
        result.add(s);
        return result;
     }
else {
       
        char first = s.charAt(0);
        String rest = s.substring(1);

              ArrayList&lt;String&gt; simpler = permutationsOf(rest);  
       
        for (String permutation : simpler) { 
            
            ArrayList additions = insertAtAllPositions(first, permutation);
            
            result.addAll(additions);
        }
        return result;
    }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-ckernel even thread-even depth-1" id="dsq-comment-7382">
        <div id="dsq-comment-header-7382" class="dsq-comment-header">
            <cite id="dsq-cite-7382">
                <span id="dsq-author-user-7382">ckernel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7382" class="dsq-comment-body">
            <div id="dsq-comment-message-7382" class="dsq-comment-message"><p>Hi Geeksforgeeks,</p>
<p>Neat Code. I just want to learn how you devised the backtracking algorithm for this problem?</p>
<p>//I mean I wanted to know the explanation of the tree given above.</p>
<p>-ckernel</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-omairh odd alt thread-odd thread-alt depth-1" id="dsq-comment-7332">
        <div id="dsq-comment-header-7332" class="dsq-comment-header">
            <cite id="dsq-cite-7332">
                <span id="dsq-author-user-7332">omair hassan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7332" class="dsq-comment-body">
            <div id="dsq-comment-message-7332" class="dsq-comment-message"><p>hi</p>
<p>can any one suggest me good tutorial on c programming, i m new in programming  , these days i m reading oop in c++ by lafore , please suggest me something that really helps me .. from the skretch &#8230;.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-7397">
        <div id="dsq-comment-header-7397" class="dsq-comment-header">
            <cite id="dsq-cite-7397">
                <span id="dsq-author-user-7397">addy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7397" class="dsq-comment-body">
            <div id="dsq-comment-message-7397" class="dsq-comment-message"><p>You can use  use thinking in c++ Vol 1 By Bruce Eckel</p>
<p><a href="http://www.digilife.be/quickreferences/books/thinking%20in%20c++,%20volume%201,%202nd%20edition.pdf" rel="nofollow">http://www.digilife.be/quickreferences/books/thinking%20in%20c++,%20volume%201,%202nd%20edition.pdf</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-omairh odd alt thread-even depth-1" id="dsq-comment-7306">
        <div id="dsq-comment-header-7306" class="dsq-comment-header">
            <cite id="dsq-cite-7306">
                <span id="dsq-author-user-7306">omair hassan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7306" class="dsq-comment-body">
            <div id="dsq-comment-message-7306" class="dsq-comment-message"><p>hi\<br />
i copy the code in my complier but its not working<br />
its prompt the following errors<br />
1.  29 line , canno convert &#8216;char * &#8216;, to &#8216;char&#8217;<br />
2. 29 line. type mismatch in parameter &#8216;a&#8217; in call to &#8216; permute( char, int<br />
3, 32 line , &#8216;a&#8217; is assigned a value that is never used</p>
<p>please help me i m new in programming</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7309">
        <div id="dsq-comment-header-7309" class="dsq-comment-header">
            <cite id="dsq-cite-7309">
                <span id="dsq-author-user-7309">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7309" class="dsq-comment-body">
            <div id="dsq-comment-message-7309" class="dsq-comment-message"><p>@omair hassan:  The program has been tested with more than compilers and it works fine.  See <a href="http://ideone.com/Nl8Ik" rel="nofollow">this</a> for a sample run that works.  Could you let us know the compiler you used and the exact code that you tried?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-7320">
        <div id="dsq-comment-header-7320" class="dsq-comment-header">
            <cite id="dsq-cite-7320">
                <span id="dsq-author-user-7320">omair hassan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7320" class="dsq-comment-body">
            <div id="dsq-comment-message-7320" class="dsq-comment-message"><p>i am using turbo c ++</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-omairh even depth-4" id="dsq-comment-7321">
        <div id="dsq-comment-header-7321" class="dsq-comment-header">
            <cite id="dsq-cite-7321">
                <span id="dsq-author-user-7321">omair hassan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7321" class="dsq-comment-body">
            <div id="dsq-comment-message-7321" class="dsq-comment-message"><p>thank you so much for the reply . the codes runs finally at char swap (*x, *y) i was using char swap (a,b)</p>
<p>can u tell me what was the mistake , although i didn&#8217;t understand the code<br />
please help me &#8230;. <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geek4u odd alt depth-5" id="dsq-comment-7322">
        <div id="dsq-comment-header-7322" class="dsq-comment-header">
            <cite id="dsq-cite-7322">
                <span id="dsq-author-user-7322">geek4u</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7322" class="dsq-comment-body">
            <div id="dsq-comment-message-7322" class="dsq-comment-message"><p>Following tutorial on pointers and function may help.</p>
<p><a href="http://www.cs.cf.ac.uk/Dave/C/node10.html" rel="nofollow">http://www.cs.cf.ac.uk/Dave/C/node10.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-omairh even depth-5" id="dsq-comment-7323">
        <div id="dsq-comment-header-7323" class="dsq-comment-header">
            <cite id="dsq-cite-7323">
                <span id="dsq-author-user-7323">omair hassan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7323" class="dsq-comment-body">
            <div id="dsq-comment-message-7323" class="dsq-comment-message"><p>that&#8217;s so helpful thanks alot dude <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-sandeep odd alt depth-5" id="dsq-comment-7336">
        <div id="dsq-comment-header-7336" class="dsq-comment-header">
            <cite id="dsq-cite-7336">
http://geeksforgeeks.org/forum/profile/sandeep/                <span id="dsq-author-user-7336">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7336" class="dsq-comment-body">
            <div id="dsq-comment-message-7336" class="dsq-comment-message"><p>The C book (<a href="http://publications.gbdirect.co.uk/c_book/" rel="nofollow">http://publications.gbdirect.co.uk/c_book/</a>) seems to be a good resource for C.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-omairh even depth-5" id="dsq-comment-7348">
        <div id="dsq-comment-header-7348" class="dsq-comment-header">
            <cite id="dsq-cite-7348">
                <span id="dsq-author-user-7348">omair hassan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7348" class="dsq-comment-body">
            <div id="dsq-comment-message-7348" class="dsq-comment-message"><p>@sandeep</p>
<p>thank u so much dude <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7098">
        <div id="dsq-comment-header-7098" class="dsq-comment-header">
            <cite id="dsq-cite-7098">
http://blackbox-iphone.com                <span id="dsq-author-user-7098">Jailbreak and unlock your iPhone</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7098" class="dsq-comment-body">
            <div id="dsq-comment-message-7098" class="dsq-comment-message"><p>&lt;?php</p>
<p>function sort_string($str){<br />
    $arr = NULL;<br />
    $len = strlen($str);<br />
    for($i=0; $i&lt;$len; $i++){<br />
        $arr[] = $str[$i];<br />
    }<br />
    sort($arr);<br />
    $str = &quot;&quot;;<br />
    for($i=0; $i&lt;$len; $i++){<br />
        $str = $str . $arr[$i];<br />
    }<br />
    return $str;<br />
}</p>
<p>function permute($str){<br />
    //base cases<br />
    if ($str == NULL){<br />
        return &quot;&quot;;<br />
    }<br />
    $len = strlen($str);<br />
    if ($len == 1){<br />
        return $str;<br />
    }<br />
    else if ($len == 2){<br />
        return $str .&quot;,&quot; . $str[1] . $str[0];<br />
    }<br />
    // the recursion<br />
    else {<br />
        $ans = &quot;&quot;;<br />
        for($i=0; $i&lt;$len; $i++){<br />
            // currenct char<br />
            $char = $str[$i];<br />
            // the string without the selected char<br />
            $str_b = substr($str,0,($i-1 &lt; 0 ? 0 : $i)) . substr($str,$i+1, $len-$i-1);<br />
            //build all the sub-permutations without char<br />
            $sub_perm = permute($str_b);<br />
            //now add char<br />
            $ans = $ans . add_first_char($sub_perm, $char);<br />
        }<br />
        return $ans;<br />
    }<br />
}</p>
<p>function add_first_char($str, $char){<br />
    $ans = &quot;&quot;;<br />
    $items = explode (&#8216;,&#8217;,$str);<br />
    $len = sizeof($items);<br />
    for($i=0; $i&lt;$len; $i++){<br />
        $ans = $ans . &quot;,&quot; .  $char . $items[$i];<br />
    }<br />
    // remove the first &quot;,&quot;<br />
    return $ans;//<br />
}</p>
<p>$filename = $argv[1];<br />
$handle = fopen($filename, &quot;rb&quot;);<br />
$line = &quot;&quot;;<br />
while (!feof($handle)) {<br />
  $line = fgets($handle, 8192);<br />
  $line = trim($line);<br />
  if ($line != NULL) {<br />
      $line = sort_string($line);<br />
      $ans = permute($line);<br />
      //remove first &quot;,&quot; from the final response<br />
      $ans = substr($ans,1,strlen($ans)-1);<br />
      echo trim($ans) . &quot;\n&quot;;<br />
  }<br />
}<br />
fclose($handle);<br />
return 0;</p>
<p>?&gt;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-7063">
        <div id="dsq-comment-header-7063" class="dsq-comment-header">
            <cite id="dsq-cite-7063">
                <span id="dsq-author-user-7063">Venkatesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7063" class="dsq-comment-body">
            <div id="dsq-comment-message-7063" class="dsq-comment-message"><p><a href="http://www.programmerinterview.com/index.php/recursion/permutations-of-a-string/" rel="nofollow">http://www.programmerinterview.com/index.php/recursion/permutations-of-a-string/</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-6759">
        <div id="dsq-comment-header-6759" class="dsq-comment-header">
            <cite id="dsq-cite-6759">
                <span id="dsq-author-user-6759">amit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6759" class="dsq-comment-body">
            <div id="dsq-comment-message-6759" class="dsq-comment-message"><p><a href="http://n1b-algo.blogspot.com/2009/01/string-permutations.html" rel="nofollow">http://n1b-algo.blogspot.com/2009/01/string-permutations.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-6714">
        <div id="dsq-comment-header-6714" class="dsq-comment-header">
            <cite id="dsq-cite-6714">
                <span id="dsq-author-user-6714">pratik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6714" class="dsq-comment-body">
            <div id="dsq-comment-message-6714" class="dsq-comment-message"><p>Please explain how the time complexity is O(n!)??</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-6984">
        <div id="dsq-comment-header-6984" class="dsq-comment-header">
            <cite id="dsq-cite-6984">
                <span id="dsq-author-user-6984">PRATEEK</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6984" class="dsq-comment-body">
            <div id="dsq-comment-message-6984" class="dsq-comment-message"><p>see the for loop inside the func..permute where permute is called again and again 1 less than current n times<br />
ie, n*n-1*n-2*&#8230;&#8230;*1=O(n!)<br />
or basically we could understand like this<br />
eg ankit, we have find all possible permutations of the name ankit<br />
as length of ankit is 5 thereforeforloop is called 5 times and then4 3 2 1 and so on as maximum permutations of agiven word of length n is n! therefore we can simply say the complexity is O(n!)&#8230;&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-21144">
        <div id="dsq-comment-header-21144" class="dsq-comment-header">
            <cite id="dsq-cite-21144">
                <span id="dsq-author-user-21144">faizan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21144" class="dsq-comment-body">
            <div id="dsq-comment-message-21144" class="dsq-comment-message"><p>It is O(n* n!) and not O(n!)<br />
Say the function for generating permutation takes T(n) time.<br />
Next, you call n  T(n-1) sub-functions. you can see for printing whole string at the end we need T(0) time.</p>
<p>Therefore, T(0)= n .<br />
So, we have T(n)=n x T(n-1).<br />
and T(0)= n.<br />
Therefore time complexity= O(n*n!).</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-22774">
        <div id="dsq-comment-header-22774" class="dsq-comment-header">
            <cite id="dsq-cite-22774">
                <span id="dsq-author-user-22774">innosam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22774" class="dsq-comment-body">
            <div id="dsq-comment-message-22774" class="dsq-comment-message"><p>What about swapping? (there are swaps at each level)</p>
<p>T(n) = n x T(n-1) + O(n)<br />
I considered T(0) = 1;</p>
<p>T(n) = O(n! + n! + (n-1)! + &#8230; + n)<br />
T(n) = O(n!)<br />
If we consider printing for each end, then<br />
T(n) = O(n*n!)</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-innosam even depth-3" id="dsq-comment-22775">
        <div id="dsq-comment-header-22775" class="dsq-comment-header">
            <cite id="dsq-cite-22775">
                <span id="dsq-author-user-22775">innosam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22775" class="dsq-comment-body">
            <div id="dsq-comment-message-22775" class="dsq-comment-message"><p>What about swapping? (there are swaps at each level)</p>
<p>T(n) = n x T(n-1) + O(n)<br />
I considered T(0) = 1;</p>
<p>T(n) = O(n! + n! + (n-1)! + &#8230; + n)<br />
T(n) = O(n!)<br />
If we consider printing for each end, then<br />
T(n) = O(n*n!)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-6703">
        <div id="dsq-comment-header-6703" class="dsq-comment-header">
            <cite id="dsq-cite-6703">
                <span id="dsq-author-user-6703">navyasree</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6703" class="dsq-comment-body">
            <div id="dsq-comment-message-6703" class="dsq-comment-message"><p>hii..<br />
i want a program to print the first letter of given sentence of each word and at the end the last word of given sentence also printed..<br />
for ex:<br />
the given string is: hii hello how are you<br />
output:hhhayyou<br />
like this&#8230; pls anybody tel me the code&#8230;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-6716">
        <div id="dsq-comment-header-6716" class="dsq-comment-header">
            <cite id="dsq-cite-6716">
                <span id="dsq-author-user-6716">coder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6716" class="dsq-comment-body">
            <div id="dsq-comment-message-6716" class="dsq-comment-message"><p>1.Read the line.<br />
2.Tokenize the string.<br />
3.For every token take the char at 0th position and store it in a another string or concatenate to your result string.<br />
4.Repeat step 3 till tokens are there.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-arpit-211190 odd alt depth-2" id="dsq-comment-6967">
        <div id="dsq-comment-header-6967" class="dsq-comment-header">
            <cite id="dsq-cite-6967">
                <span id="dsq-author-user-6967">Arpit Gupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6967" class="dsq-comment-body">
            <div id="dsq-comment-message-6967" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
void print(char *s)
{	int i,word_start_index=0;
	printf(&quot;%c&quot;,s[0]);
	for(i=0;s[i]!='&#092;&#048;';i++)
	{	if(s[i]==32)	
		{	printf(&quot;%c&quot;,s[i+1]);
			word_start_index=i+1;
		}
	}
	printf(&quot;%s\n&quot;,s+word_start_index);
}
int main()
{	char *s=&quot;hii hello how are you&quot;;
	print(s);
	return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-6594">
        <div id="dsq-comment-header-6594" class="dsq-comment-header">
            <cite id="dsq-cite-6594">
                <span id="dsq-author-user-6594">pinku</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6594" class="dsq-comment-body">
            <div id="dsq-comment-message-6594" class="dsq-comment-message"><p>&amp; plzz give a flow chart also</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-6593">
        <div id="dsq-comment-header-6593" class="dsq-comment-header">
            <cite id="dsq-cite-6593">
                <span id="dsq-author-user-6593">pinku</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6593" class="dsq-comment-body">
            <div id="dsq-comment-message-6593" class="dsq-comment-message"><p>plzz reply sharp&#8230;&#8230;&#8230;.write a program in c to print all posible permutations of abcde</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-6589">
        <div id="dsq-comment-header-6589" class="dsq-comment-header">
            <cite id="dsq-cite-6589">
                <span id="dsq-author-user-6589">sandy880</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6589" class="dsq-comment-body">
            <div id="dsq-comment-message-6589" class="dsq-comment-message"><pre> <code language="C">
#include &lt;stdio.h&gt;
#define SIZE 3
int main(char *argv[],int argc)
{
char list[3]={'a','b','c'};
int i,j,k;
for(i=0;i&lt;SIZE;i++)
for(j=0;j&lt;SIZE;j++)
for(k=0;k&lt;SIZE;k++)
if(i!=j &amp;&amp; j!=k &amp;&amp; i!=k)
printf(&quot;%c%c%c\n&quot;,list[i],list[j],list[k]);
return(0);
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-7776">
        <div id="dsq-comment-header-7776" class="dsq-comment-header">
            <cite id="dsq-cite-7776">
                <span id="dsq-author-user-7776">Shaha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7776" class="dsq-comment-body">
            <div id="dsq-comment-message-7776" class="dsq-comment-message"><p>lol sandy your code is so naive, you see it will work for three chars only, no less, no more. its got no flexibility</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-5810">
        <div id="dsq-comment-header-5810" class="dsq-comment-header">
            <cite id="dsq-cite-5810">
                <span id="dsq-author-user-5810">mahendhar rao</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5810" class="dsq-comment-body">
            <div id="dsq-comment-message-5810" class="dsq-comment-message"><p>Awesome website!!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-5765">
        <div id="dsq-comment-header-5765" class="dsq-comment-header">
            <cite id="dsq-cite-5765">
                <span id="dsq-author-user-5765">shantanu bhawre</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5765" class="dsq-comment-body">
            <div id="dsq-comment-message-5765" class="dsq-comment-message"><p>All are correct but i want the otput like<br />
if the string is &#8220;abcd&#8221;<br />
then the combinatio will<br />
bcda<br />
cdab<br />
dabc<br />
abcd</p>
<p>like that can u tell me</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-6874">
        <div id="dsq-comment-header-6874" class="dsq-comment-header">
            <cite id="dsq-cite-6874">
                <span id="dsq-author-user-6874">sura</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6874" class="dsq-comment-body">
            <div id="dsq-comment-message-6874" class="dsq-comment-message"><p>public static void main(String[] args)<br />
	{<br />
		char[] input = &quot;abcd&quot;.toCharArray();<br />
		int j=0;</p>
<p>		for(int i=0;i&lt;input.length;i++)<br />
		{<br />
			int count=0;<br />
			j=i;<br />
			while(count&lt;input.length)<br />
			{<br />
				count++;<br />
				System.out.print(input[j]);<br />
				j=(j+1)%input.length;<br />
			}<br />
			System.out.println();<br />
		}<br />
	}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5756">
        <div id="dsq-comment-header-5756" class="dsq-comment-header">
            <cite id="dsq-cite-5756">
                <span id="dsq-author-user-5756">pps</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5756" class="dsq-comment-body">
            <div id="dsq-comment-message-5756" class="dsq-comment-message"><p>nice</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-5372">
        <div id="dsq-comment-header-5372" class="dsq-comment-header">
            <cite id="dsq-cite-5372">
                <span id="dsq-author-user-5372">ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5372" class="dsq-comment-body">
            <div id="dsq-comment-message-5372" class="dsq-comment-message"><p>really good site&#8230;for every question there is explanation</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-5494">
        <div id="dsq-comment-header-5494" class="dsq-comment-header">
            <cite id="dsq-cite-5494">
                <span id="dsq-author-user-5494">ror</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5494" class="dsq-comment-body">
            <div id="dsq-comment-message-5494" class="dsq-comment-message"><p>but how about if a want a permutation list of something like 1238596?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-5295">
        <div id="dsq-comment-header-5295" class="dsq-comment-header">
            <cite id="dsq-cite-5295">
                <span id="dsq-author-user-5295">Amitabh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5295" class="dsq-comment-body">
            <div id="dsq-comment-message-5295" class="dsq-comment-message"><p>plz get me a program for this output</p>
<p>      1<br />
     121<br />
    12321<br />
     121<br />
    12121</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4913">
        <div id="dsq-comment-header-4913" class="dsq-comment-header">
            <cite id="dsq-cite-4913">
                <span id="dsq-author-user-4913">Ravinder Bishnoi &amp; Yugarsi Ghosh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4913" class="dsq-comment-body">
            <div id="dsq-comment-message-4913" class="dsq-comment-message"><p>Guys,here is a very simple solution&#8230;.</p>
<p>#include<br />
#include<br />
#include<br />
using namespace std;<br />
char a[10];<br />
void func(char *a,int j=0)<br />
{<br />
    if(j==strlen(a))<br />
    {<br />
        printf(&#8220;%s\n&#8221;,a);<br />
        }<br />
        char ch=&#8221;;<br />
    for(int i=j;i&lt;strlen(a);i++)<br />
    {<br />
        char t;<br />
        if(ch==a[i])<br />
        continue;<br />
        else<br />
        {<br />
            ch=a[j];<br />
        t=a[i];<br />
        a[i]=a[j];<br />
        a[j]=t;<br />
    func(a,j+1);<br />
}<br />
    }<br />
}<br />
int main()<br />
{<br />
    char a[10];<br />
    printf(&quot;Enter a String\n&quot;);<br />
    scanf(&quot;%s&quot;,&amp;a);<br />
    printf(&quot;Permutations of string\n&quot;);<br />
    func(a);<br />
    getch();<br />
    return 0;<br />
    }</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4914">
        <div id="dsq-comment-header-4914" class="dsq-comment-header">
            <cite id="dsq-cite-4914">
                <span id="dsq-author-user-4914">Ravinder Bishnoi &amp; Yugarsi Ghosh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4914" class="dsq-comment-body">
            <div id="dsq-comment-message-4914" class="dsq-comment-message"><p>above program was not posted correctly&#8230;<br />
use the new one&#8230;<br />
it works when all elements of string are distinct otherwise some permutations will be repeated.<br />
headers are iostream,string and conio.h.<br />
#include<br />
#include<br />
#include<br />
using namespace std;<br />
char a[10];<br />
void func(char *a,int j=0)<br />
{<br />
    if(j==strlen(a))<br />
    {<br />
        printf(&#8220;%sn&#8221;,a);<br />
        }<br />
    for(int i=j;i&lt;strlen(a);i++)<br />
    {<br />
        char t;<br />
        t=a[i];<br />
        a[i]=a[j];<br />
        a[j]=t;<br />
    func(a,j+1);<br />
    }<br />
}<br />
int main()<br />
{<br />
    char a[10];<br />
    printf(&quot;Enter a Stringn&quot;);<br />
    scanf(&quot;%s&quot;,&amp;a);<br />
    printf(&quot;Permutations of stringn&quot;);<br />
    func(a);<br />
    getch();<br />
    return 0;<br />
    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-venki odd alt depth-2" id="dsq-comment-5303">
        <div id="dsq-comment-header-5303" class="dsq-comment-header">
            <cite id="dsq-cite-5303">
http://geeksforgeeks.org/?page_id=2                <span id="dsq-author-user-5303">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5303" class="dsq-comment-body">
            <div id="dsq-comment-message-5303" class="dsq-comment-message"><p>@Ravinder &amp; @Yugarsi, Here is your logic. How is it better, could you explain your view?</p>
<pre> <code language="C">
#include &lt;iostream&gt;
using namespace std;

void permute(char *a, int j = 0)
{
    int len = strlen(a);

    if(j == len)
    {
        cout &lt;&lt; a &lt;&lt; endl;
    }

    for(int i = j; i &lt; len; i++)
    {
        char t = a[i];
        a[i] = a[j];
        a[j] = t;

        permute(a, j+1);
    }
}

int main()
{
    char a[] = &quot;ABCD&quot;;
    permute(a);
    return 0;
}
</code> </pre>
<p>This kind of programs runs like O(f(n) * n!) or O(f() * 2^n) where is f(n) is polynomial in n. Any algorithm must generate all possible permutations.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-7777">
        <div id="dsq-comment-header-7777" class="dsq-comment-header">
            <cite id="dsq-cite-7777">
                <span id="dsq-author-user-7777">Shaha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7777" class="dsq-comment-body">
            <div id="dsq-comment-message-7777" class="dsq-comment-message"><p>actually your code/logic is the almost the same as the one posted by admin, you only replaced the swap fuction call by actual function, which could have been done automatically if swipe function was inline. <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /><br />
btw your program shows all permutations but the admins does not, or perhaps i made some glitch while copying.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4893">
        <div id="dsq-comment-header-4893" class="dsq-comment-header">
            <cite id="dsq-cite-4893">
                <span id="dsq-author-user-4893">amit khoth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4893" class="dsq-comment-body">
            <div id="dsq-comment-message-4893" class="dsq-comment-message"><p>@geeksforgeeks correct this code.for same type of word it is not working.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-4895">
        <div id="dsq-comment-header-4895" class="dsq-comment-header">
            <cite id="dsq-cite-4895">
                <span id="dsq-author-user-4895">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4895" class="dsq-comment-body">
            <div id="dsq-comment-message-4895" class="dsq-comment-message"><p>@amit khoth:  Could you please provide a sample string for which it didn&#8217;t work?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-4896">
        <div id="dsq-comment-header-4896" class="dsq-comment-header">
            <cite id="dsq-cite-4896">
                <span id="dsq-author-user-4896">amit khoth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4896" class="dsq-comment-body">
            <div id="dsq-comment-message-4896" class="dsq-comment-message"><p>when two character are similar in a word.like aatif,aaaj etc,</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-7389">
        <div id="dsq-comment-header-7389" class="dsq-comment-header">
            <cite id="dsq-cite-7389">
                <span id="dsq-author-user-7389">Christian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7389" class="dsq-comment-body">
            <div id="dsq-comment-message-7389" class="dsq-comment-message"><p>Well, what do you think it should do? It&#8217;s probably undefined for input like that.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-7778">
        <div id="dsq-comment-header-7778" class="dsq-comment-header">
            <cite id="dsq-cite-7778">
                <span id="dsq-author-user-7778">Shaha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7778" class="dsq-comment-body">
            <div id="dsq-comment-message-7778" class="dsq-comment-message"><p>actually it does not give all the permutations, for 3 chars there should be 3!   = 6, right?<br />
Btw Venki has given a correct code,<br />
And for those who want it to not show repeating ones, put a condition before swaping, if the chars to be swapped are same continue ( i mean skip the statement continue; instruction and go for next.<br />
Hey admin would you like my page on fb?? Its about coding too, ive made some awesome codes <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> wanted someone who could critique or provide suggestions, <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> thank you<br />
Page is &#8216;C programming&#8217;<br />
facebook.com/CkCoders</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4238">
        <div id="dsq-comment-header-4238" class="dsq-comment-header">
            <cite id="dsq-cite-4238">
                <span id="dsq-author-user-4238">Anand</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4238" class="dsq-comment-body">
            <div id="dsq-comment-message-4238" class="dsq-comment-message"><p><a href="http://anandtechblog.blogspot.com/2011/05/arra-y-problem.html" rel="nofollow">http://anandtechblog.blogspot.com/2011/05/arra-y-problem.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4219">
        <div id="dsq-comment-header-4219" class="dsq-comment-header">
            <cite id="dsq-cite-4219">
                <span id="dsq-author-user-4219">Sam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4219" class="dsq-comment-body">
            <div id="dsq-comment-message-4219" class="dsq-comment-message"><p>Great post!</p>
<p>Nice solution here as well:<a href="   http://www.programmerinterview.com/index.php/recursion/permutations-of-a-string/" rel="nofollow"></p>
<p></a><a href="http://www.programmerinterview.com/index.php/recursion/permutations-of-a-string/" rel="nofollow">http://www.programmerinterview.com/index.php/recursion/permutations-of-a-string/</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3602">
        <div id="dsq-comment-header-3602" class="dsq-comment-header">
            <cite id="dsq-cite-3602">
                <span id="dsq-author-user-3602">rimu.nitrkl</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3602" class="dsq-comment-body">
            <div id="dsq-comment-message-3602" class="dsq-comment-message"><p>The code mentioned above doesnt work correctly, if there are any repeated characters in the string, it would unncessarily print some strings multiple times &#8230;</p>
<p>Working code for the same, which takes care of repeated chars as well:</p>
<pre> <code language="C">
# include &lt;stdio.h&gt;
# include &lt;conio.h&gt;

int printPermutations(char *str,int size, int pos)
{
     int i;
     int total=0;
      
     if(pos==(size-1))
     {
                      puts(str);
                      return 1;
     }
     
     total+=printPermutations(str,size,pos+1);
     for(i=pos+1;i&lt;size;i++)
     {
                          int j;  
                          for(j=pos;j&lt;i;j++)
                                            if(*(str+j)==*(str+i))
                                                                  break;
                          
                          if(j==i)
                          {
                                        char tmp=*(str+pos);
                                        *(str+pos)=*(str+i);
                                        *(str+i)=tmp;
                          
                                        total+=printPermutations(str,size,pos+1);
                          
                                        tmp=*(str+pos);
                                        *(str+pos)=*(str+i);
                                        *(str+i)=tmp;
                          }
     }
     
     return total;
}

int main()
{
    char str[100];
    int size,total;
    
    printf(&quot;Enter the string: &quot;);
    gets(str);
    
    size=strlen(str);
    
    printf(&quot;\n\nAll permutations of the input string are:\n&quot;);
    total=printPermutations(str,size,0);
    
    printf(&quot;\n\nThe total number of permutations of the given string is %d&quot;,total);
    
    getch();
    return 0;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-3845">
        <div id="dsq-comment-header-3845" class="dsq-comment-header">
            <cite id="dsq-cite-3845">
                <span id="dsq-author-user-3845">ricky</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3845" class="dsq-comment-body">
            <div id="dsq-comment-message-3845" class="dsq-comment-message"><p>@rimu.nitrkl&#8230;Could You Please Through Some More Light ..I mean Can you write down the algorithm..step by step..its really nice way to programming that you have done..also..i think you TC is O(n^2)..isn&#8217;t it..??</p>
<p>Waiting for your Explanation..??? Reply ASAP</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3420">
        <div id="dsq-comment-header-3420" class="dsq-comment-header">
            <cite id="dsq-cite-3420">
                <span id="dsq-author-user-3420">crash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3420" class="dsq-comment-body">
            <div id="dsq-comment-message-3420" class="dsq-comment-message"><p>i want a all combos of 7 letters<br />
should i hav to use char</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-3322">
        <div id="dsq-comment-header-3322" class="dsq-comment-header">
            <cite id="dsq-cite-3322">
                <span id="dsq-author-user-3322">Ahul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3322" class="dsq-comment-body">
            <div id="dsq-comment-message-3322" class="dsq-comment-message"><p>How the control again reaches to permute fn evenafter the i becomes 2</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3201">
        <div id="dsq-comment-header-3201" class="dsq-comment-header">
            <cite id="dsq-cite-3201">
                <span id="dsq-author-user-3201">Matrix</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3201" class="dsq-comment-body">
            <div id="dsq-comment-message-3201" class="dsq-comment-message"><p>the first program gives repeated permutation in case of 122<br />
how to correct it<br />
plz help ??<br />
in case of 122,it gives<br />
122<br />
212<br />
221<br />
212  //repeated<br />
221  //repeated</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-3116">
        <div id="dsq-comment-header-3116" class="dsq-comment-header">
            <cite id="dsq-cite-3116">
                <span id="dsq-author-user-3116">world is round</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3116" class="dsq-comment-body">
            <div id="dsq-comment-message-3116" class="dsq-comment-message"><p>Another way to do this : <a href="http://layerinside.blogspot.com/2011/02/permutation-of-string.html" rel="nofollow">http://layerinside.blogspot.com/2011/02/permutation-of-string.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3068">
        <div id="dsq-comment-header-3068" class="dsq-comment-header">
            <cite id="dsq-cite-3068">
                <span id="dsq-author-user-3068">Shashank Mani Narayan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3068" class="dsq-comment-body">
            <div id="dsq-comment-message-3068" class="dsq-comment-message"><p>Hey guys..I know Most of You Stuck with this Question..The 1st Backtracking approach..seems to typical..for understanding [points of view&#8230;..here i am posting a excellent so0lution fro problem hope this will help you ..lot..</p>
<p>Explanation </p>
<p>Let’s assume a given string S represented by the letters A1, A2, A3, &#8230;, An<br />
To permute set S, we can select the first character, A1, permute the remainder of the string to get a new list. Then, with that new list, we can “push” A1 into each possible position.<br />
For example, if our string is “abc”, we would do the following:<br />
1. Let first = “a” and let remainder = “bc”<br />
2. Let list = permute(bc) = {“bc”, “cd”}<br />
3. Push “a” into each location of “bc” (&#8211;&gt; “abc”, “bac”, “bca”) and “cb” (&#8211;&gt; “acb”, “cab”, “cba”)<br />
4. Return our new list</p>
<pre> <code language="Java">

import java.util.*;
class Permutation
{   
public static ArrayList getPerms(String s) 
{
 
 ArrayList permutations = new ArrayList();

 if (s == null) 
 { // error case
   return null;
 } 
 else if (s.length() == 0) 
 { // base case
 permutations.add(&quot;&quot;);
 return permutations;
 }

 char first = s.charAt(0); // get the first character
 String remainder = s.substring(1); // remove the first character
 ArrayList words = getPerms(remainder);

 for (String word : words) 
 {
 
    for (int j = 0; j &lt;= word.length(); j++) 
    {
      permutations.add(insertCharAt(word, first, j));
    }
 
  }
       return permutations;
 

  }
 

  public static String insertCharAt(String word, char c, int i) 
  {
    String start = word.substring(0, i);
    String end = word.substring(i);

     System.out.println(&quot;start=&quot; + start  + &quot;\t c=&quot; + c + &quot;\t end=&quot; + end );
    return start + c + end;
  }

  public static void main(String a[])

  {
     ArrayList perm = new ArrayList();
     
     perm=getPerms(&quot;abc&quot;);

    //for(String ele:perm)
          //System.out.println(ele);
  }
}
</code> </pre>
<p>Compile: javac Permutation.java<br />
Run: java Permutation</p>
<p>/*output analysis<br />
start=	 c=c	 end=<br />
start=	 c=b	 end=c<br />
start=c	 c=b	 end=<br />
start=	 c=a	 end=bc<br />
start=b	 c=a	 end=c<br />
start=bc	 c=a	 end=<br />
start=	 c=a	 end=cb<br />
start=c	 c=a	 end=b<br />
start=cb	 c=a	 end=<br />
*/</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-10168">
        <div id="dsq-comment-header-10168" class="dsq-comment-header">
            <cite id="dsq-cite-10168">
                <span id="dsq-author-user-10168">rahul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10168" class="dsq-comment-body">
            <div id="dsq-comment-message-10168" class="dsq-comment-message"><p>@Shashank .. This is awesome solution , i was not aware of this , thanks for sharing <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-saiganeshb even thread-even depth-1" id="dsq-comment-2606">
        <div id="dsq-comment-header-2606" class="dsq-comment-header">
            <cite id="dsq-cite-2606">
                <span id="dsq-author-user-2606">Sai Ganesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2606" class="dsq-comment-body">
            <div id="dsq-comment-message-2606" class="dsq-comment-message"><p>My solution:</p>
<pre> <code language="C">#include&lt;stdio.h&gt;
void printer(int *a,int n){
	int i;
	for(i=0;i&lt;n;i++)printf(&quot;%d&quot;,a[i]);printf(&quot;\n&quot;);
}
/*recursive permute function 
Semantics:
	a - array which holds the present permutation of size n
	
	k - present slot in the array a. we have a permutation when k==n
	if k &lt; n , we are still building our permutation.
	
	We can think of the permutation result as 
	a row of n slots, holding a number between 1 and n 
	
	(if we want permutations from another array b, we can think of 
	it as holding b[1] to b[n] ..the logic is the same)
	
	if we don't want them to repeat, we need to maintain 
	state of our computations in the array called 'selected'.

 */
void permute(int *a,int n,int k,int *selected){
	if(k==n){
		printer(a,n);
		return;
	}
	int i;
	for(i=0;i&lt;n;i++){
		if(!selected[i]){
			a[k]=i+1; //alternately, a[k]=f(i) , here f(i)=i+1.
			//essentially, the i'th value from a list.
			selected[i]=1;
			permute(a,n,k+1,selected); //fill up from the next index
			selected[i]=0; //backtrack
		}
	}
}
int main(void){
	int a[10]={0};
	int i;
	int selected[10]={0};
	permute(a,5,0,selected);
	return 0;
}</code> </pre>
<p>Advantages:<br />
1. code is clear and the printer() function can be replaced by<br />
a process() function which is &#8216;streamed&#8217; one permutation at a time</p>
<p>2. It can also be used to permute values from a function.<br />
we are just storing the indices.</p>
<p>3. Can be extended to print permutations with repetition:<br />
make the if condition always evaluate to true <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /><br />
like (if(1 || !selected[i] ) ) &#8230;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-3757">
        <div id="dsq-comment-header-3757" class="dsq-comment-header">
            <cite id="dsq-cite-3757">
                <span id="dsq-author-user-3757">Emran</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3757" class="dsq-comment-body">
            <div id="dsq-comment-message-3757" class="dsq-comment-message"><p>this is a really clean implementation, and i like that it lists in lexicographic order. </p>
<p>question: what if i had an application where i could reduce run time by avoiding some permutations&#8230;<br />
like if i wanted to enumerate every other permutation, or only the first (n!)/2 permutations? </p>
<p>in particular, ive reached a case in a problem im solving where 1,2,3,4 is the effective equivalent of 4,3,2,1&#8230;<br />
so i want to remove those from being evaluated; but im not sure how to group out such subsets&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-3804">
        <div id="dsq-comment-header-3804" class="dsq-comment-header">
            <cite id="dsq-cite-3804">
                <span id="dsq-author-user-3804">seeker7</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3804" class="dsq-comment-body">
            <div id="dsq-comment-message-3804" class="dsq-comment-message"><p>This code is plagiarised from Programming interview exposed<br />
 I do not intend to Offend you ,but you should have mentioned the source of your code .</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2382">
        <div id="dsq-comment-header-2382" class="dsq-comment-header">
            <cite id="dsq-cite-2382">
                <span id="dsq-author-user-2382">Phani Deepak</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2382" class="dsq-comment-body">
            <div id="dsq-comment-message-2382" class="dsq-comment-message"><p>Just another improvement.<br />
The function prototype can be just permute(char *a, int size);</p>
<p>Modification would be:<br />
instead of swapping every element in loop with first element,<br />
we can swap it with last element and call permute(a, size-1);</p>
<p>what do you say?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-2230">
        <div id="dsq-comment-header-2230" class="dsq-comment-header">
            <cite id="dsq-cite-2230">
                <span id="dsq-author-user-2230">cod3r</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2230" class="dsq-comment-body">
            <div id="dsq-comment-message-2230" class="dsq-comment-message"><p>Hey,<br />
how would do it for strings with repeated string</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-2231">
        <div id="dsq-comment-header-2231" class="dsq-comment-header">
            <cite id="dsq-cite-2231">
                <span id="dsq-author-user-2231">cod3r</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2231" class="dsq-comment-body">
            <div id="dsq-comment-message-2231" class="dsq-comment-message"><p>Hey,<br />
how would do it for strings with repeated <strong>char</strong></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-4731">
        <div id="dsq-comment-header-4731" class="dsq-comment-header">
            <cite id="dsq-cite-4731">
http://www.divye.in                <span id="dsq-author-user-4731">Divye</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4731" class="dsq-comment-body">
            <div id="dsq-comment-message-4731" class="dsq-comment-message"><p>See this post to understand the logic behind printing all permutations without duplicates (even when duplicate characters are present in the input).</p>
<p><a href="http://www.divye.in/2011/06/printing-all-permutations-of-string.html" rel="nofollow">http://www.divye.in/2011/06/printing-all-permutations-of-string.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2064">
        <div id="dsq-comment-header-2064" class="dsq-comment-header">
            <cite id="dsq-cite-2064">
                <span id="dsq-author-user-2064">Anshul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2064" class="dsq-comment-body">
            <div id="dsq-comment-message-2064" class="dsq-comment-message"><p>I think this will work. I ran this and its working:</p>
<pre> <code language="C">
private void swap(ref char a, ref char b)
        {
            if (a == b) return;
            a ^= b;
            b ^= a;
            a ^= b;
        }

        private void go(char[] list, int k, int m)
        {
            int i;
            if (k == m)
            {
                Console.Write(list);
                Console.WriteLine(&quot; &quot;);
            }
            else
                for (i = k; i &lt;= m; i++)
                {
                    if (list[k] == list[i] &amp;&amp; k != i) continue;
                    swap(ref list[k], ref list[i]);
                    go(list, k + 1, m);
                    swap(ref list[k], ref list[i]);
                }
        }
</code> </pre>
<p>Only difference is in Swap function, So swap is also checking if swapping characters are equivalent.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-3008">
        <div id="dsq-comment-header-3008" class="dsq-comment-header">
            <cite id="dsq-cite-3008">
                <span id="dsq-author-user-3008">stackoverflow</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3008" class="dsq-comment-body">
            <div id="dsq-comment-message-3008" class="dsq-comment-message"><p>copied well from stack overflow &#8230;&#8230;. nice!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-2063">
        <div id="dsq-comment-header-2063" class="dsq-comment-header">
            <cite id="dsq-cite-2063">
                <span id="dsq-author-user-2063">Anshul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2063" class="dsq-comment-body">
            <div id="dsq-comment-message-2063" class="dsq-comment-message"><p>For the main code given on this page, I think for string = “aaa” it will print “aaa” several times instead of just once. To remove this error, do the following modification:</p>
<pre> <code language="C">
       for (j = i; j &lt;= n; j++)
       {
           if (A[i] == A[j] &amp;&amp; i != j) 
                continue;
           swap((a+i), (a+j));
           permute(a, i+1, n);
           swap((a+i), (a+j)); //backtrack
       }
</code> </pre>
<p>The highlighted line is not preventing print of same &quot;AAA&quot;. I think we need to check for same string and should not execute in case of same string.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-1980">
        <div id="dsq-comment-header-1980" class="dsq-comment-header">
            <cite id="dsq-cite-1980">
                <span id="dsq-author-user-1980">Ankul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1980" class="dsq-comment-body">
            <div id="dsq-comment-message-1980" class="dsq-comment-message"><p>For the main code given on this page, I think for string = &#8220;aaa&#8221; it will print &#8220;aaa&#8221; several times instead of just once. To remove this error, do the following modification:</p>
<pre> <code language="C">
for (j = i; j &lt;= n; j++)
       {
         if (A[i] == A[j] &amp;&amp; i != j) continue;
          swap((a+i), (a+j));
          permute(a, i+1, n);
          swap((a+i), (a+j)); //backtrack
       }
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-cracker odd alt depth-2" id="dsq-comment-6514">
        <div id="dsq-comment-header-6514" class="dsq-comment-header">
            <cite id="dsq-cite-6514">
http://algods-cracker.blogspot.com/                <span id="dsq-author-user-6514">Cracker</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6514" class="dsq-comment-body">
            <div id="dsq-comment-message-6514" class="dsq-comment-message"><p>not working for string &#8220;agra&#8221;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-cracker even depth-3" id="dsq-comment-6515">
        <div id="dsq-comment-header-6515" class="dsq-comment-header">
            <cite id="dsq-cite-6515">
http://algods-cracker.blogspot.com/                <span id="dsq-author-user-6515">Cracker</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6515" class="dsq-comment-body">
            <div id="dsq-comment-message-6515" class="dsq-comment-message"><p>output is &#8212;</p>
<p>agra<br />
agar<br />
arga<br />
arag<br />
aarg<br />
aagr<br />
gara<br />
gaar<br />
graa<br />
rgaa<br />
raga<br />
raag<br />
raag<br />
raga</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-21142">
        <div id="dsq-comment-header-21142" class="dsq-comment-header">
            <cite id="dsq-cite-21142">
                <span id="dsq-author-user-21142">faizan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21142" class="dsq-comment-body">
            <div id="dsq-comment-message-21142" class="dsq-comment-message"><p>above code is not valid for repeating characters.<br />
Use hashing for recursive functions</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1831">
        <div id="dsq-comment-header-1831" class="dsq-comment-header">
            <cite id="dsq-cite-1831">
                <span id="dsq-author-user-1831">seeker7</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1831" class="dsq-comment-body">
            <div id="dsq-comment-message-1831" class="dsq-comment-message"><p>hw abt this:<br />
rotate the given array n-1 times<br />
then reverse the intial array and again rotate it n-1 times!</p>
<p>woud&#8217;nt it be better than using recursion?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ravi odd alt depth-2" id="dsq-comment-2489">
        <div id="dsq-comment-header-2489" class="dsq-comment-header">
            <cite id="dsq-cite-2489">
                <span id="dsq-author-user-2489">Ravinder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2489" class="dsq-comment-body">
            <div id="dsq-comment-message-2489" class="dsq-comment-message"><p>It doesn&#8217;t provide all solutions!!?<br />
instead of n! permutations, it just gives 2n</p>
<p>correct me in case of misinterpretation</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-1613">
        <div id="dsq-comment-header-1613" class="dsq-comment-header">
            <cite id="dsq-cite-1613">
                <span id="dsq-author-user-1613">Anshu Bansal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1613" class="dsq-comment-body">
            <div id="dsq-comment-message-1613" class="dsq-comment-message"><p>Would this work for &#8216;N&#8217; number of characters in String?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rscrbv odd alt thread-even depth-1" id="dsq-comment-1547">
        <div id="dsq-comment-header-1547" class="dsq-comment-header">
            <cite id="dsq-cite-1547">
                <span id="dsq-author-user-1547">rscrbv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1547" class="dsq-comment-body">
            <div id="dsq-comment-message-1547" class="dsq-comment-message"><p>here is my code, if anybody likes</p>
<pre> <code language="CPP">
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

void ror(char str1[],int a,int b)
{
	char temp=str1[a];
	int j;
	for(j=a;j&lt;b;j++)
	{
		 str1[j]=str1[j+1];
	}
	str1[b]=temp;
}

void perm(char str[],int f,int l)
{
	 int i;
	 char str1[5];
	 strcpy(str1,str);
	 if(f==l)
	 {
		printf(&quot;%s\t&quot;,str1);
		return;
	 }
	 for(i=f;i&lt;=l;i++)
	 {
		perm(str1,f+1,l);
		ror(str1,f,l);
	 }
}

int main()
{
      perm(&quot;vikas&quot;,0,4);
      getchar();
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-2681">
        <div id="dsq-comment-header-2681" class="dsq-comment-header">
            <cite id="dsq-cite-2681">
                <span id="dsq-author-user-2681">shashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2681" class="dsq-comment-body">
            <div id="dsq-comment-message-2681" class="dsq-comment-message"><p>@rscrbv<br />
@geeksforgeek<br />
..could plz tell me how ur code is working..plz  help le out that how the control is tranferring..take string abc  &amp; plz show ur flow control at for every combination&#8230;i really need help in dis..program&#8230;reply asap.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-wgpshashank odd alt depth-3" id="dsq-comment-2716">
        <div id="dsq-comment-header-2716" class="dsq-comment-header">
            <cite id="dsq-cite-2716">
http://www.wgpshashank.co.cc                <span id="dsq-author-user-2716">wgpshashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2716" class="dsq-comment-body">
            <div id="dsq-comment-message-2716" class="dsq-comment-message"><p>@rscrbv<br />
@geeksforgeek<br />
..could plz tell me how ur code is working..take string abc &amp; plz show ur flow control at for every combination…i really need help in dis..program…reply asap.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-3803">
        <div id="dsq-comment-header-3803" class="dsq-comment-header">
            <cite id="dsq-cite-3803">
                <span id="dsq-author-user-3803">seeker7</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3803" class="dsq-comment-body">
            <div id="dsq-comment-message-3803" class="dsq-comment-message"><p>why does not any one explain this well-loved code<br />
thanks!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-4057">
        <div id="dsq-comment-header-4057" class="dsq-comment-header">
            <cite id="dsq-cite-4057">
                <span id="dsq-author-user-4057">vivek singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4057" class="dsq-comment-body">
            <div id="dsq-comment-message-4057" class="dsq-comment-message"><p>well done</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-1177">
        <div id="dsq-comment-header-1177" class="dsq-comment-header">
            <cite id="dsq-cite-1177">
                <span id="dsq-author-user-1177">remo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1177" class="dsq-comment-body">
            <div id="dsq-comment-message-1177" class="dsq-comment-message"><p>what will done when call Function permute(a, i+1, n);</p>
<pre> <code language="C">
 for (j = i; j &amp;lt;= n; j++)  

       {  

          swap((a+i), (a+j));  

          permute(a, i+1, n);  

          swap((a+i), (a+j)); //backtrack  

       }
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-697">
        <div id="dsq-comment-header-697" class="dsq-comment-header">
            <cite id="dsq-cite-697">
http://voxels.blogspot.com                <span id="dsq-author-user-697">Sven Forstmann</span>
            </cite>
        </div>
        <div id="dsq-comment-body-697" class="dsq-comment-body">
            <div id="dsq-comment-message-697" class="dsq-comment-message"><p>Simple and non-recursive, lexically correct output.</p>
<pre> <code language="C">std::string default = &quot;Hallo&quot;;

int perm=1, digits=default.size();
for (int i=1;i&lt;=digits;perm*=i++);
for (int a=0;a&lt;perm;a++)
{
	std::string avail=default;

	for (int b=digits,div=perm;b&gt;0; b--) 
	{
		div/=b;
		int index = (a/div)%b;
		printf(&quot;%c&quot;, avail[index] );
		avail.erase(index,1) ;
	}
	printf(&quot;\n&quot;);
}
printf(&quot;permutations:%d\n&quot;,perm);
</code> </pre>
<p>(c) Sven Forstmann</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-720">
        <div id="dsq-comment-header-720" class="dsq-comment-header">
            <cite id="dsq-cite-720">
                <span id="dsq-author-user-720">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-720" class="dsq-comment-body">
            <div id="dsq-comment-message-720" class="dsq-comment-message"><p>@Sven Forstmann: Can you please write algorithm for the above code?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-soundbalaji odd alt depth-3" id="dsq-comment-2698">
        <div id="dsq-comment-header-2698" class="dsq-comment-header">
            <cite id="dsq-cite-2698">
                <span id="dsq-author-user-2698">bala</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2698" class="dsq-comment-body">
            <div id="dsq-comment-message-2698" class="dsq-comment-message"><p>This code does not work for non-unique set of characters. But works for unique set of characters.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-2907">
        <div id="dsq-comment-header-2907" class="dsq-comment-header">
            <cite id="dsq-cite-2907">
                <span id="dsq-author-user-2907">anom</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2907" class="dsq-comment-body">
            <div id="dsq-comment-message-2907" class="dsq-comment-message"><p>You are assuming the string contains no dup chars. However, your sample string has two &#8216;l&#8217;s. Your own sample doesn&#8217;t work.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-sandeep odd alt thread-odd thread-alt depth-1" id="dsq-comment-571">
        <div id="dsq-comment-header-571" class="dsq-comment-header">
            <cite id="dsq-cite-571">
                <span id="dsq-author-user-571">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-571" class="dsq-comment-body">
            <div id="dsq-comment-message-571" class="dsq-comment-message"><p>@amit: The diagram shows recursive execution of permute().</p>
<p><strong>For i = 0 and j = 0</strong><br />
A is fixed at first place using below line
<pre> <code language="C">  swap((a+i), (a+j)) /*A is swapped with A*/ </code> </pre>
<p>Then all the permutations of BC (sub-string after A) are printed
<pre> <code language="C">  permute(a, i+1, n);  /*Call permute for BC  with i = 1  */ </code> </pre>
<p>Finally swap the characters back
<pre> <code language="C">  swap((a+i), (a+j)) /*A is swapped with A*/ </code> </pre>
<p><strong><br />
For i = 0 and j = 1</strong><br />
B is fixed at first place using below line
<pre> <code language="C">  swap((a+i), (a+j)) /*A is swapped with B*/ </code> </pre>
<p>Then all the permutations of BC (sub-string after A) are printed
<pre> <code language="C">  permute(a, i+1, n);  /*Call permute for AC  with i = 1 */ </code> </pre>
<p>Finally, swap the characters back
<pre> <code language="C">  swap((a+i), (a+j)) /*B is swapped with A*/ </code> </pre>
<p><strong><br />
For i = 0 and j = 2</strong><br />
C is fixed at first place using below line
<pre> <code language="C">  swap((a+i), (a+j)) /*A is swapped with C*/ </code> </pre>
<p>Then all the permutations of BC (sub-string after A) are printed
<pre> <code language="C">  permute(a, i+1, n);  /*Call permute for BA with i = 1 */ </code> </pre>
<p>Finally, swap the characters back
<pre> <code language="C">  swap((a+i), (a+j)) /*C is swapped with A*/ </code> </pre>
<p>For  i  = 1, second character is swapped one by one with the other characters (after second character).  Same way is continued for i = 2, 3..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-566">
        <div id="dsq-comment-header-566" class="dsq-comment-header">
            <cite id="dsq-cite-566">
                <span id="dsq-author-user-566">amit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-566" class="dsq-comment-body">
            <div id="dsq-comment-message-566" class="dsq-comment-message"><p>@geeksforgeeks<br />
can u explan how this code works.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-398">
        <div id="dsq-comment-header-398" class="dsq-comment-header">
            <cite id="dsq-cite-398">
                <span id="dsq-author-user-398">Ved</span>
            </cite>
        </div>
        <div id="dsq-comment-body-398" class="dsq-comment-body">
            <div id="dsq-comment-message-398" class="dsq-comment-message"><p>The complete code is at :<br />
<a href="http://techpuzzl.wordpress.com/2010/01/11/string-permutation/" rel="nofollow">http://techpuzzl.wordpress.com/2010/01/11/string-permutation/</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-219">
        <div id="dsq-comment-header-219" class="dsq-comment-header">
            <cite id="dsq-cite-219">
http://srini156.blogspot.com                <span id="dsq-author-user-219">Srinivas Iyengar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-219" class="dsq-comment-body">
            <div id="dsq-comment-message-219" class="dsq-comment-message"><p>Ok.<br />
We can call this function like perm(&#8220;&#8221;,s) where s is the string which has to be permuted.<br />
I am not sure how to highlight the code in the Comment Section. I hope the code is readable enough.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-odd thread-alt depth-1" id="dsq-comment-218">
        <div id="dsq-comment-header-218" class="dsq-comment-header">
            <cite id="dsq-cite-218">
                <span id="dsq-author-user-218">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-218" class="dsq-comment-body">
            <div id="dsq-comment-message-218" class="dsq-comment-message"><p>@Srinivas Iyengar: Could you add more colors to the code given below, please?  What should be prefix and suffix for the first call of permute() in main()?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-100">
        <div id="dsq-comment-header-100" class="dsq-comment-header">
            <cite id="dsq-cite-100">
http://srini156.blogspot.com                <span id="dsq-author-user-100">Srinivas Iyengar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-100" class="dsq-comment-body">
            <div id="dsq-comment-message-100" class="dsq-comment-message"><pre> <code language="C">
/*Similar Recursive Code for Permutation of a String keeping track of 
   prefix and suffix*/
void permute(string prefix,string suffix)
{
   /* We can print prefix here for generating power set and simply 
       write return in the following if case.*/
  if(suffix.size()==0)
    printf(&quot;%s \n&quot;, prefix);
  else
   for(int i=0;i &lt; suffix.size();i++)
      permute(
               prefix+suffix[i],
               suffix.substr(0,i)+suffix.
               substr(i+1, suffix.size())
              );
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/';
var disqus_identifier = '767 http://geeksforgeeks.org/?p=767';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Write a C program to print all permutations of a given string";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.341 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:25:26 -->

<!-- Compression = gzip -->
<!-- super cache -->