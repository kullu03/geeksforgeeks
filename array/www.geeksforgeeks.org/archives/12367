<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>XOR Linked List - A Memory Efficient Doubly Linked List | Set 1 - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/xor-linked-list-a-memory-efficient-doubly-linked-list-set-1/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="XOR Linked List - A Memory Efficient Doubly Linked List | Set 1 - GeeksforGeeks" />
<meta property="og:description" content="An ordinary Doubly Linked List requires space for two address fields to store the addresses of previous and next nodes. A memory efficient version of Doubly Linked List can be created using only one space for address field with every node. This memory efficient Doubly Linked List is called XOR Linked List or Memory Efficient &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/xor-linked-list-a-memory-efficient-doubly-linked-list-set-1/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Linked Lists" />
<meta property="article:published_time" content="2011-05-23T23:29:45+00:00" />
<meta property="article:modified_time" content="2012-10-04T10:14:14+00:00" />
<meta property="og:updated_time" content="2012-10-04T10:14:14+00:00" />
<meta property="og:image" content="http://geeksforgeeks.org/wp-content/uploads/doublyll-300x65.gif" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.509 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111341 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">XOR Linked List &#8211; A Memory Efficient Doubly Linked List  | Set 1</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>An ordinary Doubly Linked List requires space for two address fields to store the addresses of previous and next nodes.<span id="more-12367"></span>  A memory efficient version of Doubly Linked List can be created using only one space for address field with every node. This memory efficient Doubly Linked List is called XOR Linked List or Memory Efficient as the list uses bitwise XOR operation to save space for one address. In the XOR linked list, instead of storing actual memory addresses, every node stores the XOR of addresses of previous and next nodes.  </p>
<p><a href="http://geeksforgeeks.org/wp-content/uploads/doublyll.gif"><img src="http://geeksforgeeks.org/wp-content/uploads/doublyll-300x65.gif" alt="" title="doublyll" width="500" height="105" class="aligncenter size-medium wp-image-12441" /></a></p>
<p>Consider the above Doubly Linked List.  Following are the Ordinary and XOR (or Memory Effiecient) representations of the Doubly Linked List.</p>
<p><strong>Ordinary Representation:</strong><br />
Node A:<br />
prev = NULL, next = add(B)     // previous is NULL and next is address of B</p>
<p>Node B:<br />
prev = add(A), next = add(C)  // previous is address of A and next is address of C</p>
<p>Node C:<br />
prev = add(B), next = add(D)   // previous is address of B and next is address of D</p>
<p>Node D:<br />
prev = add(C), next = NULL  // previous is address of C and next is NULL</p>
<p><strong>XOR List Representation:</strong><br />
Let us call the address variable in XOR representation npx (XOR of next and previous)</p>
<p>Node A:<br />
npx =  0 XOR add(B)          // bitwise XOR of zero and address of B</p>
<p>Node B:<br />
npx = add(A) XOR add(C)   // bitwise XOR of address of A and address of C</p>
<p>Node C:<br />
npx = add(B) XOR add(D)   // bitwise XOR of address of B and address of D</p>
<p>Node D:<br />
npx = add(C) XOR 0 // bitwise XOR of address of C and 0</p>
<p><strong>Traversal of XOR Linked List:</strong><br />
We can traverse the XOR list in both forward and reverse direction.  While traversing the list we need to remember the address of the previously accessed node in order to calculate the next node&#8217;s address.  For example when we are at node C, we must have address of B.  XOR of add(B) and <em>npx </em>of C gives us the add(D).  The reason is simple: npx(C) is &#8220;add(B) XOR add(D)&#8221;.  If we do xor of npx(C) with add(B), we get the result as &#8220;add(B) XOR add(D) XOR add(B)&#8221; which is &#8220;add(D) XOR 0&#8243; which is &#8220;add(D)&#8221;.  So we have the address of next node. Similarly we can traverse the list in backward direction. </p>
<p>We have covered more on XOR Linked List in the following post.</p>
<p><a href="http://www.geeksforgeeks.org/archives/12615">XOR Linked List – A Memory Efficient Doubly Linked List | Set 2</a></p>
<p><strong>References:</strong><br />
<a href="http://en.wikipedia.org/wiki/XOR_linked_list">http://en.wikipedia.org/wiki/XOR_linked_list</a><br />
<a href="http://www.linuxjournal.com/article/6828?page=0,0">http://www.linuxjournal.com/article/6828?page=0,0</a></p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/given-linked-list-reverse-alternate-nodes-append-end/" title="Given a linked list, reverse alternate nodes and append at the end">Given a linked list, reverse alternate nodes and append at the end</a></li><li><a href="http://www.geeksforgeeks.org/pairwise-swap-elements-of-a-given-linked-list-by-changing-links/" title="Pairwise swap elements of a given linked list by changing links">Pairwise swap elements of a given linked list by changing links</a></li><li><a href="http://www.geeksforgeeks.org/self-organizing-list-set-1-introduction/" title="Self Organizing List | Set 1 (Introduction)">Self Organizing List | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/merge-a-linked-list-into-another-linked-list-at-alternate-positions/" title="Merge a linked list into another linked list at alternate positions">Merge a linked list into another linked list at alternate positions</a></li><li><a href="http://www.geeksforgeeks.org/quicksort-on-singly-linked-list/" title="QuickSort on Singly Linked List">QuickSort on Singly Linked List</a></li><li><a href="http://www.geeksforgeeks.org/delete-n-nodes-after-m-nodes-of-a-linked-list/" title="Delete N nodes after M nodes of a linked list">Delete N nodes after M nodes of a linked list</a></li><li><a href="http://www.geeksforgeeks.org/design-a-stack-with-find-middle-operation/" title="Design a stack with operations on middle element">Design a stack with operations on middle element</a></li><li><a href="http://www.geeksforgeeks.org/swap-kth-node-from-beginning-with-kth-node-from-end-in-a-linked-list/" title="Swap Kth node from beginning with Kth node from end in a Linked List">Swap Kth node from beginning with Kth node from end in a Linked List</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fxor-linked-list-a-memory-efficient-doubly-linked-list-set-1%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/xor-linked-list-a-memory-efficient-doubly-linked-list-set-1/" data-text="XOR Linked List &#8211; A Memory Efficient Doubly Linked List  | Set 1" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/xor-linked-list-a-memory-efficient-doubly-linked-list-set-1/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment byuser comment-author-devil even thread-even depth-1" id="dsq-comment-20726">
        <div id="dsq-comment-header-20726" class="dsq-comment-header">
            <cite id="dsq-cite-20726">
                <span id="dsq-author-user-20726">devil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20726" class="dsq-comment-body">
            <div id="dsq-comment-message-20726" class="dsq-comment-message"><p>Good havens, does anyone ever code in Java here. !crying</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20036">
        <div id="dsq-comment-header-20036" class="dsq-comment-header">
            <cite id="dsq-cite-20036">
                <span id="dsq-author-user-20036">subhin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20036" class="dsq-comment-body">
            <div id="dsq-comment-message-20036" class="dsq-comment-message"><p>Can any one publish java code of above program</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-devil even depth-2" id="dsq-comment-20727">
        <div id="dsq-comment-header-20727" class="dsq-comment-header">
            <cite id="dsq-cite-20727">
                <span id="dsq-author-user-20727">devil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20727" class="dsq-comment-body">
            <div id="dsq-comment-message-20727" class="dsq-comment-message"><p>Don&#8217;t worry. I am going to try and come up with it here. Hold on..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-devil odd alt depth-2" id="dsq-comment-20729">
        <div id="dsq-comment-header-20729" class="dsq-comment-header">
            <cite id="dsq-cite-20729">
                <span id="dsq-author-user-20729">devil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20729" class="dsq-comment-body">
            <div id="dsq-comment-message-20729" class="dsq-comment-message"><p><a href="http://cocoadev.com/wiki/DesignDoublyXORLinkedList" rel="nofollow">http://cocoadev.com/wiki/DesignDoublyXORLinkedList</a> Some explanation. Just incorporate this in your LL implementation.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8175">
        <div id="dsq-comment-header-8175" class="dsq-comment-header">
            <cite id="dsq-cite-8175">
                <span id="dsq-author-user-8175">Atul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8175" class="dsq-comment-body">
            <div id="dsq-comment-message-8175" class="dsq-comment-message"><p>Somehow I didn&#8217;t like the &#8220;node* next&#8221; in the given source code. Since it is the distance between the locations, why can&#8217;t it be a simple number? Hence I implemented following.</p>
<pre> <code language="C">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct node
{
  int val;
  unsigned int pnx;  /* prev, next ptr XOR'ed value */
} NODE;
NODE *head, *tail;

/* returns XORed value of the node addresses */
unsigned int XOR (NODE *a, NODE *b)
{
  return (unsigned int) ((unsigned int) (a) ^ (unsigned int) (b));
}

/*
 * When we add a new node, if it is a first node, pnx value is 0.
 * Interesting observations:
 * In case of first node, pnx value is always the address of next node.
 * In case of last node, pnx value is always the address of last-but-one node.
 */

NODE *add_node (int val)
{
  NODE *tmpNode = (NODE *) malloc (sizeof (NODE));
  tmpNode-&gt;val = val;

  /*
   * Now we have this node, we can update previous node's pnx value.
   *
   * If this is the first node, then ignore this step, as there is nothing
   * which we want to update.
   *
   * If this is not a first node, we have a previous node indeed, which is
   * pointed by the &quot;tail&quot; pointer. So update the pnx value of previous
   * node.
   */
  if (tail)
    tail-&gt;pnx = XOR ((NODE *) tail-&gt;pnx, tmpNode);

  /*
   * set pnx value of this node. We have a previous node, however the
   * next node will always be 0 (as we always insert a new node at end).
   * So as long as this node is the last node, pnx value will always be
   * the address of last node!
   */
  tmpNode-&gt;pnx = XOR (tail, (NODE *) 0);
  tail = tmpNode;

  if (tail) printf (&quot;prev pnx = %x  &quot;, tail-&gt;pnx);
  printf (&quot;this: %p node %d: pnx = %x\n&quot;, tmpNode, tmpNode-&gt;val, tmpNode-&gt;pnx);
  return (tmpNode);
}

void print_list (NODE *n)
{
  NODE *cur = n;
  NODE *prev = NULL;
  NODE *next;

  while (cur)
  {
    printf (&quot;this = %p data = %d. pnx = %x\n&quot;, cur, cur-&gt;val, cur-&gt;pnx);
    next = (NODE *) XOR (prev, (NODE *) cur-&gt;pnx);
    prev = cur;
    cur = next;
  }
}

int main (void)
{
  head = tail = 0;
  head = add_node (10);
  add_node (20);
  add_node (30);
  add_node (40);

  printf (&quot;\n\n&quot;);
  print_list (head);
  printf (&quot;\n\n&quot;);
  print_list (tail);
  return (0);
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7720">
        <div id="dsq-comment-header-7720" class="dsq-comment-header">
            <cite id="dsq-cite-7720">
                <span id="dsq-author-user-7720">Sudha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7720" class="dsq-comment-body">
            <div id="dsq-comment-message-7720" class="dsq-comment-message"><p>// Insertion, Deletion and Both direction traversal.</p>
<p>#include<br />
#include</p>
<p>struct node<br />
{<br />
	int num;<br />
	struct node *ptrdiff;<br />
};</p>
<p>void insert(struct node**,struct node**,struct node*,struct node*);<br />
void displayForward(struct node*,struct node*);<br />
void displayBackward(struct node*,struct node*);<br />
struct node* newnode(int);<br />
struct node *XOR(struct node *, struct node *);<br />
void delete_node(struct node **,struct node **,int);</p>
<p>int main()<br />
{<br />
	struct node *head,*prev,*tail;</p>
<p>	head=prev=tail=NULL;</p>
<p>	insert(&amp;head,&amp;tail,prev,newnode(23));<br />
	insert(&amp;head,&amp;tail,prev,newnode(13));<br />
	insert(&amp;head,&amp;tail,prev,newnode(33));<br />
	insert(&amp;head,&amp;tail,prev,newnode(32));<br />
	insert(&amp;head,&amp;tail,prev,newnode(3));<br />
	insert(&amp;head,&amp;tail,prev,newnode(73));<br />
	insert(&amp;head,&amp;tail,prev,newnode(53));<br />
	insert(&amp;head,&amp;tail,prev,newnode(63));<br />
	insert(&amp;head,&amp;tail,prev,newnode(2));<br />
	insert(&amp;head,&amp;tail,prev,newnode(12));</p>
<p>	printf(&#8220;\nFoward Traversal\n&#8221;);</p>
<p>	prev=NULL;<br />
	displayForward(head,prev);</p>
<p>	printf(&#8220;\nBackward Traversal\n&#8221;);</p>
<p>	prev=NULL;<br />
	displayBackward(tail,prev);</p>
<p>	delete_node(&amp;head,&amp;tail,2);<br />
	printf(&#8220;\nForward Traversal after Deletion\n&#8221;);</p>
<p>	prev=NULL;<br />
	displayForward(head,prev);</p>
<p>	printf(&#8220;\nBackward Traversal after Deletion\n&#8221;);</p>
<p>	prev=NULL;<br />
	displayForward(tail,prev);</p>
<p>	return 0;<br />
}</p>
<p>struct node* newnode(int value)<br />
{<br />
	struct node *np;<br />
	np=(struct node*)malloc(sizeof(struct node));<br />
	np-&gt;num=value;<br />
	np-&gt;ptrdiff=NULL;</p>
<p>	return np;<br />
}</p>
<p>void insert(struct node **head,struct node **tail,struct node *prev,struct node *np)<br />
{<br />
	struct node *current=*head,*prev_prev,*temp,*next;<br />
	if(*head==NULL)<br />
	{<br />
		np-&gt;ptrdiff=XOR(prev,NULL);<br />
		*head=np;<br />
		*tail=np;<br />
	}<br />
	else<br />
	{<br />
		if((*head)-&gt;num &gt; np-&gt;num)<br />
		{<br />
			next=XOR((*head)-&gt;ptrdiff,prev);<br />
			if(next==NULL)<br />
				*tail=*head;<br />
			(*head)-&gt;ptrdiff=XOR(np,next);<br />
			np-&gt;ptrdiff=XOR(NULL,(*head));<br />
			*head=np;<br />
		}<br />
		else<br />
		{<br />
			while(current!=NULL &amp;&amp; current-&gt;num num)<br />
			{<br />
				temp=current;<br />
				current=XOR(current-&gt;ptrdiff,prev);<br />
				prev=temp;<br />
			}<br />
			if(current==NULL)<br />
			{<br />
				prev_prev=XOR(prev-&gt;ptrdiff,current);<br />
				prev-&gt;ptrdiff=XOR(prev_prev,np);<br />
				np-&gt;ptrdiff=XOR(prev,NULL);<br />
				*tail=np;<br />
			}<br />
			else<br />
			{<br />
				prev_prev=XOR(prev-&gt;ptrdiff,current);<br />
				next=XOR(prev,current-&gt;ptrdiff);<br />
				prev-&gt;ptrdiff=XOR(prev_prev,np);<br />
				np-&gt;ptrdiff=XOR(prev,current);<br />
				current-&gt;ptrdiff=XOR(np,next);<br />
			}<br />
		}<br />
	}<br />
}</p>
<p>void delete_node(struct node **start,struct node **end,int value)<br />
{<br />
	struct node *current,*temp,*temp_next,*prev,*prev_prev,*cur_next_next;<br />
	current=*start;<br />
	prev=NULL;</p>
<p>	if(*start==NULL)<br />
	{<br />
		printf(&#8220;Deletion is not allowed.Becoz, list is Empty&#8221;);<br />
		return;<br />
	}</p>
<p>	if((*start)-&gt;num == value)<br />
	{<br />
		temp=XOR((*start)-&gt;ptrdiff,NULL);<br />
		if(temp==NULL)<br />
		{<br />
			printf(&#8220;\nThe only node has been deleted. Thus the list is empty&#8221;);<br />
			free((*start));<br />
			*start=*end=NULL;<br />
		}<br />
		else<br />
		{<br />
			temp_next=XOR(*start,temp-&gt;ptrdiff);<br />
			free((*start));<br />
			*start=temp;<br />
			(*start)-&gt;ptrdiff=XOR(temp_next,NULL);<br />
		}<br />
		return;<br />
	}<br />
	else<br />
	{<br />
		while(current!=NULL &amp;&amp; current-&gt;num != value)<br />
		{<br />
			temp=current;<br />
			current=XOR(current-&gt;ptrdiff,prev);<br />
			prev=temp;<br />
		}<br />
		if(current==NULL)<br />
		{<br />
			printf(&#8220;Sorry! node with %d value is not there in the list&#8221;,value);<br />
			return;<br />
		}<br />
		else<br />
		{<br />
			temp_next=XOR(current-&gt;ptrdiff,prev);<br />
			prev_prev=XOR(prev-&gt;ptrdiff,current);<br />
			if(temp_next==NULL)<br />
			{<br />
				prev-&gt;ptrdiff=XOR(prev_prev,NULL);<br />
				*end=prev;<br />
			}<br />
			else<br />
			{<br />
				cur_next_next=XOR(temp_next-&gt;ptrdiff,current);<br />
				prev-&gt;ptrdiff=XOR(prev_prev,temp_next);<br />
				temp_next-&gt;ptrdiff=XOR(prev,cur_next_next);<br />
			}</p>
<p>		}<br />
	}<br />
}</p>
<p>void displayForward(struct node *start, struct node *prev)<br />
{<br />
  if(start == NULL) return;</p>
<p>  printf(&#8220;%d\t&#8221;,start-&gt;num);<br />
  displayForward( XOR(start-&gt;ptrdiff, prev), start);<br />
}</p>
<p>void displayBackward(struct node *end, struct node *prev)<br />
{<br />
  if(end == NULL) return;</p>
<p>  printf(&#8220;%d\t&#8221;,end-&gt;num);<br />
  displayBackward( XOR(end-&gt;ptrdiff, prev), end);<br />
}</p>
<p>struct node *XOR(struct node *a, struct node *b)<br />
{<br />
	return (struct node *)((long long)(a)^(long long)(b));<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-21063">
        <div id="dsq-comment-header-21063" class="dsq-comment-header">
            <cite id="dsq-cite-21063">
                <span id="dsq-author-user-21063">code1234</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21063" class="dsq-comment-body">
            <div id="dsq-comment-message-21063" class="dsq-comment-message"><p>Works very well! Great, thanks! <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6327">
        <div id="dsq-comment-header-6327" class="dsq-comment-header">
            <cite id="dsq-cite-6327">
                <span id="dsq-author-user-6327">raj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6327" class="dsq-comment-body">
            <div id="dsq-comment-message-6327" class="dsq-comment-message"><pre> <code language="C"></code> </pre>
<p>/* */<br />
[#include<br />
#include<br />
typedef struct node<br />
{<br />
	int data;<br />
	struct node *npx;<br />
}node;<br />
void createlist(node **p)<br />
{<br />
	node *prev=NULL,*next,*current;<br />
	int i,j,n,x;<br />
	current=*p;<br />
	while(1)<br />
	{<br />
		printf(&#8220;\nWant to add a node then give 1 else 0 : &#8220;);<br />
		scanf(&#8220;%d&#8221;,&amp;n);<br />
		if(n!=1)<br />
		{<br />
			if(current==NULL)<br />
			{<br />
				current=malloc(sizeof(node));<br />
				printf(&#8220;\nGive node : &#8220;);<br />
				scanf(&#8220;%d&#8221;,&amp;current-&gt;data);<br />
				current-&gt;npx=NULL;<br />
				*p=current;<br />
			}<br />
			else<br />
			{<br />
				next=malloc(sizeof(node));<br />
				printf(&#8220;\nGive node : &#8220;);<br />
				scanf(&#8220;%d&#8221;,&amp;next-&gt;data);<br />
				next-&gt;npx=NULL;<br />
				//(node *)((long long)(a)^(long long)(b))<br />
				current-&gt;npx=(node *)((long long)(prev)^(long long)(next));<br />
				prev=current;<br />
				current=next;<br />
			}<br />
		}<br />
		else<br />
			break;<br />
	}</p>
<p>}<br />
void print(node *p)<br />
{<br />
	node *prev,*current;<br />
	prev=NULL;<br />
	current=p;<br />
	printf(&#8220;\nLinked list is : &#8220;);<br />
	while(p!=NULL)<br />
	{<br />
		printf(&#8220;%d\t&#8221;,p-&gt;data);<br />
		p=(node *)((long long)(prev)^(long long)(current-&gt;npx));<br />
		prev=current;<br />
		current=p;<br />
		if(prev-&gt;npx==NULL)<br />
			break;<br />
	}<br />
	printf(&#8220;\n&#8221;);<br />
}<br />
main()<br />
{<br />
	node *head=NULL;<br />
	createlist(&amp;head);<br />
	print(head);<br />
}<br />
]</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4853">
        <div id="dsq-comment-header-4853" class="dsq-comment-header">
            <cite id="dsq-cite-4853">
                <span id="dsq-author-user-4853">Yogesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4853" class="dsq-comment-body">
            <div id="dsq-comment-message-4853" class="dsq-comment-message"><p>But we always need the prev node address in order to traverse from a given node pointer. Its more like a single linked list where we rem the prev node of a current node ptr.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-kevindra odd alt thread-even depth-1" id="dsq-comment-4135">
        <div id="dsq-comment-header-4135" class="dsq-comment-header">
            <cite id="dsq-cite-4135">
http://shoutz.in                <span id="dsq-author-user-4135">kevindra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4135" class="dsq-comment-body">
            <div id="dsq-comment-message-4135" class="dsq-comment-message"><p>I think there is something wrong with formatting of code. It&#8217;s taking &#8220;&#8221; as &gt;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-4138">
        <div id="dsq-comment-header-4138" class="dsq-comment-header">
            <cite id="dsq-cite-4138">
                <span id="dsq-author-user-4138">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4138" class="dsq-comment-body">
            <div id="dsq-comment-message-4138" class="dsq-comment-message"><p>@kevindra: There seems to be some issue with formatting.  We will look into this issue.  As a temporary fix, we have updated the code with pre tags and the code is readable.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-kevindra odd alt thread-odd thread-alt depth-1" id="dsq-comment-4134">
        <div id="dsq-comment-header-4134" class="dsq-comment-header">
            <cite id="dsq-cite-4134">
http://shoutz.in                <span id="dsq-author-user-4134">kevindra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4134" class="dsq-comment-body">
            <div id="dsq-comment-message-4134" class="dsq-comment-message"><pre>
#include < iostream >

using namespace std;

struct node{
  int v;
  node *next;
};
node *start = NULL;
node *end = NULL;

node *newNode(int v){
  node *np = new node;
  np->v = v;
  np->next  = NULL;
  return np;
}

/** Returns the XOR of two Nodes **/
node *XOR(node *a, node *b){
  return (node *)((long long)(a)^(long long)(b));
}

void insert(node *current, node *prev, node *np){
  /* if linked list is empty */
  if(start == NULL){
    np->next = XOR(prev, NULL);
    start = np;
    end = np;
  }
  //end node of the linked list
  else if( XOR(prev, current->next) == NULL ){
    current->next = XOR(prev,np);
    np->next      = XOR(current, NULL);
    end = np;
  }
  else{ // move forward
    insert( XOR(prev, current->next), current, np);
  }
}

void displayForward(node *start, node *prev){
  if(start == NULL) return;

  cout< <start->v< <start->v< <" -> ";
  displayForward( XOR(start->next, prev), start);
}

void displayBackward(node *end, node *prev){
  if(end == NULL) return;

  cout< <start->v< <" -> ";
  displayBackward( XOR(end->next, prev), end);
}

int main(){
  int a[] = {1,2,3,4,5,6,7,8,9,10}, n = 10;

  for(int i=0; i < n; i++){
    node *prev = NULL;
    insert(start, prev, newNode(a[i]));
  }

  cout<<"Forward: \n";
  node *prev=NULL;
  displayForward(start, prev);

  cout<<"\nBackward: \n";
  displayForward(end, prev);
  return 0;
}

</pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-kevindra even thread-even depth-1" id="dsq-comment-4132">
        <div id="dsq-comment-header-4132" class="dsq-comment-header">
            <cite id="dsq-cite-4132">
http://shoutz.in                <span id="dsq-author-user-4132">kevindra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4132" class="dsq-comment-body">
            <div id="dsq-comment-message-4132" class="dsq-comment-message"><p>Here is the working code for insertion and traversal (both directions) in XOR linked list:</p>
<pre> <code language="CPP">

#include &lt;iostream&gt;

using namespace std;


struct node{
  int v;
  node *next;
};
node *start = NULL;
node *end = NULL;

node *newNode(int v){
  node *np = new node;
  np-&gt;v = v;
  np-&gt;next  = NULL;
  return np;
}

/** Returns the XOR of two Nodes **/
node *XOR(node *a, node *b){
  return (node *)((long long)(a)^(long long)(b));
}

void insert(node *current, node *prev, node *np){
  /** if linked list is empty **/
  if(start == NULL){
    np-&gt;next = XOR(prev, NULL); 
    start = np;
    end = np;
  }
  else if( XOR(prev, current-&gt;next) == NULL ){ //end node of the linked list
    current-&gt;next = XOR(prev,np);
    np-&gt;next      = XOR(current, NULL);
    end = np;
  }
  else{ // move forward
    insert( XOR(prev, current-&gt;next), current, np);
  }
}

void displayForward(node *start, node *prev){
  if(start == NULL) return;

  cout&lt;&lt;start-&gt;v&lt;&lt;&quot; -&gt; &quot;;
  displayForward( XOR(start-&gt;next, prev), start);
}

void displayBackward(node *end, node *prev){
  if(end == NULL) return;

  cout&lt;&lt;end-&gt;v&lt;&lt;&quot; -&gt; &quot;;
  displayBackward( XOR(end-&gt;next, prev), end);
}

int main(){
  int a[] = {1,2,3,4,5,6,7,8,9,10}, n = 10;

  for(int i=0; i&lt;n; i++){
    node *prev = NULL;
    insert(start, prev, newNode(a[i]));
  }

  cout&lt;&lt;&quot;Forward: \n&quot;;
  node *prev=NULL;
  displayForward(start, prev);

  cout&lt;&lt;&quot;\nBackward: \n&quot;;
  displayForward(end, prev);
  return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4129">
        <div id="dsq-comment-header-4129" class="dsq-comment-header">
            <cite id="dsq-cite-4129">
                <span id="dsq-author-user-4129">ktanay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4129" class="dsq-comment-body">
            <div id="dsq-comment-message-4129" class="dsq-comment-message"><p>//minor typo<br />
npx = add(A) XOR add(C) // bitwise XOR of address of A and address of B</p>
<p>// bitwise XOR of address of A and address of C</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-4130">
        <div id="dsq-comment-header-4130" class="dsq-comment-header">
            <cite id="dsq-cite-4130">
                <span id="dsq-author-user-4130">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4130" class="dsq-comment-body">
            <div id="dsq-comment-message-4130" class="dsq-comment-message"><p>@ktanay: Thanks for pointing this out.  We have corrected the typo.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-rajcools odd alt thread-even depth-1" id="dsq-comment-4128">
        <div id="dsq-comment-header-4128" class="dsq-comment-header">
            <cite id="dsq-cite-4128">
                <span id="dsq-author-user-4128">rajcools</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4128" class="dsq-comment-body">
            <div id="dsq-comment-message-4128" class="dsq-comment-message"><p>we are able to save memory but per node time of  execution is increasing!!!! time &#8211; space tradeoff</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4228">
        <div id="dsq-comment-header-4228" class="dsq-comment-header">
            <cite id="dsq-cite-4228">
                <span id="dsq-author-user-4228">kl</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4228" class="dsq-comment-body">
            <div id="dsq-comment-message-4228" class="dsq-comment-message"><p>struct b<br />
{<br />
int a;<br />
int b;<br />
};</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/xor-linked-list-a-memory-efficient-doubly-linked-list-set-1/';
var disqus_identifier = '12367 http://geeksforgeeks.org/?p=12367';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "XOR Linked List &#8211; A Memory Efficient Doubly Linked List  | Set 1";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.195 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:32:21 -->

<!-- Compression = gzip -->
<!-- super cache -->