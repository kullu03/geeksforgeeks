<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Depth First Traversal for a Graph - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Depth First Traversal for a Graph - GeeksforGeeks" />
<meta property="og:description" content="Depth First Traversal (or Search) for a graph is similar to Depth First Traversal of a tree. The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. For example, in the &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Graph" />
<meta property="article:section" content="Graph" />
<meta property="article:published_time" content="2012-03-15T08:26:31+00:00" />
<meta property="article:modified_time" content="2014-10-22T13:48:24+00:00" />
<meta property="og:updated_time" content="2014-10-22T13:48:24+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/DFS.jpg" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.591 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110767 14.139.122.114';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Depth First Traversal for a Graph</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p><a href="http://en.wikipedia.org/wiki/Depth-first_search">Depth First Traversal (or Search)</a> for a graph is similar to <a href="http://www.geeksforgeeks.org/archives/618">Depth First Traversal of a tree</a>.  The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. <span id="more-18212"></span><br />
For example, in the following graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0. If we don&#8217;t mark visited vertices, then 2 will be processed again and it will become a non-terminating process. Depth First Traversal of the following graph is 2, 0, 1, 3</p>
<p><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/DFS.jpg"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/DFS.jpg" alt="" title="DFS" width="422" height="181" class="aligncenter size-full wp-image-18349" /></a></p>
<p>See <a href="http://www.geeksforgeeks.org/archives/11644">this post</a> for all applications of Depth First Traversal.<br />
Following is C++ implementation of simple Depth First Traversal. The implementation uses <a href="http://en.wikipedia.org/wiki/Adjacency_list">adjacency list representation</a> of graphs. <a href="http://en.wikipedia.org/wiki/Standard_Template_Library">STL</a>&#8216;s <a href="http://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html#LIST">list container</a> is used to store lists of adjacent nodes.</p>
<pre class="brush: cpp; highlight: [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52]; title: ; notranslate" title="">
#include&lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

// Graph class represents a directed graph using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists
    void DFSUtil(int v, bool visited[]);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS(int v);    // DFS traversal of the vertices reachable from v
};

Graph::Graph(int V)
{
    this-&gt;V = V;
    adj = new list&lt;int&gt;[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v’s list.
}

void Graph::DFSUtil(int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
    cout &lt;&lt; v &lt;&lt; &quot; &quot;;

    // Recur for all the vertices adjacent to this vertex
    list&lt;int&gt;::iterator i;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
            DFSUtil(*i, visited);
}

// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()
void Graph::DFS(int v)
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for(int i = 0; i &lt; V; i++)
        visited[i] = false;

    // Call the recursive helper function to print DFS traversal
    DFSUtil(v, visited);
}

int main()
{
    // Create a graph given in the above diagram
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from vertex 2) \n&quot;;
    g.DFS(2);

    return 0;
}
</pre>
<p>Output:</p>
<pre>
Following is Depth First Traversal (starting from vertex 2)
2 0 1 3
</pre>
<p>Note that the above code traverses only the vertices reachable from a given source vertex. All the vertices may not be reachable from a given vertex (example Disconnected graph). To do complete DFS traversal of such graphs, we must call DFSUtil() for every vertex. Also, before calling DFSUtil(), we should check if it is already printed by some other call of DFSUtil().  Following implementation does the complete graph traversal even if the nodes are unreachable. The differences from the above code are highlighted in the below code.</p>
<pre class="brush: cpp; highlight: [13,40,41,42,43,44,45,46,47,48,49,50,51,52,53]; title: ; notranslate" title="">
#include&lt;iostream&gt;
#include &lt;list&gt;
using namespace std;

class Graph
{
    int V;    // No. of vertices
    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists
    void DFSUtil(int v, bool visited[]);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS();    // prints DFS traversal of the complete graph
};

Graph::Graph(int V)
{
    this-&gt;V = V;
    adj = new list&lt;int&gt;[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v’s list.
}

void Graph::DFSUtil(int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
    cout &lt;&lt; v &lt;&lt; &quot; &quot;;

    // Recur for all the vertices adjacent to this vertex
    list&lt;int&gt;::iterator i;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
            DFSUtil(*i, visited);
}

// The function to do DFS traversal. It uses recursive DFSUtil()
void Graph::DFS()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for(int i = 0; i &lt; V; i++)
        visited[i] = false;

    // Call the recursive helper function to print DFS traversal
    // starting from all vertices one by one
    for(int i = 0; i &lt; V; i++)
        if(visited[i] == false)
            DFSUtil(i, visited);
}

int main()
{
    // Create a graph given in the above diagram
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from vertex 0) \n&quot;;
    g.DFS();

    return 0;
}
</pre>
<p>Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph. </p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-1-introduction-approximate-algorithm-2/" title="Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)">Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/snake-ladder-problem-2/" title="Snake and Ladder Problem">Snake and Ladder Problem</a></li><li><a href="http://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/" title="Tarjan&#8217;s Algorithm to find Strongly Connected Components">Tarjan&#8217;s Algorithm to find Strongly Connected Components</a></li><li><a href="http://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/" title="Shortest path with exactly k edges in a directed and weighted graph">Shortest path with exactly k edges in a directed and weighted graph</a></li><li><a href="http://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/" title="Count all possible walks from a source to a destination with exactly k edges">Count all possible walks from a source to a destination with exactly k edges</a></li><li><a href="http://www.geeksforgeeks.org/euler-circuit-directed-graph/" title="Euler Circuit in a Directed Graph">Euler Circuit in a Directed Graph</a></li><li><a href="http://www.geeksforgeeks.org/given-array-strings-find-strings-can-chained-form-circle/" title="Given an array of strings, find if the strings can be chained to form a circle">Given an array of strings, find if the strings can be chained to form a circle</a></li><li><a href="http://www.geeksforgeeks.org/given-sorted-dictionary-find-precedence-characters/" title="Given a sorted dictionary of an alien language, find order of characters">Given a sorted dictionary of an alien language, find order of characters</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fdepth-first-traversal-for-a-graph%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" data-text="Depth First Traversal for a Graph" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-33315">
        <div id="dsq-comment-header-33315" class="dsq-comment-header">
            <cite id="dsq-cite-33315">
                <span id="dsq-author-user-33315">Gallon</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33315" class="dsq-comment-body">
            <div id="dsq-comment-message-33315" class="dsq-comment-message"><p>Non-recursive Implementation using STL stack</p>
<p><code></p>
<p>void Graph::DFSUtil(int v, bool visited[])</p>
<p>{</p>
<p>    // Mark the current node as visited and print it</p>
<p>    stack my_stack;</p>
<p>    cout&lt;&lt;v&lt;&lt;&quot; &quot;;</p>
<p>    visited[v] = true;</p>
<p>    my_stack.push(v);</p>
<p>    while(!my_stack.empty())</p>
<p>    {</p>
<p>        int top = my_stack.top();</p>
<p>        /* Value check if v has any unvisited neighbour (0 or 1) */</p>
<p>        bool no_unvisited_neighbour = true;</p>
<p>        for(auto iter = adj[top].begin(); iter!=adj[top].end(); iter++)</p>
<p>        {</p>
<p>            /* Found 1st unvisited adjacent node of v and push it to the stack */</p>
<p>            if(!visited[*iter])</p>
<p>            {   </p>
<p>                no_unvisited_neighbour = false;</p>
<p>                cout&lt;&lt;*iter&lt;&lt;&quot; &quot;;</p>
<p>                visited[*iter] = true;</p>
<p>                my_stack.push(*iter);</p>
<p>                break;</p>
<p>            }    </p>
<p>        }</p>
<p>        /* If v has no unvisited neighbours, pop it from the stack */</p>
<p>        if(no_unvisited_neighbour)</p>
<p>        {</p>
<p>            my_stack.pop();</p>
<p>        }</p>
<p>    }</p>
<p>}</p>
<p></code></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-33316">
        <div id="dsq-comment-header-33316" class="dsq-comment-header">
            <cite id="dsq-cite-33316">
                <span id="dsq-author-user-33316">Gallon</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33316" class="dsq-comment-body">
            <div id="dsq-comment-message-33316" class="dsq-comment-message"><p><code><br />
void Graph::DFSUtil(int v, bool visited[])</p>
<p>{</p>
<p>    // Mark the current node as visited and print it</p>
<p>    stack my_stack;</p>
<p>    cout&lt;&lt;v&lt;&lt;&quot; &quot;;</p>
<p>    visited[v] = true;</p>
<p>    my_stack.push(v);</p>
<p>    while(!my_stack.empty())</p>
<p>    {</p>
<p>        int top = my_stack.top();</p>
<p>        /* Value check if v has any unvisited neighbour (0 or 1) */</p>
<p>        bool no_unvisited_neighbour = true;</p>
<p>        for(auto iter = adj[top].begin(); iter!=adj[top].end(); iter++)</p>
<p>        {</p>
<p>            /* Found 1st unvisited adjacent node of v and push it to the stack */</p>
<p>            if(!visited[*iter])</p>
<p>            {   </p>
<p>                no_unvisited_neighbour = false;</p>
<p>                cout&lt;&lt;*iter&lt;&lt;&quot; &quot;;</p>
<p>                visited[*iter] = true;</p>
<p>                my_stack.push(*iter);</p>
<p>                break;</p>
<p>            }    </p>
<p>        }</p>
<p>        /* If v has no unvisited neighbours, pop it from the stack */</p>
<p>        if(no_unvisited_neighbour)</p>
<p>        {</p>
<p>            my_stack.pop();</p>
<p>        }</p>
<p>    }</p>
<p>}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-32090">
        <div id="dsq-comment-header-32090" class="dsq-comment-header">
            <cite id="dsq-cite-32090">
                <span id="dsq-author-user-32090">Well</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32090" class="dsq-comment-body">
            <div id="dsq-comment-message-32090" class="dsq-comment-message"><p>How to implement it in NON-recursive approach?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29560">
        <div id="dsq-comment-header-29560" class="dsq-comment-header">
            <cite id="dsq-cite-29560">
                <span id="dsq-author-user-29560">khushal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29560" class="dsq-comment-body">
            <div id="dsq-comment-message-29560" class="dsq-comment-message"><p>cyclic graph won&#8217;t have topological order. your code doesn&#8217;t say a word if graph is cyclic</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27468">
        <div id="dsq-comment-header-27468" class="dsq-comment-header">
            <cite id="dsq-cite-27468">
                <span id="dsq-author-user-27468">Alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27468" class="dsq-comment-body">
            <div id="dsq-comment-message-27468" class="dsq-comment-message"><p>/*</p>
<p>C program for DFS traversal of a graph where graph is presented using Adjacency Matrix</p>
<p>*/</p>
<p>#include</p>
<p>#define V 5</p>
<p>void dfsUtil(int graph[V][V], int visited[], int v)</p>
<p>{</p>
<p>	visited[v] = 1;</p>
<p>	printf(&#8220;nvertex: %d&#8221;,v);</p>
<p>	int i;</p>
<p>	// DFS search for each connected component</p>
<p>	for(i=0;i&lt;V;i++)</p>
<p>	{</p>
<p>		// call DFS recursively, if there is path from vertex v to vertex i and vertex i has not been visited yet</p>
<p>		if(graph[v][i] != 0 &amp;&amp; visited[i] ==0)</p>
<p>		{</p>
<p>			dfsUtil(graph,visited,i);</p>
<p>		}</p>
<p>	}</p>
<p>}</p>
<p>void dfs(int graph[V][V], int visited[])</p>
<p>{</p>
<p>	int i;</p>
<p>	// check for each connected component </p>
<p>	for(i=0;i&lt;V;i++)</p>
<p>	{</p>
<p>		if(visited[i] != 1)</p>
<p>			dfsUtil(graph,visited,i);</p>
<p>	}</p>
<p>}</p>
<p>int main()</p>
<p>{</p>
<p>/*</p>
<p>	2 connected components</p>
<p>	1&#8212;&#8212;-5  4</p>
<p>	|	/	|   </p>
<p>	2&#8212;&#8212;-3</p>
<p>*/</p>
<p>	int graph[V][V] = {{0,1,0,0,1},{1,0,1,0,1},{0,1,0,0,1},{0,0,0,0,0},{1,1,1,0,0}};</p>
<p>	int visited[V] = {0};</p>
<p>	dfs(graph,visited);</p>
<p>	return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27467">
        <div id="dsq-comment-header-27467" class="dsq-comment-header">
            <cite id="dsq-cite-27467">
                <span id="dsq-author-user-27467">Alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27467" class="dsq-comment-body">
            <div id="dsq-comment-message-27467" class="dsq-comment-message"><p>/*</p>
<p>C program for DFS traversal of a graph where graph is presented using Adjacency list</p>
<p>*/</p>
<p>#include </p>
<p>#include </p>
<p>// A structure to represent an adjacency list node</p>
<p>struct AdjListNode </p>
<p>{</p>
<p>	int vertex_num;</p>
<p>	struct AdjListNode *next;</p>
<p>};</p>
<p>// A structure to represent an adjacency list</p>
<p>struct AdjList</p>
<p>{</p>
<p>	struct AdjListNode *head;</p>
<p>};</p>
<p>// A structure to represent a graph. A graph is an array of adjacency lists.</p>
<p>// Size of array will be V (number of vertices in graph)</p>
<p>struct Graph</p>
<p>{</p>
<p>	int noofvertex;</p>
<p>	struct AdjList* array;</p>
<p>};</p>
<p>// A utility function to create a new adjacency list node</p>
<p>struct AdjListNode* newAdjListNode(int v)</p>
<p>{</p>
<p>	struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));</p>
<p>	newNode-&gt;vertex_num = v;</p>
<p>	newNode-&gt;next = NULL;</p>
<p>	return newNode;</p>
<p>}</p>
<p>// A utility function that creates a graph of V vertices</p>
<p>struct Graph* createGraph(int n)</p>
<p>{</p>
<p>	int i;</p>
<p>	struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));</p>
<p>	graph-&gt;noofvertex = n;</p>
<p>	// Create an array of adjacency lists.  Size of array will be n</p>
<p>	graph-&gt;array = (struct AdjList*)malloc(n * sizeof(struct AdjList));</p>
<p>	// Initialize each adjacency list as empty by making head as NULL</p>
<p>	for(i=0;iarray[i].head = NULL;</p>
<p>	}</p>
<p>	return graph;</p>
<p>}</p>
<p>// Adds an edge to an undirected graph</p>
<p>void addEdge(struct Graph *graph, int src, int dest)</p>
<p>{</p>
<p>	// Add an edge from src to dest.  A new node is added to the adjacency</p>
<p>    // list of src.  The node is added at the begining</p>
<p>	struct AdjListNode* newNode = newAdjListNode(dest);</p>
<p>	newNode-&gt;next = graph-&gt;array[src].head;</p>
<p>	graph-&gt;array[src].head = newNode;</p>
<p>	// Since graph is undirected, add an edge from dest to src also</p>
<p>    newNode = newAdjListNode(src);</p>
<p>    newNode-&gt;next = graph-&gt;array[dest].head;</p>
<p>    graph-&gt;array[dest].head = newNode;</p>
<p>}</p>
<p>// A utility function to print the adjacenncy list representation of graph</p>
<p>void printGraph(struct Graph* graph)</p>
<p>{</p>
<p>    int v;</p>
<p>    for (v = 0; v noofvertex; ++v)</p>
<p>    {</p>
<p>        struct AdjListNode* pCrawl = graph-&gt;array[v].head;</p>
<p>        printf(&#8220;n Adjacency list of vertex %dn head &#8220;, v);</p>
<p>        while (pCrawl)</p>
<p>        {</p>
<p>            printf(&#8220;-&gt; %d&#8221;, pCrawl-&gt;vertex_num);</p>
<p>            pCrawl = pCrawl-&gt;next;</p>
<p>        }</p>
<p>        printf(&#8220;n&#8221;);</p>
<p>    }</p>
<p>}</p>
<p>void dfsUtil(struct Graph *graph, int visited[], int v)</p>
<p>{</p>
<p>	int i;</p>
<p>	int n = graph-&gt;noofvertex;</p>
<p>	visited[v] = 1;</p>
<p>	printf(&#8220;n Vertex: %d&#8221;,v);</p>
<p>	struct AdjListNode* pCrawl = graph-&gt;array[v].head;</p>
<p>	// TRAP: Not same as matrix representation</p>
<p>	// check the adjacents of current node has been visited or not. If not, call DFSUtil again</p>
<p>	while(pCrawl != NULL)</p>
<p>	{</p>
<p>		if(visited[pCrawl-&gt;vertex_num] == 0)</p>
<p>			dfsUtil(graph,visited,pCrawl-&gt;vertex_num);</p>
<p>		pCrawl = pCrawl-&gt;next;</p>
<p>	}</p>
<p>}</p>
<p>void dfs(struct Graph *graph, int visited[])</p>
<p>{</p>
<p>	int i;</p>
<p>	int n = graph-&gt;noofvertex;</p>
<p>	// for each connected component</p>
<p>	for(i=0;i&lt;n;i++)</p>
<p>	{</p>
<p>		if(visited[i] == 0)</p>
<p>			dfsUtil(graph,visited,i);</p>
<p>	}</p>
<p>}</p>
<p>int main()</p>
<p>{</p>
<p>/*</p>
<p>	2 connected components</p>
<p>	1&#8212;&#8212;-5  4</p>
<p>	|	/	|   </p>
<p>	2&#8212;&#8212;-3</p>
<p>*/</p>
<p>	// create the graph given in above fugure</p>
<p>    int V = 5;</p>
<p>	int visited[5] = {0};</p>
<p>    struct Graph* graph = createGraph(V);</p>
<p>    addEdge(graph, 0, 1);</p>
<p>    addEdge(graph, 0, 4);</p>
<p>    addEdge(graph, 1, 2);</p>
<p>    addEdge(graph, 1, 3);</p>
<p>    addEdge(graph, 1, 4);</p>
<p>    addEdge(graph, 2, 3);</p>
<p>    addEdge(graph, 3, 4);</p>
<p>    // print the adjacency list representation of the above graph</p>
<p>	dfs(graph,visited);</p>
<p>   // printGraph(graph);</p>
<p>	return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27345">
        <div id="dsq-comment-header-27345" class="dsq-comment-header">
            <cite id="dsq-cite-27345">
                <span id="dsq-author-user-27345">Vijay Apurva</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27345" class="dsq-comment-body">
            <div id="dsq-comment-message-27345" class="dsq-comment-message"><p>here is the code in  C </p>
<p>#include<br />
#include</p>
<p>struct gnode{<br />
int data ;<br />
struct gnode * next ;<br />
};</p>
<p>struct adnode{<br />
struct gnode * top ;<br />
};</p>
<p>struct graph{<br />
int v;<br />
struct adnode * array ;<br />
};</p>
<p>struct graph * createGraph(int v){<br />
 struct graph * g = (struct graph *)malloc(sizeof(struct graph));<br />
 g-&gt;v=v;<br />
 g-&gt;array=(struct adnode *)malloc(v*sizeof(struct adnode));<br />
 int i;<br />
 for(i=0;iarray[i].top=NULL;</p>
<p> return g;<br />
}</p>
<p>struct gnode * add(int data){<br />
struct gnode * temp = (struct gnode *)malloc(sizeof(struct gnode));<br />
temp-&gt;data=data;<br />
temp-&gt;next=NULL;<br />
return temp;<br />
}</p>
<p>void addEdge(struct graph * g , int src, int dest){</p>
<p>struct gnode * temp = add(dest);<br />
  temp-&gt;next=g-&gt;array[src].top;<br />
   g-&gt;array[src].top=temp;<br />
}</p>
<p>void dfsUtil(struct graph * g , int visit[] , int x){</p>
<p>         visit[x]=1 ;<br />
       printf(&#8220;%d  &#8220;,x);<br />
     struct gnode * temp = g-&gt;array[x].top;</p>
<p>  while(temp!=NULL){<br />
     if(visit[temp-&gt;data]==0)<br />
        dfsUtil( g,visit,temp-&gt;data);<br />
        temp=temp-&gt;next;<br />
  }<br />
}</p>
<p>void dfs(struct graph *g){<br />
    int i;<br />
    int visit[g-&gt;v];</p>
<p>    for(i=0;iv;i++)<br />
      visit[i]=0;</p>
<p>printf(&#8221;  dfs traversal of a graph is  n n &#8220;);</p>
<p>    for(i=0;iv;i++){<br />
        if(visit[i]==0)<br />
        dfsUtil(g , visit , i);<br />
     }<br />
}</p>
<p>void  main(){<br />
int v = 4;<br />
    struct graph* g = createGraph(v);<br />
    addEdge(g,0, 1);<br />
    addEdge(g,0, 2);<br />
    addEdge(g,1, 2);<br />
    addEdge(g,2, 0);<br />
    addEdge(g,2, 3);<br />
    addEdge(g,3, 3);<br />
    dfs(g);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-dhruv18 odd alt thread-even depth-1" id="dsq-comment-20158">
        <div id="dsq-comment-header-20158" class="dsq-comment-header">
            <cite id="dsq-cite-20158">
                <span id="dsq-author-user-20158">dhruv18</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20158" class="dsq-comment-body">
            <div id="dsq-comment-message-20158" class="dsq-comment-message"><p>@jayanta you have just ensured that output is printed from different starting point but what about making sure that whole graph is printed when it is a disconnected graph?<br />
i think 2nd code is for printing whole graph but in your different connected component will be printed.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-avanee even thread-odd thread-alt depth-1" id="dsq-comment-17184">
        <div id="dsq-comment-header-17184" class="dsq-comment-header">
            <cite id="dsq-cite-17184">
                <span id="dsq-author-user-17184">avanee</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17184" class="dsq-comment-body">
            <div id="dsq-comment-message-17184" class="dsq-comment-message"><p>//program for dfs<br />
#include<br />
#include<br />
using namespace std;<br />
int edgei_j[100][100],n;<br />
int visited[1000];<br />
void dfs(int);<br />
stack stk;<br />
int main()<br />
{   </p>
<p>	int i,j,m,tops;<br />
	scanf(&#8220;%d %d&#8221;,&amp;n,&amp;m);<br />
	for(i=0;i&lt;m;i++)<br />
	{<br />
		scanf(&quot;%d %d&quot;,&amp;i,&amp;j);<br />
		edgei_j[i][j]=1;<br />
	}<br />
	stk.push(0);<br />
	visited[0]=1;<br />
	while(!stk.empty())<br />
	{</p>
<p>		tops=stk.top();<br />
		dfs(tops);<br />
	}<br />
	}<br />
void dfs(int tops)<br />
{</p>
<p>	int i,x;<br />
		for(i=0;i&lt;n;i++)<br />
		{<br />
			if(edgei_j[tops][i]==1&amp;&amp;visited[i]!=1)<br />
			{<br />
				visited[i]=0;<br />
				stk.push(i);<br />
				dfs(i);<br />
			}<br />
		}<br />
	if(i==n)<br />
	{<br />
	x=stk.top();<br />
	cout&lt;&lt;x&lt;&lt;endl;<br />
	stk.pop();<br />
	}</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-avanee odd alt thread-even depth-1" id="dsq-comment-17183">
        <div id="dsq-comment-header-17183" class="dsq-comment-header">
            <cite id="dsq-cite-17183">
                <span id="dsq-author-user-17183">avanee</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17183" class="dsq-comment-body">
            <div id="dsq-comment-message-17183" class="dsq-comment-message"><p>//simple imlementation for dfs<br />
#include<br />
#include<br />
using namespace std;<br />
int edgei_j[100][100],n;<br />
int visited[1000];<br />
void dfs(int);<br />
stack stk;<br />
int main()<br />
{   </p>
<p>	int i,j,m,tops;<br />
	scanf(&#8220;%d %d&#8221;,&amp;n,&amp;m);<br />
	for(i=0;i&lt;m;i++)<br />
	{<br />
		scanf(&quot;%d %d&quot;,&amp;i,&amp;j);<br />
		edgei_j[i][j]=1;<br />
	}<br />
	stk.push(0);<br />
	visited[0]=1;<br />
	while(!stk.empty())<br />
	{</p>
<p>		tops=stk.top();<br />
		dfs(tops);<br />
	}<br />
	}<br />
void dfs(int tops)<br />
{</p>
<p>	int i,x;<br />
		for(i=0;i&lt;n;i++)<br />
		{<br />
			if(edgei_j[tops][i]==1&amp;&amp;visited[i]!=1)<br />
			{<br />
				visited[i]=0;<br />
				stk.push(i);<br />
				dfs(i);<br />
			}<br />
		}<br />
	if(i==n)<br />
	{<br />
	x=stk.top();<br />
	cout&lt;&lt;x&lt;&lt;endl;<br />
	stk.pop();<br />
	}</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-amitmac2 even thread-odd thread-alt depth-1" id="dsq-comment-16815">
        <div id="dsq-comment-header-16815" class="dsq-comment-header">
            <cite id="dsq-cite-16815">
                <span id="dsq-author-user-16815">amitmac2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16815" class="dsq-comment-body">
            <div id="dsq-comment-message-16815" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;conio.h&gt;
int time;
struct node
{	
	int color;
	int parent;
	int key;
    int dest;
    struct node* next;	//next pointer
	struct node* head;	//head pointer
};
struct graph
{
    int v;	//number of vertices
    struct node* array;	//array of all vertices
};
struct node* createNode(int dest)	//create new node
{
    struct node* newnode=(struct node*)malloc(sizeof(struct node));	//allocating memory
    newnode-&gt;dest=dest;	//dest is the next vertex which is pointed
    newnode-&gt;next=NULL; 
    return newnode;
}
struct graph* createGraph(int v)		//creating adjacency list
{
    struct graph* g=(struct graph*)malloc(sizeof(struct graph));
    g-&gt;v=v;	//v is number of vertices
    g-&gt;array=(struct node*)malloc(v*sizeof(struct node));	//allocating memory for the array of v vertices
    for(int i=0;i&lt;v;i++)	
    {	//initializing the adjacency list
		g-&gt;array[i].head=NULL;
		g-&gt;array[i].key=i;
	}
    return g;
}
void addEdge(struct graph* g,int src,int dest)	//adding node to the adjacency list
{
    struct node* newnode=createNode(dest);	//creating new node pointing to 'dest' vertex
    newnode-&gt;next=g-&gt;array[src].head;	//next pointer of newnode points to the head of src vertex
    g-&gt;array[src].head=newnode;	//adding in the beginning of list
    newnode=createNode(src);	//for undirected graphs both vertex point each other
    newnode-&gt;next=g-&gt;array[dest].head;
    g-&gt;array[dest].head=newnode;
}
void dfsVisit(struct graph* g,struct node* u)
{
    time++;
	u-&gt;color=1; //color of vertex is changed
	struct node* p=u;	
	while(p!=NULL)
    {
        p=p-&gt;next; 
		if(p-&gt;color==0)
		{
			p-&gt;parent = u-&gt;key;	//parent of p is given the key of u as u--&gt;p
			dfsVisit(g,p);	//recursing
		}
    }
	u-&gt;color=2;
	printf(&quot;%d &quot;,u-&gt;key);	//printing the vertex key
	time++;
}
void dfs(struct graph* g)
{
    int v=g-&gt;v; //v contains the number of vertices in graph
    for(int i=0;i&lt;v;i++)
    {
		g-&gt;array[i].color=0; //initializing color and parent property
		g-&gt;array[i].parent=-1;
    }
    time=0;
    for(int i=0;i&lt;v;i++)
		if( g-&gt;array[i].color==0 ) //if i'th vertex not visited call dfs visit
			dfsVisit(g,&amp;g-&gt;array[i]);
}
int main()
{
	int v = 4;
    struct graph* g = createGraph(v);
    addEdge(g,0, 1);
    addEdge(g,0, 2);
    addEdge(g,1, 2);
    addEdge(g,2, 0);
    addEdge(g,2, 3);
    addEdge(g,3, 3);
	dfs(g);
	getch();
	return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-amitmac2 odd alt depth-2" id="dsq-comment-16816">
        <div id="dsq-comment-header-16816" class="dsq-comment-header">
            <cite id="dsq-cite-16816">
                <span id="dsq-author-user-16816">amitmac2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16816" class="dsq-comment-body">
            <div id="dsq-comment-message-16816" class="dsq-comment-message"><p>there is error in above program&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-16382">
        <div id="dsq-comment-header-16382" class="dsq-comment-header">
            <cite id="dsq-cite-16382">
                <span id="dsq-author-user-16382">AAZ</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16382" class="dsq-comment-body">
            <div id="dsq-comment-message-16382" class="dsq-comment-message"><p>How is complexity O(V+E) ?<br />
Don&#8217;t we have one for loop inside DFSUtil Function call which is itself inside for loop ? Shouldn&#8217;t it be O(VE) ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10281">
        <div id="dsq-comment-header-10281" class="dsq-comment-header">
            <cite id="dsq-cite-10281">
                <span id="dsq-author-user-10281">Jayanta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10281" class="dsq-comment-body">
            <div id="dsq-comment-message-10281" class="dsq-comment-message"><p>// Pasted the modified (correct) dfs code.</p>
<pre> <code language="C">
#include&lt;iostream&gt;
#include &lt;list&gt;
 
using namespace std;
 
class Graph
{
    int V;    // No. of vertices
    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists
    void DFSUtil(int v, bool visited[]);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS();    // prints DFS traversal of the complete graph
};
 
Graph::Graph(int V)
{
    this-&gt;V = V;
    adj = new list&lt;int&gt;[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v’s list.
}
 
void Graph::DFSUtil(int v, bool visited[])
{
    if(visited[v] == false)
    {
       // Mark the current node as visited and print it
       visited[v] = true;
       cout &lt;&lt; v &lt;&lt; &quot; &quot;;
 
       // Recur for all the vertices adjacent to this vertex
       list&lt;int&gt;::iterator i;
       for(i = adj[v].begin(); i != adj[v].end(); ++i)
           if(!visited[*i])
              DFSUtil(*i, visited);
    }
}
 
// The function to do DFS traversal. It uses recursive DFSUtil()
void Graph::DFS()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
 
    // Call the recursive helper function to print DFS traversal
    // starting from all vertices one by one
    for(int i = 0; i &lt; V; i++)
    {
    	for(int i1 = 0; i1 &lt; V; i1++)
        	visited[i1] = false;

	cout&lt;&lt;endl&lt;&lt;&quot;DFS starting from node: &quot;&lt;&lt; i&lt;&lt; &quot;. :&quot;&lt;&lt; endl;
        DFSUtil(i, visited);
    }
}

int main()
{
    // Create a graph given in the above diagram
    Graph g(4);

    g.addEdge(0, 1);
//    g.addEdge(0, 2);
  //  g.addEdge(1, 2);
//    g.addEdge(2, 0);
    g.addEdge(2, 3);
//    g.addEdge(3, 3); 
    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from all vertices) \n&quot;;
    g.DFS();
 
    return 0;
}


</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-10905">
        <div id="dsq-comment-header-10905" class="dsq-comment-header">
            <cite id="dsq-cite-10905">
http://www.geeksforgeeks.org/archives/18212                <span id="dsq-author-user-10905">deep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10905" class="dsq-comment-body">
            <div id="dsq-comment-message-10905" class="dsq-comment-message"><p>@Jayanta you are right </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-3" id="dsq-comment-15687">
        <div id="dsq-comment-header-15687" class="dsq-comment-header">
            <cite id="dsq-cite-15687">
                <span id="dsq-author-user-15687">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15687" class="dsq-comment-body">
            <div id="dsq-comment-message-15687" class="dsq-comment-message"><p>@Jayanta and @deep:  could you please let us know the problem with the code given in above post?  In below comment, you mentioned that the given code will print &#8220;0 1 2 3&#8243; for given graph. Isn&#8217;t &#8220;0 1 2 3&#8243; correct output? Please let me know if my understanding is incorrect.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10280">
        <div id="dsq-comment-header-10280" class="dsq-comment-header">
            <cite id="dsq-cite-10280">
                <span id="dsq-author-user-10280">Jayanta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10280" class="dsq-comment-body">
            <div id="dsq-comment-message-10280" class="dsq-comment-message"><p>The second code for visiting all nodes in DFS() is wrong as it does not set false to visited[v] ever.</p>
<p>For the following main() it will also print 0 1 2 3.</p>
<p>int main()<br />
{<br />
    // Create a graph given in the above diagram<br />
    Graph g(4);<br />
    g.addEdge(0, 1);<br />
    g.addEdge(2, 3);</p>
<p>    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from vertex 2) \n&quot;;<br />
    g.DFS();</p>
<p>    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8232">
        <div id="dsq-comment-header-8232" class="dsq-comment-header">
            <cite id="dsq-cite-8232">
                <span id="dsq-author-user-8232">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8232" class="dsq-comment-body">
            <div id="dsq-comment-message-8232" class="dsq-comment-message"><p>Iterative DFS, looking for an efficient implementation.</p>
<p>I know an explicit stack can be used. One way is, use explicit stack, and keep pushing all the adjacent nodes while exploring each path node in unexplored path. Following this approach, in the worst case, explicit stack will have all the adjacent nodes in the longest path of a node in graph.</p>
<p>Where as in recursive approach, the system stack will have max nodes proportional to the depth of the longest node.</p>
<p>Any thoughts? I am thinking to keep track of visited node and current exploring node in it&#8217;s adjacent list. In other words, mitigating system stack functionality by storing stack frame explicitly.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-8233">
        <div id="dsq-comment-header-8233" class="dsq-comment-header">
            <cite id="dsq-cite-8233">
                <span id="dsq-author-user-8233">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8233" class="dsq-comment-body">
            <div id="dsq-comment-message-8233" class="dsq-comment-message"><p>Here is pseudo code,</p>
<pre> <code language="C">
dfs(source)
    stack.push(source)
    v = stack.top()
 
    while( stack not empty )
        stack.pop()
        visited[v] = true
 
        for( each x in G.ADJ(v) )
            if( !visited[x] )
                stack.push(x)
 
        v = stack.top()
        while( (stack not empty) AND (v is visited) )
            v = stack.top()
            stack.pop()
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-18908">
        <div id="dsq-comment-header-18908" class="dsq-comment-header">
            <cite id="dsq-cite-18908">
                <span id="dsq-author-user-18908">Sreenivas Doosa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18908" class="dsq-comment-body">
            <div id="dsq-comment-message-18908" class="dsq-comment-message"><p>The following is the code for DFS Iterative&#8230;</p>
<p>import java.util.ArrayList;<br />
import java.util.Stack;</p>
<p>public class Graph {</p>
<p>	private int V; // no of vertices<br />
	private ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj; // adjacency list</p>
<p>	public Graph(int V) {</p>
<p>		this.V = V;<br />
		this.adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);<br />
		for(int i = 0; i &lt; V; i++) {<br />
			this.adj.add(new ArrayList&lt;Integer&gt;());<br />
		}<br />
	}</p>
<p>	public void addEdge(int u, int v) {</p>
<p>		adj.get(u).add(v); // adding v to array list u<br />
	}</p>
<p>	public void DFSIterative(int v) {</p>
<p>		System.out.print(&quot;DFS Iterative &#8211;&gt; &quot;);<br />
		// use stack and visited array<br />
		boolean visited[] = new boolean[V];<br />
		for(int i = 0; i &lt; visited.length; i++) {<br />
			visited[i] = false;<br />
		}</p>
<p>		Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();<br />
		stack.push(v);<br />
		visited[v] = true;<br />
		System.out.print(v + &quot; &quot;);</p>
<p>		while(!stack.isEmpty()) {</p>
<p>			int top = stack.peek();<br />
			// check if the top element has any unvisited nodes<br />
			int child = getNextUnvisitedChild(top, visited);<br />
			if(child == -1) {<br />
				// no more unvisited childs hence pop it<br />
				stack.pop();<br />
			} else {<br />
				stack.push(child);<br />
				visited[child] = true;<br />
				System.out.print(child + &quot; &quot;);<br />
			}<br />
		}<br />
		System.out.println();<br />
	}</p>
<p>	private int getNextUnvisitedChild(int v, boolean visited[]) {</p>
<p>		for(int i = 0; i &lt; adj.get(v).size(); i++) {</p>
<p>			if(visited[adj.get(v).get(i)] == false) {<br />
				return adj.get(v).get(i);<br />
			}<br />
		}<br />
		return -1;<br />
	}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-7810">
        <div id="dsq-comment-header-7810" class="dsq-comment-header">
            <cite id="dsq-cite-7810">
                <span id="dsq-author-user-7810">atul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7810" class="dsq-comment-body">
            <div id="dsq-comment-message-7810" class="dsq-comment-message"><p>inside main() , it should be<br />
for(int i = 0; i &lt; V; i++)<br />
 g.DFS(i);</p>
<p>because we need to  check added if graph has more than one component.<br />
as question does not mention that we need to find all nodes which are reachable from given node.</p>
<p>/* Paste your code here (You may delete these lines if not writing code) */</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-7811">
        <div id="dsq-comment-header-7811" class="dsq-comment-header">
            <cite id="dsq-cite-7811">
                <span id="dsq-author-user-7811">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7811" class="dsq-comment-body">
            <div id="dsq-comment-message-7811" class="dsq-comment-message"><p>@atul: Thanks for pointing this out. We have added a new version of the code that does DFS traversal of the complete graph.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7809">
        <div id="dsq-comment-header-7809" class="dsq-comment-header">
            <cite id="dsq-cite-7809">
                <span id="dsq-author-user-7809">Marc</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7809" class="dsq-comment-body">
            <div id="dsq-comment-message-7809" class="dsq-comment-message"><p>how would I find the recursive complexity and how to solve it for the DFS ?</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-7812">
        <div id="dsq-comment-header-7812" class="dsq-comment-header">
            <cite id="dsq-cite-7812">
                <span id="dsq-author-user-7812">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7812" class="dsq-comment-body">
            <div id="dsq-comment-message-7812" class="dsq-comment-message"><p>@Marc: The function <em>DFSUtil </em>runs for all adjacent vertices of all the vertices in a given graph.  Total count of adjacent vertices is equal to Theta(E). So total time complexity will be Theta(V+E)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/';
var disqus_identifier = '18212 http://www.geeksforgeeks.org/?p=18212';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Depth First Traversal for a Graph";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.211 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:22:47 -->

<!-- Compression = gzip -->
<!-- super cache -->