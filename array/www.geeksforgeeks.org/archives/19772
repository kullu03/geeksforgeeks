<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Dynamic Programming | Set 16 (Floyd Warshall Algorithm) - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Dynamic Programming | Set 16 (Floyd Warshall Algorithm) - GeeksforGeeks" />
<meta property="og:description" content="The Floyd Warshall Algorithm is for solving the All Pairs Shortest Path problem. The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph. Example: Input: graph[][] = { {0, 5, INF, 10}, {INF, 0, 3, INF}, {INF, INF, 0, 1}, {INF, INF, INF, 0} } which &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Dynamic Programming" />
<meta property="article:tag" content="Graph" />
<meta property="article:section" content="Graph" />
<meta property="article:published_time" content="2012-06-07T22:45:20+00:00" />
<meta property="article:modified_time" content="2014-02-09T19:36:33+00:00" />
<meta property="og:updated_time" content="2014-02-09T19:36:33+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/Floyd-Warshell1.jpg" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.483 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110795 14.139.122.114';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Dynamic Programming | Set 16 (Floyd Warshall Algorithm)</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>The <a href="http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd Warshall Algorithm</a> is for solving the All Pairs Shortest Path problem. The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph. <span id="more-19772"></span></p>
<p>Example:</p>
<pre>
<strong>Input:</strong>
       graph[][] = { {0,   5,  INF, 10},
                    {INF,  0,  3,  INF},
                    {INF, INF, 0,   1},
                    {INF, INF, INF, 0} }
which represents the following graph
             10
       (0)------->(3)
        |         /|\
      5 |          |
        |          | 1
       \|/         |
       (1)------->(2)
            3       
Note that the value of graph[i][j] is 0 if i is equal to j 
And graph[i][j] is INF (infinite) if there is no edge from vertex i to j.

<strong>Output:</strong>
Shortest distance matrix
      0      5      8      9
    INF      0      3      4
    INF    INF      0      1
    INF    INF    INF      0 
</pre>
<p><strong>Floyd Warshall Algorithm</strong><br />
We initialize the solution matrix same as the input graph matrix as a first step. Then we update the solution matrix by considering all vertices as an intermediate vertex. The idea is to one by one pick all vertices and update all shortest paths which include the picked vertex as an intermediate vertex in the shortest path. When we pick vertex number k as an intermediate vertex, we already have considered vertices {0, 1, 2, .. k-1} as intermediate vertices. For every pair (i, j) of source and destination vertices respectively, there are two possible cases.<br />
<strong>1)</strong> k is not an intermediate vertex in shortest path from i to j. We keep the value of dist[i][j] as it is.<br />
<strong>2)</strong> k is an intermediate vertex in shortest path from i to j. We update the value of dist[i][j] as dist[i][k] + dist[k][j].</p>
<p>The following figure is taken from the Cormen book. It shows the above optimal substructure property in the all-pairs shortest path problem.</p>
<p><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/Floyd-Warshell1.jpg"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/Floyd-Warshell1.jpg" alt="" title="Floyd Warshell" width="450" height="120" class="aligncenter size-full wp-image-19793" /></a></p>
<p>Following is C implementation of the Floyd Warshall algorithm.</p>
<pre class="brush: cpp; highlight: [14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53]; title: ; notranslate" title="">
// Program for Floyd Warshall Algorithm
#include&lt;stdio.h&gt;

// Number of vertices in the graph
#define V 4

/* Define Infinite as a large enough value. This value will be used
  for vertices not connected to each other */
#define INF 99999

// A function to print the solution matrix
void printSolution(int dist[][V]);

// Solves the all-pairs shortest path problem using Floyd Warshall algorithm
void floydWarshell (int graph[][V])
{
    /* dist[][] will be the output matrix that will finally have the shortest 
      distances between every pair of vertices */
    int dist[V][V], i, j, k;

    /* Initialize the solution matrix same as input graph matrix. Or 
       we can say the initial values of shortest distances are based
       on shortest paths considering no intermediate vertex. */
    for (i = 0; i &lt; V; i++)
        for (j = 0; j &lt; V; j++)
            dist[i][j] = graph[i][j];

    /* Add all vertices one by one to the set of intermediate vertices.
      ---&gt; Before start of a iteration, we have shortest distances between all
      pairs of vertices such that the shortest distances consider only the
      vertices in set {0, 1, 2, .. k-1} as intermediate vertices.
      ----&gt; After the end of a iteration, vertex no. k is added to the set of
      intermediate vertices and the set becomes {0, 1, 2, .. k} */
    for (k = 0; k &lt; V; k++)
    {
        // Pick all vertices as source one by one
        for (i = 0; i &lt; V; i++)
        {
            // Pick all vertices as destination for the
            // above picked source
            for (j = 0; j &lt; V; j++)
            {
                // If vertex k is on the shortest path from
                // i to j, then update the value of dist[i][j]
                if (dist[i][k] + dist[k][j] &lt; dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    // Print the shortest distance matrix
    printSolution(dist);
}

/* A utility function to print solution */
void printSolution(int dist[][V])
{
    printf (&quot;Following matrix shows the shortest distances&quot;
            &quot; between every pair of vertices \n&quot;);
    for (int i = 0; i &lt; V; i++)
    {
        for (int j = 0; j &lt; V; j++)
        {
            if (dist[i][j] == INF)
                printf(&quot;%7s&quot;, &quot;INF&quot;);
            else
                printf (&quot;%7d&quot;, dist[i][j]);
        }
        printf(&quot;\n&quot;);
    }
}

// driver program to test above function
int main()
{
    /* Let us create the following weighted graph
            10
       (0)-------&gt;(3)
        |         /|\
      5 |          |
        |          | 1
       \|/         |
       (1)-------&gt;(2)
            3           */
    int graph[V][V] = { {0,   5,  INF, 10},
                        {INF, 0,   3, INF},
                        {INF, INF, 0,   1},
                        {INF, INF, INF, 0}
                      };

    // Print the solution
    floydWarshell(graph);
    return 0;
}
</pre>
<p>Output:
<pre>
Following matrix shows the shortest distances between every pair of vertices
      0      5      8      9
    INF      0      3      4
    INF    INF      0      1
    INF    INF    INF      0
</pre>
<p>Time Complexity: O(V^3)</p>
<p>The above program only prints the shortest distances. We can modify the solution to print the shortest paths also by storing the predecessor information in a separate 2D matrix.<br />
Also, the value of INF can be taken as INT_MAX from limits.h to make sure that we handle maximum possible value. When we take INF as INT_MAX, we need to change the if condition in the above program to avoid arithmatic overflow.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;limits.h&gt;

#define INF INT_MAX
..........................
if (dist[i][k] != INF &amp;&amp; dist[k][j] != INF &amp;&amp; dist[i][k] + dist[k][j] &lt; dist[i][j])
    dist[i][j] = dist[i][k] + dist[k][j];
...........................
</pre>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-1-introduction-approximate-algorithm-2/" title="Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)">Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/snake-ladder-problem-2/" title="Snake and Ladder Problem">Snake and Ladder Problem</a></li><li><a href="http://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/" title="Tarjan&#8217;s Algorithm to find Strongly Connected Components">Tarjan&#8217;s Algorithm to find Strongly Connected Components</a></li><li><a href="http://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/" title="Shortest path with exactly k edges in a directed and weighted graph">Shortest path with exactly k edges in a directed and weighted graph</a></li><li><a href="http://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/" title="Count all possible walks from a source to a destination with exactly k edges">Count all possible walks from a source to a destination with exactly k edges</a></li><li><a href="http://www.geeksforgeeks.org/euler-circuit-directed-graph/" title="Euler Circuit in a Directed Graph">Euler Circuit in a Directed Graph</a></li><li><a href="http://www.geeksforgeeks.org/given-array-strings-find-strings-can-chained-form-circle/" title="Given an array of strings, find if the strings can be chained to form a circle">Given an array of strings, find if the strings can be chained to form a circle</a></li><li><a href="http://www.geeksforgeeks.org/given-sorted-dictionary-find-precedence-characters/" title="Given a sorted dictionary of an alien language, find order of characters">Given a sorted dictionary of an alien language, find order of characters</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/" rel="tag">Dynamic Programming</a>, <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fdynamic-programming-set-16-floyd-warshall-algorithm%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/" data-text="Dynamic Programming | Set 16 (Floyd Warshall Algorithm)" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34463">
        <div id="dsq-comment-header-34463" class="dsq-comment-header">
            <cite id="dsq-cite-34463">
                <span id="dsq-author-user-34463">Mohamad</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34463" class="dsq-comment-body">
            <div id="dsq-comment-message-34463" class="dsq-comment-message"><p>Hey guys,</p>
<p>Here&#8217;s an implementation of Floyd-Warshall algorithm in C++ which finds the minimum weights along with the actual paths</p>
<p><a href="http://cs-and-design.blogspot.com/2014/04/floyd-warshall-algorithm.html" rel="nofollow">http://cs-and-design.blogspot.com/2014/04/floyd-warshall-algorithm.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32906">
        <div id="dsq-comment-header-32906" class="dsq-comment-header">
            <cite id="dsq-cite-32906">
                <span id="dsq-author-user-32906">nickpsar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32906" class="dsq-comment-body">
            <div id="dsq-comment-message-32906" class="dsq-comment-message"><p>thanks guys!!! </p>
<p>now with this example i can say that i finally managed to fill up all the blanks about floyd warshall algorithm. But&#8230;&#8230;&#8230;&#8230;hmm</p>
<p>How can modify the code If i want in the solution graph to change all the distances up to 2 with 1 and all the other with 0 (sorry i forgot to say that my graph has weight 1 for each edge) ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30230">
        <div id="dsq-comment-header-30230" class="dsq-comment-header">
            <cite id="dsq-cite-30230">
                <span id="dsq-author-user-30230">Sanidhya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30230" class="dsq-comment-body">
            <div id="dsq-comment-message-30230" class="dsq-comment-message"><p>Can you please code one to find the actual path taken by the above algorithm to calculate the shortest path, need it to implement Chinese Postman</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29749">
        <div id="dsq-comment-header-29749" class="dsq-comment-header">
            <cite id="dsq-cite-29749">
                <span id="dsq-author-user-29749">praveen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29749" class="dsq-comment-body">
            <div id="dsq-comment-message-29749" class="dsq-comment-message"><p>can i get the path by this algorithm</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-29754">
        <div id="dsq-comment-header-29754" class="dsq-comment-header">
            <cite id="dsq-cite-29754">
                <span id="dsq-author-user-29754">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29754" class="dsq-comment-body">
            <div id="dsq-comment-message-29754" class="dsq-comment-message"><p>Yes, you can get path.  You need to maintain chosen k in a separate 2D array.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29486">
        <div id="dsq-comment-header-29486" class="dsq-comment-header">
            <cite id="dsq-cite-29486">
                <span id="dsq-author-user-29486">viki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29486" class="dsq-comment-body">
            <div id="dsq-comment-message-29486" class="dsq-comment-message"><p>Changing the loop as below also gives the same solution:</p>
<p>for (i = 0; i &lt; V; i++)</p>
<p>    {</p>
<p>        // Pick all vertices as source one by one</p>
<p>        for (j = 0; j &lt; V; j++)</p>
<p>        {</p>
<p>            // Pick all vertices as destination for the</p>
<p>            // above picked source</p>
<p>            for (k = 0; k &lt; V; k++)</p>
<p>            {</p>
<p>                // If vertex k is on the shortest path from</p>
<p>                // i to j, then update the value of dist[i][j]</p>
<p>                if (dist[i][k] + dist[k][j] &lt; dist[i][j])</p>
<p>                    dist[i][j] = dist[i][k] + dist[k][j];</p>
<p>            }</p>
<p>        }</p>
<p>    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28156">
        <div id="dsq-comment-header-28156" class="dsq-comment-header">
            <cite id="dsq-cite-28156">
                <span id="dsq-author-user-28156">rahul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28156" class="dsq-comment-body">
            <div id="dsq-comment-message-28156" class="dsq-comment-message"><p>&#8220;The above program only prints the shortest distances. We can modify the solution to print the shortest paths also by storing the predecessor information in a separate 2D matrix.&#8221;<br />
Is there a difference between shortest path and shortest distance here?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-17743">
        <div id="dsq-comment-header-17743" class="dsq-comment-header">
            <cite id="dsq-cite-17743">
                <span id="dsq-author-user-17743">prashanth h r</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17743" class="dsq-comment-body">
            <div id="dsq-comment-message-17743" class="dsq-comment-message"><p>write a c program to check whether 2 words are anagrams using dynamic programming i.e. the words TEA and EAT are anagrams</p>
<p>can any one solve this and post it here</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33698">
        <div id="dsq-comment-header-33698" class="dsq-comment-header">
            <cite id="dsq-cite-33698">
                <span id="dsq-author-user-33698">h</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33698" class="dsq-comment-body">
            <div id="dsq-comment-message-33698" class="dsq-comment-message"><p>that is just an LCS problem . find out LCS . if LCS== length of array. then anagram</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17357">
        <div id="dsq-comment-header-17357" class="dsq-comment-header">
            <cite id="dsq-cite-17357">
                <span id="dsq-author-user-17357">code1101</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17357" class="dsq-comment-body">
            <div id="dsq-comment-message-17357" class="dsq-comment-message"><pre> <code language="Java">
    public static int[][] getAllShortestPath(int[][] graph)  {
        int N = graph.length;
        for(int i=0; i&lt;N; i++) {
            for(int j=i+1; j&lt;N; j++) {
                // INF is a large value
                if(graph[i][j] != INF) {
                    for(int k=j+1; k&lt;N; k++) {
                        if(graph[i][k] &gt; graph[i][j] + graph[j][k]) {
                            graph[i][k] = graph[i][j] + graph[j][k];
                        }
                    }
                }
            }
        }
        return graph;
    }
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-9262">
        <div id="dsq-comment-header-9262" class="dsq-comment-header">
            <cite id="dsq-cite-9262">
                <span id="dsq-author-user-9262">lohith</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9262" class="dsq-comment-body">
            <div id="dsq-comment-message-9262" class="dsq-comment-message"><pre> <code language="C">
import java.util.ArrayList;
import java.util.HashMap;

public class FloydWarshallsAlgorithm {

	public static int INF = 999;

	public static void main(String str[]) {

		int path[][] = { { 0, 5, INF, 10 }, { INF, 0, 3, INF },
				{ INF, INF, 0, 1 }, { INF, INF, INF, 0 } };

		ArrayList&lt;Integer&gt; visited = new ArrayList&lt;Integer&gt;();
		
		for(int i=0;i&lt;4;i++){
			for(int j=0;j&lt;4;j++)
				System.out.println(i+1+&quot;  to  &quot;+(j+1) +&quot;  =  &quot;+shortestPath(i,j,path,visited));
		}
	}

	public static int shortestPath(int start, int dest, int[][] path,ArrayList&lt;Integer&gt; visited) {
		
		if(AlreadyCalculatedd.Has(start, dest)){
			return AlreadyCalculatedd.get(start, dest);
		}

		if (start == dest)
			return 0;
		
		int minimum = 999;
		for (int i = 0; i &lt; path[start].length; i++) {
			
			
			if (path[start][i] != INF  &amp;&amp; !visited.contains(new Integer(i)) ) {
				
				Integer in =new Integer(i);
				visited.add(in);
				int v = path[start][i] + shortestPath(i, dest, path,visited);
				visited.remove(in);
				if (minimum &gt; v)
					minimum = v;
			}
		}

		AlreadyCalculatedd.put(start,dest,minimum);
		return minimum;

	}
}




class AlreadyCalculatedd{
	
	public static HashMap h = new HashMap();
	
	public static boolean Has(int start,int end){
		
	return	h.containsKey(&quot;&quot;+start+&quot;&quot;+end);
		
	}
	
	
	public static int get(int start,int end){
		
		return (Integer) h.get(&quot;&quot;+start+&quot;&quot;+end);
		
	}
	
	
	public static void put(int start,int end,int value){
		h.put(&quot;&quot;+start+&quot;&quot;+end, value);
	}
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9261">
        <div id="dsq-comment-header-9261" class="dsq-comment-header">
            <cite id="dsq-cite-9261">
                <span id="dsq-author-user-9261">lohith</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9261" class="dsq-comment-body">
            <div id="dsq-comment-message-9261" class="dsq-comment-message"><p>import java.util.ArrayList;<br />
import java.util.HashMap;</p>
<p>public class FloydWarshallsAlgorithm {</p>
<p>	public static int INF = 999;</p>
<p>	public static void main(String str[]) {</p>
<p>		int path[][] = { { 0, 5, INF, 10 }, { INF, 0, 3, INF },<br />
				{ INF, INF, 0, 1 }, { INF, INF, INF, 0 } };</p>
<p>		ArrayList&lt;Integer&gt; visited = new ArrayList&lt;Integer&gt;();</p>
<p>		for(int i=0;i&lt;4;i++){<br />
			for(int j=0;j&lt;4;j++)<br />
				System.out.println(i+1+&quot;  to  &quot;+(j+1) +&quot;  =  &quot;+shortestPath(i,j,path,visited));<br />
		}<br />
	}</p>
<p>	public static int shortestPath(int start, int dest, int[][] path,ArrayList&lt;Integer&gt; visited) {</p>
<p>		if(AlreadyCalculatedd.Has(start, dest)){<br />
			return AlreadyCalculatedd.get(start, dest);<br />
		}</p>
<p>		if (start == dest)<br />
			return 0;</p>
<p>		int minimum = 999;<br />
		for (int i = 0; i &lt; path[start].length; i++) {</p>
<p>			if (path[start][i] != INF  &amp;&amp; !visited.contains(new Integer(i)) ) {</p>
<p>				Integer in =new Integer(i);<br />
				visited.add(in);<br />
				int v = path[start][i] + shortestPath(i, dest, path,visited);<br />
				visited.remove(in);<br />
				if (minimum &gt; v)<br />
					minimum = v;<br />
			}<br />
		}</p>
<p>		AlreadyCalculatedd.put(start,dest,minimum);<br />
		return minimum;</p>
<p>	}<br />
}</p>
<p>class AlreadyCalculatedd{</p>
<p>	public static HashMap h = new HashMap();</p>
<p>	public static boolean Has(int start,int end){</p>
<p>	return	h.containsKey(&quot;&quot;+start+&quot;&quot;+end);</p>
<p>	}</p>
<p>	public static int get(int start,int end){</p>
<p>		return (Integer) h.get(&quot;&quot;+start+&quot;&quot;+end);</p>
<p>	}</p>
<p>	public static void put(int start,int end,int value){<br />
		h.put(&quot;&quot;+start+&quot;&quot;+end, value);<br />
	}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8912">
        <div id="dsq-comment-header-8912" class="dsq-comment-header">
            <cite id="dsq-cite-8912">
                <span id="dsq-author-user-8912">marti</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8912" class="dsq-comment-body">
            <div id="dsq-comment-message-8912" class="dsq-comment-message"><p>can you please explain why the k-loop is not the innermost out of the 3 loops?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-8938">
        <div id="dsq-comment-header-8938" class="dsq-comment-header">
            <cite id="dsq-cite-8938">
                <span id="dsq-author-user-8938">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8938" class="dsq-comment-body">
            <div id="dsq-comment-message-8938" class="dsq-comment-message"><p>If we make k-loop as the innermost loop, then the code will not follow the optimal substructure property shown in the diagram. The main idea for puttink k-loop outside is following:<br />
When we include vertex number k to the intermediate set, we must have shortest distance between every pair of vertex such that the shortest distances consider vertices from the set {0, 1, .. k-1} as intermediate vertices.<br />
If we make the k-loop innermost, then we won&#8217;t have the above mentioned values available before the start of a iteration.<br />
Let me know if you still have doubts.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-8941">
        <div id="dsq-comment-header-8941" class="dsq-comment-header">
            <cite id="dsq-cite-8941">
                <span id="dsq-author-user-8941">amrit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8941" class="dsq-comment-body">
            <div id="dsq-comment-message-8941" class="dsq-comment-message"><p>okay , this is how i understand it. we are considering k=1 the first time, then k=1,2 then k=1,2,3 etc , this is the optimal substructure and hence the code&#8230;am i right?</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/';
var disqus_identifier = '19772 http://www.geeksforgeeks.org/?p=19772';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Dynamic Programming | Set 16 (Floyd Warshall Algorithm)";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.189 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:23:15 -->

<!-- Compression = gzip -->
<!-- super cache -->