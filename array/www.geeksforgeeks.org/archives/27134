<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Graph and its representations - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/graph-and-its-representations/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Graph and its representations - GeeksforGeeks" />
<meta property="og:description" content="Graph is a data structure that consists of following two components: 1. A finite set of vertices also called as nodes. 2. A finite set of ordered pair of the form (u, v) called as edge. The pair is ordered because (u, v) is not same as (v, u) in case of directed graph(di-graph). The &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/graph-and-its-representations/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Graph" />
<meta property="article:section" content="Graph" />
<meta property="article:published_time" content="2012-11-13T22:43:34+00:00" />
<meta property="article:modified_time" content="2014-02-09T19:29:59+00:00" />
<meta property="og:updated_time" content="2014-02-09T19:29:59+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/graph_representation12.png" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/adjacency_matrix_representation.png" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/adjacency_list_representation.png" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.485 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110872 139.190.57.184';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Graph and its representations</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Graph is a data structure that consists of following two components:<br />
<strong>1.</strong> A finite set of vertices also called as nodes.<br />
<strong>2.</strong> A finite set of ordered pair of the form (u, v) called as edge.<span id="more-27134"></span><!--more--> The pair is ordered because (u, v) is not same as (v, u) in case of directed graph(di-graph). The pair of form (u, v) indicates that there is an edge from vertex u to vertex v. The edges may contain weight/value/cost.</p>
<p>Graphs are used to represent many real life applications: Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network. Graphs are also used in social networks like linkedIn, facebook. For example, in facebook, each person is represented with a vertex(or node). Each node is a structure and contains information like person id, name, gender and locale. This can be easily viewed by <a href="http://graph.facebook.com/barnwal.aashish">http://graph.facebook.com/barnwal.aashish</a> where barnwal.aashish is the profile name.  See <a href="http://en.wikipedia.org/wiki/Graph_theory#Applications">this </a>for more applications of graph. </p>
<p>Following is an example undirected graph with 5 vertices.<br />
<a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/graph_representation12.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/graph_representation12.png" alt="" title="graph_representation1" width="179" height="139" class="aligncenter size-full wp-image-27196" /></a></p>
<p>Following two are the most commonly used representations of graph.<br />
<strong>1.</strong> Adjacency Matrix<br />
<strong>2.</strong> Adjacency List<br />
There are other representations also like, Incidence Matrix and Incidence List. The choice of the graph representation is situation specific. It totally depends on the type of operations to be performed and ease of use. </p>
<p><strong>Adjacency Matrix:</strong><br />
Adjacency Matrix is a 2D array of size V x V where V is the number of vertices in a graph. Let the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j. Adjacency matrix for undirected graph is always symmetric. Adjacency Matrix is also used to represent weighted graphs. If adj[i][j] = w, then there is an edge from vertex i to vertex j with weight w.</p>
<p>The adjacency matrix for the above example graph is:<br />
<div id="attachment_27188" style="width: 185px" class="wp-caption aligncenter"><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/adjacency_matrix_representation.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/adjacency_matrix_representation.png" alt="Adjacency Matrix Representation" title="adjacency_matrix_representation" width="175" height="172" class="size-full wp-image-27188" /></a><p class="wp-caption-text">Adjacency Matrix Representation of the above graph</p></div></p>
<p><em>Pros:</em> Representation is easier to implement and follow. Removing an edge takes O(1) time. Queries like whether there is an edge from vertex &#8216;u&#8217; to vertex &#8216;v&#8217; are efficient and can be done O(1).</p>
<p><em>Cons:</em> Consumes more space O(V^2). Even if the graph is sparse(contains less number of edges), it consumes the same space. Adding a vertex is O(V^2) time.</p>
<p></br><br />
<strong>Adjacency List:</strong><br />
An array of linked lists is used. Size of the array is equal to number of vertices. Let the array be array[]. An entry array[i] represents the linked list of vertices adjacent to the<strong> <em>i</em></strong>th vertex. This representation can also be used to represent a weighted graph. The weights of edges can be stored in nodes of linked lists. Following is adjacency list representation of the above graph. </p>
<div id="attachment_27189" style="width: 344px" class="wp-caption aligncenter"><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/adjacency_list_representation.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/adjacency_list_representation.png" alt="Adjacency List Representation of Graph" title="adjacency_list_representation" width="334" height="160" class="size-full wp-image-27189" /></a><p class="wp-caption-text">Adjacency List Representation of the above Graph</p></div>
<p>Below is C code for adjacency list representation of an undirected graph:</p>
<pre class="brush: cpp; highlight: [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]; title: ; notranslate" title="">
// A C Program to demonstrate adjacency list representation of graphs

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

// A structure to represent an adjacency list node
struct AdjListNode
{
    int dest;
    struct AdjListNode* next;
};

// A structure to represent an adjacency liat
struct AdjList
{
    struct AdjListNode *head;  // pointer to head node of list
};

// A structure to represent a graph. A graph is an array of adjacency lists.
// Size of array will be V (number of vertices in graph)
struct Graph
{
    int V;
    struct AdjList* array;
};

// A utility function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode-&gt;dest = dest;
    newNode-&gt;next = NULL;
    return newNode;
}

// A utility function that creates a graph of V vertices
struct Graph* createGraph(int V)
{
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph-&gt;V = V;

    // Create an array of adjacency lists.  Size of array will be V
    graph-&gt;array = (struct AdjList*) malloc(V * sizeof(struct AdjList));

     // Initialize each adjacency list as empty by making head as NULL
    int i;
    for (i = 0; i &lt; V; ++i)
        graph-&gt;array[i].head = NULL;

    return graph;
}

// Adds an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest)
{
    // Add an edge from src to dest.  A new node is added to the adjacency
    // list of src.  The node is added at the begining
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode-&gt;next = graph-&gt;array[src].head;
    graph-&gt;array[src].head = newNode;

    // Since graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode-&gt;next = graph-&gt;array[dest].head;
    graph-&gt;array[dest].head = newNode;
}

// A utility function to print the adjacenncy list representation of graph
void printGraph(struct Graph* graph)
{
    int v;
    for (v = 0; v &lt; graph-&gt;V; ++v)
    {
        struct AdjListNode* pCrawl = graph-&gt;array[v].head;
        printf(&quot;\n Adjacency list of vertex %d\n head &quot;, v);
        while (pCrawl)
        {
            printf(&quot;-&gt; %d&quot;, pCrawl-&gt;dest);
            pCrawl = pCrawl-&gt;next;
        }
        printf(&quot;\n&quot;);
    }
}

// Driver program to test above functions
int main()
{
    // create the graph given in above fugure
    int V = 5;
    struct Graph* graph = createGraph(V);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    // print the adjacency list representation of the above graph
    printGraph(graph);

    return 0;
}
</pre>
<p>Output:</p>
<pre>
 Adjacency list of vertex 0
 head -> 4-> 1

 Adjacency list of vertex 1
 head -> 4-> 3-> 2-> 0

 Adjacency list of vertex 2
 head -> 3-> 1

 Adjacency list of vertex 3
 head -> 4-> 2-> 1

 Adjacency list of vertex 4
 head -> 3-> 1-> 0</pre>
<p><em>Pros:</em> Saves space  O(|V|+|E|) . In the worst case, there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space. Adding a vertex is easier.</p>
<p><em>Cons:</em> Queries like whether there is an edge from vertex u to vertex v are not efficient and can be done O(V).</p>
<p>Reference:<br />
<a href="http://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29">http://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29</a></p>
<p>This article is compiled by <a href="https://www.facebook.com/barnwal.aashish">Aashish Barnwal</a> and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-1-introduction-approximate-algorithm-2/" title="Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)">Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/snake-ladder-problem-2/" title="Snake and Ladder Problem">Snake and Ladder Problem</a></li><li><a href="http://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/" title="Tarjan&#8217;s Algorithm to find Strongly Connected Components">Tarjan&#8217;s Algorithm to find Strongly Connected Components</a></li><li><a href="http://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/" title="Shortest path with exactly k edges in a directed and weighted graph">Shortest path with exactly k edges in a directed and weighted graph</a></li><li><a href="http://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/" title="Count all possible walks from a source to a destination with exactly k edges">Count all possible walks from a source to a destination with exactly k edges</a></li><li><a href="http://www.geeksforgeeks.org/euler-circuit-directed-graph/" title="Euler Circuit in a Directed Graph">Euler Circuit in a Directed Graph</a></li><li><a href="http://www.geeksforgeeks.org/given-array-strings-find-strings-can-chained-form-circle/" title="Given an array of strings, find if the strings can be chained to form a circle">Given an array of strings, find if the strings can be chained to form a circle</a></li><li><a href="http://www.geeksforgeeks.org/given-sorted-dictionary-find-precedence-characters/" title="Given a sorted dictionary of an alien language, find order of characters">Given a sorted dictionary of an alien language, find order of characters</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fgraph-and-its-representations%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/graph-and-its-representations/" data-text="Graph and its representations" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/graph-and-its-representations/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34651">
        <div id="dsq-comment-header-34651" class="dsq-comment-header">
            <cite id="dsq-cite-34651">
                <span id="dsq-author-user-34651">Himanshu Dagar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34651" class="dsq-comment-body">
            <div id="dsq-comment-message-34651" class="dsq-comment-message"><p>very simple implementation and easy implementation of above code in c++</p>
<p>i wrote it at below link : </p>
<p><a href="http://ideone.com/klAAwE" rel="nofollow">http://ideone.com/klAAwE</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34218">
        <div id="dsq-comment-header-34218" class="dsq-comment-header">
            <cite id="dsq-cite-34218">
                <span id="dsq-author-user-34218">deba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34218" class="dsq-comment-body">
            <div id="dsq-comment-message-34218" class="dsq-comment-message"><p>why array[i].head?? why not array[i]-&gt;head!! please Explain</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-34576">
        <div id="dsq-comment-header-34576" class="dsq-comment-header">
            <cite id="dsq-cite-34576">
                <span id="dsq-author-user-34576">Isha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34576" class="dsq-comment-body">
            <div id="dsq-comment-message-34576" class="dsq-comment-message"><p>g-&gt;array[i] represents the structure AdjList not the pointer to structure AdjList. In the later case, the graph structure would have to be like this:<br />
struct Graph<br />
{<br />
    int V;<br />
    struct AdjList** array;<br />
};<br />
Pointer(it denotes the array of) to pointer to AdjList.<br />
As g-&gt;array[i] refers to the structure AdjList not to the  pointer to structure AdjList, hence we access it using dot operator.<br />
Hope it helps.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-34174">
        <div id="dsq-comment-header-34174" class="dsq-comment-header">
            <cite id="dsq-cite-34174">
                <span id="dsq-author-user-34174">dagar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34174" class="dsq-comment-body">
            <div id="dsq-comment-message-34174" class="dsq-comment-message"><p>(Y)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-34173">
        <div id="dsq-comment-header-34173" class="dsq-comment-header">
            <cite id="dsq-cite-34173">
                <span id="dsq-author-user-34173">himanshu dagar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34173" class="dsq-comment-body">
            <div id="dsq-comment-message-34173" class="dsq-comment-message"><p>good artical</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-33903">
        <div id="dsq-comment-header-33903" class="dsq-comment-header">
            <cite id="dsq-cite-33903">
                <span id="dsq-author-user-33903">Zheng Luo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33903" class="dsq-comment-body">
            <div id="dsq-comment-message-33903" class="dsq-comment-message"><p>I think there is also another representation called the object and pointers. It is very like the adjacent list though.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33804">
        <div id="dsq-comment-header-33804" class="dsq-comment-header">
            <cite id="dsq-cite-33804">
                <span id="dsq-author-user-33804">Sanket</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33804" class="dsq-comment-body">
            <div id="dsq-comment-message-33804" class="dsq-comment-message"><p>Why do we need a pointer to the graph and then dynamically allocate memory to it? We can do by using a simple structure object of struct graph instead.. <a href="https://ideone.com/ZZ17Yq" rel="nofollow">https://ideone.com/ZZ17Yq</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-33813">
        <div id="dsq-comment-header-33813" class="dsq-comment-header">
            <cite id="dsq-cite-33813">
                <span id="dsq-author-user-33813">Anzal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33813" class="dsq-comment-body">
            <div id="dsq-comment-message-33813" class="dsq-comment-message"><p>It is more convenient to make changes in your structure when u pass them through pointers</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-33814">
        <div id="dsq-comment-header-33814" class="dsq-comment-header">
            <cite id="dsq-cite-33814">
                <span id="dsq-author-user-33814">Anzal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33814" class="dsq-comment-body">
            <div id="dsq-comment-message-33814" class="dsq-comment-message"><p>It is more convenient to make changes in your structure when u pass them through pointers</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-33803">
        <div id="dsq-comment-header-33803" class="dsq-comment-header">
            <cite id="dsq-cite-33803">
                <span id="dsq-author-user-33803">Sanket</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33803" class="dsq-comment-body">
            <div id="dsq-comment-message-33803" class="dsq-comment-message"><p>Why do we need a pointer to the graph and then dynamically allocate memory to it? We can do by using a simple structure object of struct graph instead.. <a href="https://ideone.com/ZZ17Yq" rel="nofollow">https://ideone.com/ZZ17Yq</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33074">
        <div id="dsq-comment-header-33074" class="dsq-comment-header">
            <cite id="dsq-cite-33074">
                <span id="dsq-author-user-33074">xyz</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33074" class="dsq-comment-body">
            <div id="dsq-comment-message-33074" class="dsq-comment-message"><p>Scribd is more better option<br />
<a href="http://www.scribd.com/doc/6139772/Graph-Implementation-Using-Linked-List" rel="nofollow">http://www.scribd.com/doc/6139772/Graph-Implementation-Using-Linked-List</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31224">
        <div id="dsq-comment-header-31224" class="dsq-comment-header">
            <cite id="dsq-cite-31224">
                <span id="dsq-author-user-31224">abhatnag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31224" class="dsq-comment-body">
            <div id="dsq-comment-message-31224" class="dsq-comment-message"><p>More efficient code in C++ using classes<br />
<a href="http://ideone.com/ih7CQl" rel="nofollow">http://ideone.com/ih7CQl</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33253">
        <div id="dsq-comment-header-33253" class="dsq-comment-header">
            <cite id="dsq-cite-33253">
                <span id="dsq-author-user-33253">Anonymous bin Ich</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33253" class="dsq-comment-body">
            <div id="dsq-comment-message-33253" class="dsq-comment-message"><p>One using stl: <a href="http://ideone.com/9D7Yty" rel="nofollow">http://ideone.com/9D7Yty</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31204">
        <div id="dsq-comment-header-31204" class="dsq-comment-header">
            <cite id="dsq-cite-31204">
                <span id="dsq-author-user-31204">amaan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31204" class="dsq-comment-body">
            <div id="dsq-comment-message-31204" class="dsq-comment-message"><p>Thanku for the code,<br />
Is it necessary to use the struct adjlist<br />
When (i think ) we can do without?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27052">
        <div id="dsq-comment-header-27052" class="dsq-comment-header">
            <cite id="dsq-cite-27052">
                <span id="dsq-author-user-27052">pihu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27052" class="dsq-comment-body">
            <div id="dsq-comment-message-27052" class="dsq-comment-message"><p>Does it work with conditions on the 2 vertices?? (I tried doing. I&#8217;m getting self-loops for all the vertices.) My output for V=10 shows<br />
0-&gt; 0-&gt;0-&gt;0-&gt;<br />
1-&gt;1</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-jainamit0909gmail-com odd alt thread-odd thread-alt depth-1" id="dsq-comment-20275">
        <div id="dsq-comment-header-20275" class="dsq-comment-header">
            <cite id="dsq-cite-20275">
                <span id="dsq-author-user-20275">AMIT</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20275" class="dsq-comment-body">
            <div id="dsq-comment-message-20275" class="dsq-comment-message"><p>Pros of adjacency matrix- Unlike adjacency list,a single bit is enough to represent whether there is an edge between two vertex or not. In adjacency list,vertex info and next vertex&#8217;s link has to be kept</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-15963">
        <div id="dsq-comment-header-15963" class="dsq-comment-header">
            <cite id="dsq-cite-15963">
                <span id="dsq-author-user-15963">B</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15963" class="dsq-comment-body">
            <div id="dsq-comment-message-15963" class="dsq-comment-message"><p>why do i get the error of declaration is not allowed here in function createGraph&#8212;i haven&#8217;t changed anything! Please let me know asap!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-autoalgorithmist odd alt depth-2" id="dsq-comment-15970">
        <div id="dsq-comment-header-15970" class="dsq-comment-header">
            <cite id="dsq-cite-15970">
http://www.facebook.com/barnwal.aashish                <span id="dsq-author-user-15970">Aashish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15970" class="dsq-comment-body">
            <div id="dsq-comment-message-15970" class="dsq-comment-message"><p>The program is working fine on ideone. See here: <a href="http://ideone.com/Vog8Er" rel="nofollow">http://ideone.com/Vog8Er</a><br />
Can you please tell us which compiler you are using?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-15975">
        <div id="dsq-comment-header-15975" class="dsq-comment-header">
            <cite id="dsq-cite-15975">
                <span id="dsq-author-user-15975">B</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15975" class="dsq-comment-body">
            <div id="dsq-comment-message-15975" class="dsq-comment-message"><p>I have used both g++, borlandc und turbo c lite&#8230;i get this error&#8230;why? What other compiler should i use? thks</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-4" id="dsq-comment-15977">
        <div id="dsq-comment-header-15977" class="dsq-comment-header">
            <cite id="dsq-cite-15977">
                <span id="dsq-author-user-15977">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15977" class="dsq-comment-body">
            <div id="dsq-comment-message-15977" class="dsq-comment-message"><p>Save your file as .cpp</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-5" id="dsq-comment-15979">
        <div id="dsq-comment-header-15979" class="dsq-comment-header">
            <cite id="dsq-cite-15979">
                <span id="dsq-author-user-15979">B</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15979" class="dsq-comment-body">
            <div id="dsq-comment-message-15979" class="dsq-comment-message"><p>thks so much&#8211; it solved the problem, i saw at the beginning of the program that it&#8217;s a c-program, but it wroks now with the .cpp-are there any other programs with graphs like these? thks again</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-5" id="dsq-comment-34106">
        <div id="dsq-comment-header-34106" class="dsq-comment-header">
            <cite id="dsq-cite-34106">
                <span id="dsq-author-user-34106">hgtyu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34106" class="dsq-comment-body">
            <div id="dsq-comment-message-34106" class="dsq-comment-message"><p>#include<br />
#include<br />
#include </p>
<p>// A structure to represent a node in adjacency list<br />
struct AdjListNode<br />
{<br />
    int dest;<br />
    int weight;<br />
    struct AdjListNode* next;<br />
};</p>
<p>// A structure to represent an adjacency liat<br />
struct AdjList<br />
{<br />
    struct AdjListNode *head;  // pointer to head node of list<br />
};</p>
<p>// A structure to represent a graph. A graph is an array of adjacency lists.<br />
// Size of array will be V (number of vertices in graph)<br />
struct Graph<br />
{<br />
    int V;<br />
    struct AdjList* array;<br />
};</p>
<p>// A utility function to create a new adjacency list node<br />
struct AdjListNode* newAdjListNode(int dest, int weight)<br />
{<br />
    struct AdjListNode* newNode =<br />
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));<br />
    newNode-&gt;dest = dest;<br />
    newNode-&gt;weight = weight;<br />
    newNode-&gt;next = NULL;<br />
    return newNode;<br />
}</p>
<p>// A utility function that creates a graph of V vertices<br />
struct Graph* createGraph(int V)<br />
{<br />
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));<br />
    graph-&gt;V = V;</p>
<p>    // Create an array of adjacency lists.  Size of array will be V<br />
    graph-&gt;array = (struct AdjList*) malloc(V * sizeof(struct AdjList));</p>
<p>     // Initialize each adjacency list as empty by making head as NULL<br />
    for (int i = 0; i array[i].head = NULL;</p>
<p>    return graph;<br />
}</p>
<p>// Adds an edge to an undirected graph<br />
void addEdge(struct Graph* graph, int src, int dest, int weight)<br />
{<br />
    // Add an edge from src to dest.  A new node is added to the adjacency<br />
    // list of src.  The node is added at the begining<br />
    struct AdjListNode* newNode = newAdjListNode(dest, weight);<br />
    newNode-&gt;next = graph-&gt;array[src].head;<br />
    graph-&gt;array[src].head = newNode;</p>
<p>    // Since graph is undirected, add an edge from dest to src also<br />
    newNode = newAdjListNode(src, weight);<br />
    newNode-&gt;next = graph-&gt;array[dest].head;<br />
    graph-&gt;array[dest].head = newNode;<br />
}</p>
<p>// Structure to represent a min heap node<br />
struct MinHeapNode<br />
{<br />
    int  v;<br />
    int dist;<br />
};</p>
<p>// Structure to represent a min heap<br />
struct MinHeap<br />
{<br />
    int size;      // Number of heap nodes present currently<br />
    int capacity;  // Capacity of min heap<br />
    int *pos;     // This is needed for decreaseKey()<br />
    struct MinHeapNode **array;<br />
};</p>
<p>// A utility function to create a new Min Heap Node<br />
struct MinHeapNode* newMinHeapNode(int v, int dist)<br />
{<br />
    struct MinHeapNode* minHeapNode =<br />
           (struct MinHeapNode*) malloc(sizeof(struct MinHeapNode));<br />
    minHeapNode-&gt;v = v;<br />
    minHeapNode-&gt;dist = dist;<br />
    return minHeapNode;<br />
}</p>
<p>// A utility function to create a Min Heap<br />
struct MinHeap* createMinHeap(int capacity)<br />
{<br />
    struct MinHeap* minHeap =<br />
         (struct MinHeap*) malloc(sizeof(struct MinHeap));<br />
    minHeap-&gt;pos = (int *)malloc(capacity * sizeof(int));<br />
    minHeap-&gt;size = 0;<br />
    minHeap-&gt;capacity = capacity;<br />
    minHeap-&gt;array =<br />
         (struct MinHeapNode**) malloc(capacity * sizeof(struct MinHeapNode*));<br />
    return minHeap;<br />
}</p>
<p>// A utility function to swap two nodes of min heap. Needed for min heapify<br />
void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b)<br />
{<br />
    struct MinHeapNode* t = *a;<br />
    *a = *b;<br />
    *b = t;<br />
}</p>
<p>// A standard function to heapify at given idx<br />
// This function also updates position of nodes when they are swapped.<br />
// Position is needed for decreaseKey()<br />
void minHeapify(struct MinHeap* minHeap, int idx)<br />
{<br />
    int smallest, left, right;<br />
    smallest = idx;<br />
    left = 2 * idx + 1;<br />
    right = 2 * idx + 2;</p>
<p>    if (left size &amp;&amp;<br />
        minHeap-&gt;array[left]-&gt;dist array[smallest]-&gt;dist )<br />
      smallest = left;</p>
<p>    if (right size &amp;&amp;<br />
        minHeap-&gt;array[right]-&gt;dist array[smallest]-&gt;dist )<br />
      smallest = right;</p>
<p>    if (smallest != idx)<br />
    {<br />
        // The nodes to be swapped in min heap<br />
        MinHeapNode *smallestNode = minHeap-&gt;array[smallest];<br />
        MinHeapNode *idxNode = minHeap-&gt;array[idx];</p>
<p>        // Swap positions<br />
        minHeap-&gt;pos[smallestNode-&gt;v] = idx;<br />
        minHeap-&gt;pos[idxNode-&gt;v] = smallest;</p>
<p>        // Swap nodes<br />
        swapMinHeapNode(&amp;minHeap-&gt;array[smallest], &amp;minHeap-&gt;array[idx]);</p>
<p>        minHeapify(minHeap, smallest);<br />
    }<br />
}</p>
<p>// A utility function to check if the given minHeap is ampty or not<br />
int isEmpty(struct MinHeap* minHeap)<br />
{<br />
    return minHeap-&gt;size == 0;<br />
}</p>
<p>// Standard function to extract minimum node from heap<br />
struct MinHeapNode* extractMin(struct MinHeap* minHeap)<br />
{<br />
    if (isEmpty(minHeap))<br />
        return NULL;</p>
<p>    // Store the root node<br />
    struct MinHeapNode* root = minHeap-&gt;array[0];</p>
<p>    // Replace root node with last node<br />
    struct MinHeapNode* lastNode = minHeap-&gt;array[minHeap-&gt;size &#8211; 1];<br />
    minHeap-&gt;array[0] = lastNode;</p>
<p>    // Update position of last node<br />
    minHeap-&gt;pos[root-&gt;v] = minHeap-&gt;size-1;<br />
    minHeap-&gt;pos[lastNode-&gt;v] = 0;</p>
<p>    // Reduce heap size and heapify root<br />
    &#8211;minHeap-&gt;size;<br />
    minHeapify(minHeap, 0);</p>
<p>    return root;<br />
}</p>
<p>// Function to decreasy dist value of a given vertex v. This function<br />
// uses pos[] of min heap to get the current index of node in min heap<br />
void decreaseKey(struct MinHeap* minHeap, int v, int dist)<br />
{<br />
    // Get the index of v in  heap array<br />
    int i = minHeap-&gt;pos[v];</p>
<p>    // Get the node and update its dist value<br />
    minHeap-&gt;array[i]-&gt;dist = dist;</p>
<p>    // Travel up while the complete tree is not hepified.<br />
    // This is a O(Logn) loop<br />
    while (i &amp;&amp; minHeap-&gt;array[i]-&gt;dist array[(i &#8211; 1) / 2]-&gt;dist)<br />
    {<br />
        // Swap this node with its parent<br />
        minHeap-&gt;pos[minHeap-&gt;array[i]-&gt;v] = (i-1)/2;<br />
        minHeap-&gt;pos[minHeap-&gt;array[(i-1)/2]-&gt;v] = i;<br />
        swapMinHeapNode(&amp;minHeap-&gt;array[i],  &amp;minHeap-&gt;array[(i &#8211; 1) / 2]);</p>
<p>        // move to parent index<br />
        i = (i &#8211; 1) / 2;<br />
    }<br />
}</p>
<p>// A utility function to check if a given vertex<br />
// &#8216;v&#8217; is in min heap or not<br />
bool isInMinHeap(struct MinHeap *minHeap, int v)<br />
{<br />
   if (minHeap-&gt;pos[v] size)<br />
     return true;<br />
   return false;<br />
}</p>
<p>// A utility function used to print the solution<br />
void printArr(int dist[], int n)<br />
{<br />
    printf(&#8220;Vertex   Distance from Sourcen&#8221;);<br />
    for (int i = 0; i V;// Get the number of vertices in graph<br />
    int dist[V];      // dist values used to pick minimum weight edge in cut</p>
<p>    // minHeap represents set E<br />
    struct MinHeap* minHeap = createMinHeap(V);</p>
<p>    // Initialize min heap with all vertices. dist value of all vertices<br />
    for (int v = 0; v array[v] = newMinHeapNode(v, dist[v]);<br />
        minHeap-&gt;pos[v] = v;<br />
    }</p>
<p>    // Make dist value of src vertex as 0 so that it is extracted first<br />
    minHeap-&gt;array[src] = newMinHeapNode(src, dist[src]);<br />
    minHeap-&gt;pos[src]   = src;<br />
    dist[src] = 0;<br />
    decreaseKey(minHeap, src, dist[src]);</p>
<p>    // Initially size of min heap is equal to V<br />
    minHeap-&gt;size = V;</p>
<p>    // In the followin loop, min heap contains all nodes<br />
    // whose shortest distance is not yet finalized.<br />
    while (!isEmpty(minHeap))<br />
    {<br />
        // Extract the vertex with minimum distance value<br />
        struct MinHeapNode* minHeapNode = extractMin(minHeap);<br />
        int u = minHeapNode-&gt;v; // Store the extracted vertex number</p>
<p>        // Traverse through all adjacent vertices of u (the extracted<br />
        // vertex) and update their distance values<br />
        struct AdjListNode* pCrawl = graph-&gt;array[u].head;<br />
        while (pCrawl != NULL)<br />
        {<br />
            int v = pCrawl-&gt;dest;</p>
<p>            // If shortest distance to v is not finalized yet, and distance to v<br />
            // through u is less than its previously calculated distance<br />
            if (isInMinHeap(minHeap, v) &amp;&amp; dist[u] != INT_MAX &amp;&amp;<br />
                                          pCrawl-&gt;weight + dist[u] weight;</p>
<p>                // update distance value in min heap also<br />
                decreaseKey(minHeap, v, dist[v]);<br />
            }<br />
            pCrawl = pCrawl-&gt;next;<br />
        }<br />
    }</p>
<p>    // print the calculated shortest distances<br />
    printArr(dist, V);<br />
}</p>
<p>// Driver program to test above functions<br />
int main()<br />
{<br />
    // create the graph given in above fugure<br />
    int V = 9;<br />
    struct Graph* graph = createGraph(V);<br />
    addEdge(graph, 0, 1, 4);<br />
    addEdge(graph, 0, 7, 8);<br />
    addEdge(graph, 1, 2, 8);<br />
    addEdge(graph, 1, 7, 11);<br />
    addEdge(graph, 2, 3, 7);<br />
    addEdge(graph, 2, 8, 2);<br />
    addEdge(graph, 2, 5, 4);<br />
    addEdge(graph, 3, 4, 9);<br />
    addEdge(graph, 3, 5, 14);<br />
    addEdge(graph, 4, 5, 10);<br />
    addEdge(graph, 5, 6, 2);<br />
    addEdge(graph, 6, 7, 1);<br />
    addEdge(graph, 6, 8, 6);<br />
    addEdge(graph, 7, 8, 7);</p>
<p>    dijkstra(graph, 0);</p>
<p>    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-kartik even depth-5" id="dsq-comment-15980">
        <div id="dsq-comment-header-15980" class="dsq-comment-header">
            <cite id="dsq-cite-15980">
                <span id="dsq-author-user-15980">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15980" class="dsq-comment-body">
            <div id="dsq-comment-message-15980" class="dsq-comment-message"><p>You seem to be using non-standard turbo C compiler.  It works fine any C99 standard compiler.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-12549">
        <div id="dsq-comment-header-12549" class="dsq-comment-header">
            <cite id="dsq-cite-12549">
                <span id="dsq-author-user-12549">piyush</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12549" class="dsq-comment-body">
            <div id="dsq-comment-message-12549" class="dsq-comment-message"><p>very nice article</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/graph-and-its-representations/';
var disqus_identifier = '27134 http://www.geeksforgeeks.org/?p=27134';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Graph and its representations";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.202 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:24:32 -->

<!-- Compression = gzip -->
<!-- super cache -->