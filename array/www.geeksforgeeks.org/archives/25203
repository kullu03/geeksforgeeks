<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Construct BST from given preorder traversal | Set 1 - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Construct BST from given preorder traversal | Set 1 - GeeksforGeeks" />
<meta property="og:description" content="Given preorder traversal of a binary search tree, construct the BST. For example, if the given traversal is {10, 5, 1, 7, 40, 50}, then the output should be root of following tree. 10 / \ 5 40 / \ \ 1 7 50 Method 1 ( O(n^2) time complexity ) The first element of &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2012-10-11T11:02:27+00:00" />
<meta property="article:modified_time" content="2013-02-08T22:57:13+00:00" />
<meta property="og:updated_time" content="2013-02-08T22:57:13+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.485 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110860 115.248.50.28';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Construct BST from given preorder traversal | Set 1</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given preorder traversal of a binary search tree, construct the BST.</p>
<p>For example, if the given traversal is {10, 5, 1, 7, 40, 50}, then the output should be root of following tree.<span id="more-25203"></span></p>
<pre>
     10
   /   \
  5     40
 /  \      \
1    7      50
</pre>
<p><strong>Method 1 ( O(n^2) time complexity )</strong><br />
The first element of preorder traversal is always root. We first construct the root. Then we find the index of first element which is greater than root. Let the index be &#8216;i&#8217;.  The values between root and &#8216;i&#8217; will be part of left subtree, and the values between &#8216;i+1&#8242; and &#8216;n-1&#8242; will be part of right subtree. Divide given pre[] at index &#8220;i&#8221; and recur for left and right sub-trees.<br />
For example in {10, 5, 1, 7, 40, 50}, 10 is the first element, so we make it root. Now we look for the first element greater than 10,  we find 40.  So we know the structure of BST is as following.
<pre>
             10
           /    \
          /      \
  {5, 1, 7}       {40, 50}</pre>
<p>We recursively follow above steps for subarrays {5, 1, 7} and {40, 50}, and get the complete tree.</p>
<pre class="brush: cpp; highlight: [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63]; title: ; notranslate" title="">
/* A O(n^2) program for construction of BST from preorder traversal */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node *left;
    struct node *right;
};

// A utility function to create a node
struct node* newNode (int data)
{
    struct node* temp = (struct node *) malloc( sizeof(struct node) );

    temp-&gt;data = data;
    temp-&gt;left = temp-&gt;right = NULL;

    return temp;
}

// A recursive function to construct Full from pre[]. preIndex is used
// to keep track of index in pre[].
struct node* constructTreeUtil (int pre[], int* preIndex,
                                int low, int high, int size)
{
    // Base case
    if (*preIndex &gt;= size || low &gt; high)
        return NULL;

    // The first node in preorder traversal is root. So take the node at
    // preIndex from pre[] and make it root, and increment preIndex
    struct node* root = newNode ( pre[*preIndex] );
    *preIndex = *preIndex + 1;

    // If the current subarry has only one element, no need to recur
    if (low == high)
        return root;

    // Search for the first element greater than root
    int i;
    for ( i = low; i &lt;= high; ++i )
        if ( pre[ i ] &gt; root-&gt;data )
            break;

    // Use the index of element found in postorder to divide postorder array in
    // two parts. Left subtree and right subtree
    root-&gt;left = constructTreeUtil ( pre, preIndex, *preIndex, i - 1, size );
    root-&gt;right = constructTreeUtil ( pre, preIndex, i, high, size );

    return root;
}

// The main function to construct BST from given preorder traversal.
// This function mainly uses constructTreeUtil()
struct node *constructTree (int pre[], int size)
{
    int preIndex = 0;
    return constructTreeUtil (pre, &amp;preIndex, 0, size - 1, size);
}

// A utility function to print inorder traversal of a Binary Tree
void printInorder (struct node* node)
{
    if (node == NULL)
        return;
    printInorder(node-&gt;left);
    printf(&quot;%d &quot;, node-&gt;data);
    printInorder(node-&gt;right);
}

// Driver program to test above functions
int main ()
{
    int pre[] = {10, 5, 1, 7, 40, 50};
    int size = sizeof( pre ) / sizeof( pre[0] );

    struct node *root = constructTree(pre, size);

    printf(&quot;Inorder traversal of the constructed tree: \n&quot;);
    printInorder(root);

    return 0;
}
</pre>
<p>Output:
<pre> 1 5 7 10 40 50</pre>
<p>Time Complexity: O(n^2)</p>
<p></br><br />
<strong>Method 2 ( O(n) time complexity )</strong><br />
The idea used here is inspired from method 3 of <a href="http://www.geeksforgeeks.org/archives/3042">this </a>post. The trick is to set a range {min .. max} for every node. Initialize the range as {INT_MIN .. INT_MAX}.  The first node will definitely be in range, so create root node.  To construct the left subtree, set the range as {INT_MIN &#8230;root->data}. If a values is in the range {INT_MIN .. root->data}, the values is part part of left subtree.  To construct the right subtree, set the range as {root->data..max .. INT_MAX}.</p>
<pre class="brush: cpp; highlight: [26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]; title: ; notranslate" title="">
/* A O(n) program for construction of BST from preorder traversal */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node *left;
    struct node *right;
};

// A utility function to create a node
struct node* newNode (int data)
{
    struct node* temp = (struct node *) malloc( sizeof(struct node) );

    temp-&gt;data = data;
    temp-&gt;left = temp-&gt;right = NULL;

    return temp;
}

// A recursive function to construct BST from pre[]. preIndex is used
// to keep track of index in pre[].
struct node* constructTreeUtil( int pre[], int* preIndex, int key,
                                int min, int max, int size )
{
    // Base case
    if( *preIndex &gt;= size )
        return NULL;
 
    struct node* root = NULL;
 
    // If current element of pre[] is in range, then
    // only it is part of current subtree
    if( key &gt; min &amp;&amp; key &lt; max )
    {
        // Allocate memory for root of this subtree and increment *preIndex
        root = newNode ( key );
        *preIndex = *preIndex + 1;
        
        if (*preIndex &lt; size)
        {
            // Contruct the subtree under root
            // All nodes which are in range {min .. key} will go in left
            // subtree, and first such node will be root of left subtree.
            root-&gt;left = constructTreeUtil( pre, preIndex, pre[*preIndex],
                                        min, key, size );
 
            // All nodes which are in range {key..max} will go in right
            // subtree, and first such node will be root of right subtree.
            root-&gt;right = constructTreeUtil( pre, preIndex, pre[*preIndex],
                                         key, max, size );
        }
    }
 
    return root;
}

// The main function to construct BST from given preorder traversal.
// This function mainly uses constructTreeUtil()
struct node *constructTree (int pre[], int size)
{
    int preIndex = 0;
    return constructTreeUtil ( pre, &amp;preIndex, pre[0], INT_MIN, INT_MAX, size );
}

// A utility function to print inorder traversal of a Binary Tree
void printInorder (struct node* node)
{
    if (node == NULL)
        return;
    printInorder(node-&gt;left);
    printf(&quot;%d &quot;, node-&gt;data);
    printInorder(node-&gt;right);
}

// Driver program to test above functions
int main ()
{
    int pre[] = {10, 5, 1, 7, 40, 50};
    int size = sizeof( pre ) / sizeof( pre[0] );

    struct node *root = constructTree(pre, size);

    printf(&quot;Inorder traversal of the constructed tree: \n&quot;);
    printInorder(root);

    return 0;
}
</pre>
<p>Output:
<pre> 1 5 7 10 40 50</pre>
<p>Time Complexity: O(n)</p>
<p>We will soon publish a O(n) iterative solution as a separate post.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li><li><a href="http://www.geeksforgeeks.org/convert-binary-tree-threaded-binary-tree/" title="Convert a Binary Tree to Threaded binary tree">Convert a Binary Tree to Threaded binary tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-n-ary-tree/" title="Serialize and Deserialize an N-ary Tree">Serialize and Deserialize an N-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/" title="Serialize and Deserialize a Binary Tree">Serialize and Deserialize a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/" title="Print nodes between two given level numbers of a binary tree">Print nodes between two given level numbers of a binary tree</a></li><li><a href="http://www.geeksforgeeks.org/find-height-binary-tree-represented-parent-array/" title="Find Height of Binary Tree represented by Parent array">Find Height of Binary Tree represented by Parent array</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fconstruct-bst-from-given-preorder-traversa%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/" data-text="Construct BST from given preorder traversal | Set 1" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34507">
        <div id="dsq-comment-header-34507" class="dsq-comment-header">
            <cite id="dsq-cite-34507">
                <span id="dsq-author-user-34507">danny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34507" class="dsq-comment-body">
            <div id="dsq-comment-message-34507" class="dsq-comment-message"><p>We can also have another O(nlogn) Time Complexity solution but it uses O(n) Space Complexity also&#8230;</p>
<p>Step-1: Sort the preorder[] array and store it in another inorder[] array.<br />
Step-2: Construct the BST using preorder[] and inorder[] array.</p>
<p>O(n) Space  Complexity&#8230;.<br />
Please correct me if I am wrong</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34506">
        <div id="dsq-comment-header-34506" class="dsq-comment-header">
            <cite id="dsq-cite-34506">
                <span id="dsq-author-user-34506">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34506" class="dsq-comment-body">
            <div id="dsq-comment-message-34506" class="dsq-comment-message"><p>We can also have another O(n) Time Complexity solution but it uses O(n) Space Complexity also&#8230;</p>
<p>Step-1: Sort the preorder[] array and store it in another inorder[] array.<br />
Step-2: Construct the BST using preorder[] and inorder[] array.</p>
<p>O(n) Space and Time Complexity&#8230;.<br />
Please correct me if I am wrong</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-32831">
        <div id="dsq-comment-header-32831" class="dsq-comment-header">
            <cite id="dsq-cite-32831">
                <span id="dsq-author-user-32831">Rg</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32831" class="dsq-comment-body">
            <div id="dsq-comment-message-32831" class="dsq-comment-message"><p>Method 2: Why do you need min? Since this is a preorder traversal only max is enough. Can you give me a counter example where you would get in incorrect BST if you don&#8217;t pass min around</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-amit-bgl odd alt thread-odd thread-alt depth-1" id="dsq-comment-25127">
        <div id="dsq-comment-header-25127" class="dsq-comment-header">
            <cite id="dsq-cite-25127">
                <span id="dsq-author-user-25127">Amit Bgl</span>
            </cite>
        </div>
        <div id="dsq-comment-body-25127" class="dsq-comment-body">
            <div id="dsq-comment-message-25127" class="dsq-comment-message"><p>wow code <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-24446">
        <div id="dsq-comment-header-24446" class="dsq-comment-header">
            <cite id="dsq-cite-24446">
                <span id="dsq-author-user-24446">Shubham Singhal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24446" class="dsq-comment-body">
            <div id="dsq-comment-message-24446" class="dsq-comment-message"><p>Can we just traverse the input array, and insert nodes in BST in that order and get required BST.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27709">
        <div id="dsq-comment-header-27709" class="dsq-comment-header">
            <cite id="dsq-cite-27709">
                <span id="dsq-author-user-27709">Roman Dzhabarov</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27709" class="dsq-comment-body">
            <div id="dsq-comment-message-27709" class="dsq-comment-message"><p>I think it will work but having O(n*n) in the worst case and O(n*log(n)) in average. Suppose, 9,8,7,6,5,4 etc preorder.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug even thread-odd thread-alt depth-1" id="dsq-comment-18461">
        <div id="dsq-comment-header-18461" class="dsq-comment-header">
            <cite id="dsq-cite-18461">
                <span id="dsq-author-user-18461">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18461" class="dsq-comment-body">
            <div id="dsq-comment-message-18461" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-17301">
        <div id="dsq-comment-header-17301" class="dsq-comment-header">
            <cite id="dsq-cite-17301">
                <span id="dsq-author-user-17301">Soumya Sengupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17301" class="dsq-comment-body">
            <div id="dsq-comment-message-17301" class="dsq-comment-message"><p>When we execute the statement&#8230;<br />
root-&gt;right = constructTreeUtil ( pre, preIndex, i, high, size );<br />
preIndex should point to i&#8230;..so dat i becomes the root and we proceed further&#8230;&#8230;<br />
isnt it?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-code_ignitor even thread-odd thread-alt depth-1" id="dsq-comment-16755">
        <div id="dsq-comment-header-16755" class="dsq-comment-header">
            <cite id="dsq-cite-16755">
                <span id="dsq-author-user-16755">code_ignitor</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16755" class="dsq-comment-body">
            <div id="dsq-comment-message-16755" class="dsq-comment-message"><p>Should&#8217;nt we include these lines..</p>
<pre> <code language="C">
if(min&gt;max || key&lt;min || key &gt; max)
     return NULL;
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-code_ignitor odd alt depth-2" id="dsq-comment-16756">
        <div id="dsq-comment-header-16756" class="dsq-comment-header">
            <cite id="dsq-cite-16756">
                <span id="dsq-author-user-16756">code_ignitor</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16756" class="dsq-comment-body">
            <div id="dsq-comment-message-16756" class="dsq-comment-message"><p>Sorry !! Got your code <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-16578">
        <div id="dsq-comment-header-16578" class="dsq-comment-header">
            <cite id="dsq-cite-16578">
                <span id="dsq-author-user-16578">Balasubramanian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16578" class="dsq-comment-body">
            <div id="dsq-comment-message-16578" class="dsq-comment-message"><p>Why is it that we are passing the parameter-&#8220;key&#8221; to the function. Couldn&#8217;t we just pass preIndex as a reference and increment it when we create a new node.<br />
That way, we can just use pre[preIndex] to create an element.</p>
<p>Sample code:</p>
<pre> <code language="C">
node *buildBST(int pre[],int &amp;idx,int size,int minVal,int maxVal){
	if(idx==size)
		return NULL;
	node *root=NULL;
	if(minVal&lt;pre[idx] &amp;&amp; pre[idx]&lt;maxVal){
		root=new node(pre[idx++]); // incrementing idx
		root-&gt;left=buildBST(pre,idx,size,minVal,root-&gt;data);
		root-&gt;right=buildBST(pre,idx,size,root-&gt;data,maxVal);
	}
	return root;
}
</code> </pre>
<p>Please correct me if I am wrong.<br />
Thanks,</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-15078">
        <div id="dsq-comment-header-15078" class="dsq-comment-header">
            <cite id="dsq-cite-15078">
                <span id="dsq-author-user-15078">prakash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15078" class="dsq-comment-body">
            <div id="dsq-comment-message-15078" class="dsq-comment-message"><p>hi geeks,<br />
when preindex reaches &#8220;size&#8221;, you will get segmentation fault (pre[*preindex]) in<br />
the following call::<br />
root-&gt;left = constructTreeUtil( pre, preIndex, pre[*preIndex],<br />
                                        min, key, size );</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-autoalgorithmist even depth-2" id="dsq-comment-15096">
        <div id="dsq-comment-header-15096" class="dsq-comment-header">
            <cite id="dsq-cite-15096">
http://www.facebook.com/barnwal.aashish                <span id="dsq-author-user-15096">Aashish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15096" class="dsq-comment-body">
            <div id="dsq-comment-message-15096" class="dsq-comment-message"><p>Please take a closer look at the code. When the value of *preIndex = size, the function returns NULL.</p>
<pre> <code language="C">
// Base case
    if (*preIndex &gt;= size || low &gt; high)
        return NULL;
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-15102">
        <div id="dsq-comment-header-15102" class="dsq-comment-header">
            <cite id="dsq-cite-15102">
                <span id="dsq-author-user-15102">prakash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15102" class="dsq-comment-body">
            <div id="dsq-comment-message-15102" class="dsq-comment-message"><p>fine. but while passing argument,ie passing key value in argument, pre[*preindex] is out of bound access when *preindex==size, since pre[size -1] is the last element in array.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-autoalgorithmist even depth-4" id="dsq-comment-15123">
        <div id="dsq-comment-header-15123" class="dsq-comment-header">
            <cite id="dsq-cite-15123">
http://www.facebook.com/barnwal.aashish                <span id="dsq-author-user-15123">Aashish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15123" class="dsq-comment-body">
            <div id="dsq-comment-message-15123" class="dsq-comment-message"><p>Thanks for pointing this out. We have updated the code. Keep it up.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-13844">
        <div id="dsq-comment-header-13844" class="dsq-comment-header">
            <cite id="dsq-cite-13844">
                <span id="dsq-author-user-13844">Nomind</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13844" class="dsq-comment-body">
            <div id="dsq-comment-message-13844" class="dsq-comment-message"><p>#include<br />
#include<br />
#include </p>
<p>/* A binary tree node has key, left child and right child */<br />
struct node<br />
{<br />
    int key;<br />
    struct node* left;<br />
    struct node* right;<br />
};</p>
<p>/* Helper function that allocates a new node with the given key and<br />
   NULL left and right  pointers.*/<br />
struct node* newNode(int key)<br />
{<br />
    struct node* node = (struct node*)malloc(sizeof(struct node));<br />
    node-&gt;key = key;<br />
    node-&gt;left = NULL;<br />
    node-&gt;right = NULL;<br />
    return(node);<br />
}</p>
<p>// Function to find ceil of a given input in BST. If input is more<br />
// than the max key in BST, return -1<br />
int floor(node *root, int input)<br />
{<br />
    // Base case<br />
    if( root == NULL )<br />
        return INT_MAX;</p>
<p>    // We found equal key<br />
    if( root-&gt;key == input )<br />
        return root-&gt;key;</p>
<p>    // If root&#8217;s key is smaller, ceil must be in right subtree<br />
    if( root-&gt;key &gt; input )<br />
        return floor(root-&gt;left, input);</p>
<p>    // Else, either left subtree or root has the ceil value<br />
    int Floor = floor(root-&gt;right, input);<br />
    return (Floor key;<br />
}</p>
<p>// Driver program to test above function<br />
int main()<br />
{<br />
    node *root = newNode(8);</p>
<p>    root-&gt;left = newNode(4);<br />
    root-&gt;right = newNode(12);</p>
<p>    root-&gt;left-&gt;left = newNode(2);<br />
    root-&gt;left-&gt;right = newNode(6);</p>
<p>    root-&gt;right-&gt;left = newNode(10);<br />
    root-&gt;right-&gt;right = newNode(14);</p>
<p>    for(int i = 0; i &lt; 16; i++)<br />
        printf(&quot;%d  %d\n&quot;, i, floor(root, i));<br />
        getchar();<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-12633">
        <div id="dsq-comment-header-12633" class="dsq-comment-header">
            <cite id="dsq-cite-12633">
                <span id="dsq-author-user-12633">Rakesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12633" class="dsq-comment-body">
            <div id="dsq-comment-message-12633" class="dsq-comment-message"><pre> <code language="C">
I have doubt regarding the problem.
Pre Order traversal of BST will not give unique tree.
taking above example.

{10, 5, 1, 7, 40, 50}
can be pre order traversal of any of below trees
       10                               10
     5    40                         5      40
   1         50       OR          1     7 
     7

i.e 7 can be right child of 1 or 5

Can someone please explain the problem?
Is it ok to just create any BST from the array?
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-12636">
        <div id="dsq-comment-header-12636" class="dsq-comment-header">
            <cite id="dsq-cite-12636">
                <span id="dsq-author-user-12636">Aashish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12636" class="dsq-comment-body">
            <div id="dsq-comment-message-12636" class="dsq-comment-message"><p>The problem lies in the first BST. Observe node 7. It should lie on the right side of node 5 only.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-11870">
        <div id="dsq-comment-header-11870" class="dsq-comment-header">
            <cite id="dsq-cite-11870">
                <span id="dsq-author-user-11870">Animesh Pratap Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11870" class="dsq-comment-body">
            <div id="dsq-comment-message-11870" class="dsq-comment-message"><pre> <code language="C">



method 1 does not compute in O(n^2) time, as it is a recursive function and may split at-most into 2 parts.

1- root will split into at-most ( binary tree)
2- suppose the 1st largest no. (larger than root) after root 
   occurs exactly in middle

   eg- 40,1,2,4,(30),5,6,7,8 

3- then
     T(n)= 2T(n/2)+ O(n)

      {  f(n)=O(n) suppose in worst case (30) ie largest 
         element than root occurs at last
      } 

4= by master's theorem

    time complexity = O(n logn)....


</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-11872">
        <div id="dsq-comment-header-11872" class="dsq-comment-header">
            <cite id="dsq-cite-11872">
                <span id="dsq-author-user-11872">Aashish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11872" class="dsq-comment-body">
            <div id="dsq-comment-message-11872" class="dsq-comment-message"><p>The method#1 will run in NlogN time in best case( when the index to be splitted happens to be in the mid-way always ).<br />
Think about the below tree( Skew Tree ):</p>
<p>10, 8, 7, 6</p>
<p>Observe that in case of skew tree, it can split one element on one side and the rest on other side</p>
<p>For each index, the for loop runs for O(N).<br />
The time complexity can be given by:<br />
N-1 + N-2 + &#8230;.. + 1<br />
Which is asymptotically equivalent to O(N^2).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-11662">
        <div id="dsq-comment-header-11662" class="dsq-comment-header">
            <cite id="dsq-cite-11662">
                <span id="dsq-author-user-11662">Sairam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11662" class="dsq-comment-body">
            <div id="dsq-comment-message-11662" class="dsq-comment-message"><p>I think there is no need to use preIndex variable in Method 1. Instead of passing *preindex, just pass (low + 1) in the recursive function. Correct me if I am wrong.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-11617">
        <div id="dsq-comment-header-11617" class="dsq-comment-header">
            <cite id="dsq-cite-11617">
                <span id="dsq-author-user-11617">hard2code</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11617" class="dsq-comment-body">
            <div id="dsq-comment-message-11617" class="dsq-comment-message"><p>I hope the following code would work in O(n). Is it not? </p>
<p>public Node buildTree(int[] arr, int l, int r) {<br />
    if(r-l &lt; 0 || l = arr.length)<br />
	return null;<br />
    Node node = new Node(arr[l]);<br />
    int lr =l;<br />
    while(lr &lt; r &amp;&amp; arr[lr+1] &lt; arr[l])<br />
	lr++;<br />
    node.left = buildTree(arr, l+1, lr);<br />
    node.right = buildTree(arr, lr+1, r);<br />
    return node;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-11598">
        <div id="dsq-comment-header-11598" class="dsq-comment-header">
            <cite id="dsq-cite-11598">
                <span id="dsq-author-user-11598">atul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11598" class="dsq-comment-body">
            <div id="dsq-comment-message-11598" class="dsq-comment-message"><p>given pre order of BST , it can be formed simply by inserting elements into binary search tree.<br />
correct me if i am wrong.</p>
<pre> <code language="C">
node *bst(node *root,int val)
  if(root==NULL)
  {
    temp=createNode(val);
    return temp;
  }
  else if(root-&gt;data &gt; val)
  {
     root-&gt;left=bst(root-&gt;left,val);
  }
  else if(root-&gt;data &lt; val)
  {
     root-&gt;right=bst(root-&gt;right,val);
  }

return root;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-11599">
        <div id="dsq-comment-header-11599" class="dsq-comment-header">
            <cite id="dsq-cite-11599">
                <span id="dsq-author-user-11599">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11599" class="dsq-comment-body">
            <div id="dsq-comment-message-11599" class="dsq-comment-message"><p>@atul: Thanks for sharing your thoughts.  Looks like another working solution.  The time complexity of this solution will be O(n^2) for a skewed tree.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-11897">
        <div id="dsq-comment-header-11897" class="dsq-comment-header">
            <cite id="dsq-cite-11897">
                <span id="dsq-author-user-11897">damon</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11897" class="dsq-comment-body">
            <div id="dsq-comment-message-11897" class="dsq-comment-message"><p>@Kartic: i think atual code&#8217;s complexity will be atmost nlogn</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-14144">
        <div id="dsq-comment-header-14144" class="dsq-comment-header">
            <cite id="dsq-cite-14144">
                <span id="dsq-author-user-14144">Daniel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14144" class="dsq-comment-body">
            <div id="dsq-comment-message-14144" class="dsq-comment-message"><p>That&#8217;s not exactly correct.<br />
Your solution just creates a BST from any list of elements, but it does not recreate the original BST (like method 1).<br />
Compare your solution and method 1 on:<br />
{5, 30, 15, 10, 50, 40, 20}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-16314">
        <div id="dsq-comment-header-16314" class="dsq-comment-header">
            <cite id="dsq-cite-16314">
                <span id="dsq-author-user-16314">Aaman</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16314" class="dsq-comment-body">
            <div id="dsq-comment-message-16314" class="dsq-comment-message"><p>I think Daniel is right this method looks wrong to me ,there is no way to check if a bigger value is suppose to come to current node right or the parent nodes right.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/';
var disqus_identifier = '25203 http://www.geeksforgeeks.org/?p=25203';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Construct BST from given preorder traversal | Set 1";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.198 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:24:21 -->

<!-- Compression = gzip -->
<!-- super cache -->