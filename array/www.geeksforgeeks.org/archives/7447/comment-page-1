<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Maximum width of a binary tree - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Maximum width of a binary tree - GeeksforGeeks" />
<meta property="og:description" content="Given a binary tree, write a function to get the maximum width of the given tree. Width of a tree is maximum of widths of all levels. Let us consider the below example tree. 1 / \ 2 3 / \ \ 4 5 8 / \ 6 7 For the above tree, width of &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2010-05-15T23:59:27+00:00" />
<meta property="article:modified_time" content="2012-01-30T14:59:45+00:00" />
<meta property="og:updated_time" content="2012-01-30T14:59:45+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.496 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110982 142.66.140.76';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Maximum width of a binary tree</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given a binary tree, write a function to get the maximum width of the given tree. Width of a tree is maximum of widths of all levels.  <span id="more-7447"></span></p>
<p>Let us consider the below example tree.</p>
<pre>
         1
        /  \
       2    3
     /  \     \
    4    5     8 
              /  \
             6    7
</pre>
<p>For the above tree,<br />
width of level 1 is 1,<br />
width of level 2 is 2,<br />
width of level 3 is 3<br />
width of level 4 is 2.  </p>
<p>So the maximum width of the tree is 3.</p>
<p></br><br />
<strong>Method 1 (Using Level Order Traversal)</strong><br />
This method mainly involves two functions. One is to count nodes at a given level (getWidth), and other is to get the maximum width of the tree(getMaxWidth). getMaxWidth() makes use of getWidth() to get the width of all levels starting from root.</p>
<pre>
/*Function to print level order traversal of tree*/
<strong>getMaxWidth(tree)</strong>
maxWdth = 0
for i = 1 to height(tree)
  width =   getWidth(tree, i);
  if(width > maxWdth) 
      maxWdth  = width
return width
</pre>
<pre>
/*Function to get width of a given level */
<strong>getWidth(tree, level)</strong>
if tree is NULL then return 0;
if level is 1, then return 1;  
else if level greater than 1, then
    return getWidth(tree->left, level-1) + 
    getWidth(tree->right, level-1);
</pre>
<pre class="brush: cpp; highlight: [18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

/*Function protoypes*/
int getWidth(struct node* root, int level);
int height(struct node* node);
struct node* newNode(int data);

/* Function to get the maximum width of a binary tree*/
int getMaxWidth(struct node* root)
{
  int maxWidth = 0;   
  int width;
  int h = height(root);
  int i;
  
  /* Get width of each level and compare 
     the width with maximum width so far */
  for(i=1; i&lt;=h; i++)
  {
    width = getWidth(root, i);
    if(width &gt; maxWidth)
      maxWidth = width;
  }     
  
  return maxWidth;
}

/* Get width of a given level */
int getWidth(struct node* root, int level)
{
    
  if(root == NULL)
    return 0;
  
  if(level == 1)
    return 1;
            
  else if (level &gt; 1)
    return getWidth(root-&gt;left, level-1) + 
             getWidth(root-&gt;right, level-1);
}


/* UTILITY FUNCTIONS */
/* Compute the &quot;height&quot; of a tree -- the number of
    nodes along the longest path from the root node
    down to the farthest leaf node.*/
int height(struct node* node)
{
   if (node==NULL)
     return 0;
   else
   {
     /* compute the height of each subtree */
     int lHeight = height(node-&gt;left);
     int rHeight = height(node-&gt;right);
     /* use the larger one */
   
     return (lHeight &gt; rHeight)? (lHeight+1): (rHeight+1);
   }
}
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;
  return(node);
}
/* Driver program to test above functions*/
int main()
{
  struct node *root = newNode(1);
  root-&gt;left        = newNode(2);
  root-&gt;right       = newNode(3);
  root-&gt;left-&gt;left  = newNode(4);
  root-&gt;left-&gt;right = newNode(5);
  root-&gt;right-&gt;right = newNode(8);    
  root-&gt;right-&gt;right-&gt;left  = newNode(6);    
  root-&gt;right-&gt;right-&gt;right  = newNode(7);      

  /*
   Constructed bunary tree is:
          1
        /  \
       2    3
     /  \     \
    4   5     8 
              /  \
             6   7
  */  
  printf(&quot;Maximum width is %d \n&quot;, getMaxWidth(root));  
  getchar();
  return 0;
}
</pre>
<p>Time Complexity: O(n^2) in the worst case.</p>
<p>We can use Queue based level order traversal to optimize the time complexity of this method. The Queue based level order traversal will take O(n) time in worst case. Thanks to <a href="http://www.geeksforgeeks.org/archives/7447/comment-page-1#comment-1202">Nitish</a>, <a href="http://www.geeksforgeeks.org/archives/7447/comment-page-1#comment-1143">DivyaC </a>and <a href="http://www.geeksforgeeks.org/archives/7447/comment-page-1#comment-1783">tech.login.id2 </a> for suggesting this optimization.  See their comments for implementation using queue based traversal.</p>
<p></br><br />
<strong>Method 2 (Using Preorder Traversal)</strong><br />
In this method we create a temporary array count[] of size equal to the height of tree. We initialize all values in count as 0.  We traverse the tree using preorder traversal and fill the entries in count so that the count array contains count of nodes at each level in Binary Tree.</p>
<pre class="brush: cpp; highlight: [22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55]; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

// A utility function to get height of a binary tree
int height(struct node* node);

// A utility function to allocate a new node with given data
struct node* newNode(int data);

// A utility function that returns maximum value in arr[] of size n
int getMax(int arr[], int n);

// A function that fills count array with count of nodes at every
// level of given binary tree
void getMaxWidthRecur(struct node *root, int count[], int level);


/* Function to get the maximum width of a binary tree*/
int getMaxWidth(struct node* root)
{
  int width;
  int h = height(root);

  // Create an array that will store count of nodes at each level
  int *count = (int *)calloc(sizeof(int), h);

  int level = 0;

  // Fill the count array using preorder traversal
  getMaxWidthRecur(root, count, level);

  // Return the maximum value from count array
  return getMax(count, h);
}

// A function that fills count array with count of nodes at every
// level of given binary tree
void getMaxWidthRecur(struct node *root, int count[], int level)
{
  if(root)
  {
    count[level]++;
    getMaxWidthRecur(root-&gt;left, count, level+1);
    getMaxWidthRecur(root-&gt;right, count, level+1);
  }
}


/* UTILITY FUNCTIONS */
/* Compute the &quot;height&quot; of a tree -- the number of
    nodes along the longest path from the root node
    down to the farthest leaf node.*/
int height(struct node* node)
{
   if (node==NULL)
     return 0;
   else
   {
     /* compute the height of each subtree */
     int lHeight = height(node-&gt;left);
     int rHeight = height(node-&gt;right);
     /* use the larger one */

     return (lHeight &gt; rHeight)? (lHeight+1): (rHeight+1);
   }
}
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;
  return(node);
}

// Return the maximum value from count array
int getMax(int arr[], int n)
{
   int max = arr[0];
   int i;
   for (i = 0; i &lt; n; i++)
   {
       if (arr[i] &gt; max)
          max = arr[i];
   }
   return max;
}

/* Driver program to test above functions*/
int main()
{
  struct node *root = newNode(1);
  root-&gt;left        = newNode(2);
  root-&gt;right       = newNode(3);
  root-&gt;left-&gt;left  = newNode(4);
  root-&gt;left-&gt;right = newNode(5);
  root-&gt;right-&gt;right = newNode(8);
  root-&gt;right-&gt;right-&gt;left  = newNode(6);
  root-&gt;right-&gt;right-&gt;right  = newNode(7);

  /*
   Constructed bunary tree is:
          1
        /  \
       2    3
     /  \     \
    4   5     8
              /  \
             6   7
  */
  printf(&quot;Maximum width is %d \n&quot;, getMaxWidth(root));
  getchar();
  return 0;
}
</pre>
<p>Thanks to <a href="http://www.geeksforgeeks.org/archives/7447/comment-page-1#comment-4345">Raja </a>and <a href="http://www.geeksforgeeks.org/archives/7447/comment-page-1#comment-4098">jagdish </a>for suggesting this method.</p>
<p>Time Complexity: O(n)</p>
<p>Please write comments if you find the above code/algorithm incorrect, or find better ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li><li><a href="http://www.geeksforgeeks.org/convert-binary-tree-threaded-binary-tree/" title="Convert a Binary Tree to Threaded binary tree">Convert a Binary Tree to Threaded binary tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-n-ary-tree/" title="Serialize and Deserialize an N-ary Tree">Serialize and Deserialize an N-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/" title="Serialize and Deserialize a Binary Tree">Serialize and Deserialize a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/" title="Print nodes between two given level numbers of a binary tree">Print nodes between two given level numbers of a binary tree</a></li><li><a href="http://www.geeksforgeeks.org/find-height-binary-tree-represented-parent-array/" title="Find Height of Binary Tree represented by Parent array">Find Height of Binary Tree represented by Parent array</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fmaximum-width-of-a-binary-tree%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/" data-text="Maximum width of a binary tree" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-28768">
        <div id="dsq-comment-header-28768" class="dsq-comment-header">
            <cite id="dsq-cite-28768">
                <span id="dsq-author-user-28768">Suryabhan Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28768" class="dsq-comment-body">
            <div id="dsq-comment-message-28768" class="dsq-comment-message"><p>another O(n) solution</p>
<p><code></p>
<p>void lvlorder(struct node *s)<br />
{<br />
    queue q;<br />
    int max=1,lvl=1;<br />
    struct node * temp=s;<br />
    q.push(s);<br />
    int curr=1,next=0;<br />
    while(!q.empty())<br />
    {<br />
        temp=q.front();<br />
        q.pop();<br />
        curr--;<br />
        if(temp)<br />
        {<br />
            q.push(temp-&gt;l);<br />
            q.push(temp-&gt;r);<br />
            next+=2;<br />
            lvl++;<br />
        }<br />
        if(!curr)<br />
        {<br />
            curr=next;<br />
            next=0;<br />
            if(lvl&gt;max)<br />
                max=lvl;<br />
            lvl=0;<br />
        }<br />
    }<br />
    cout&lt;&lt;max;<br />
}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28767">
        <div id="dsq-comment-header-28767" class="dsq-comment-header">
            <cite id="dsq-cite-28767">
                <span id="dsq-author-user-28767">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28767" class="dsq-comment-body">
            <div id="dsq-comment-message-28767" class="dsq-comment-message"><p>another O(n) solution </p>
<p><code></p>
<p>void lvlorder(struct node *s)<br />
{<br />
    queue q;<br />
    int max=1,lvl=1;<br />
    struct node * temp=s;<br />
    q.push(s);<br />
    int curr=1,next=0;<br />
    while(!q.empty())<br />
    {<br />
        temp=q.front();<br />
        q.pop();<br />
        curr--;<br />
        if(temp)<br />
        {<br />
            q.push(temp-&gt;l);<br />
            q.push(temp-&gt;r);<br />
            next+=2;<br />
            lvl++;<br />
        }<br />
        if(!curr)<br />
        {<br />
            curr=next;<br />
            next=0;<br />
            if(lvl&gt;max)<br />
                max=lvl;<br />
            lvl=0;<br />
        }<br />
    }<br />
    cout&lt;&lt;max;<br />
}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-28614">
        <div id="dsq-comment-header-28614" class="dsq-comment-header">
            <cite id="dsq-cite-28614">
                <span id="dsq-author-user-28614">pavansrinivas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28614" class="dsq-comment-body">
            <div id="dsq-comment-message-28614" class="dsq-comment-message"><p>Using LevelOrder in JAVA</p>
<p><code><br />
void widthOfTree(){<br />
        Node temp = root;<br />
        Queue q = new LinkedList();<br />
        int wid = 0;<br />
        int max_wid = 0;<br />
        q.add(temp);<br />
        q.add(null);<br />
        while(!q.isEmpty()){<br />
            temp = q.remove();<br />
            if(temp==null){<br />
                if(!q.isEmpty()){<br />
                    q.add(null);<br />
                }<br />
                if(wid&gt;max_wid){<br />
                    max_wid = wid;<br />
                }<br />
                wid=0;<br />
            }<br />
            else{<br />
                wid++;<br />
                if(temp.left!=null){<br />
                    q.add(temp.left);<br />
                }<br />
                if(temp.right!=null){<br />
                    q.add(temp.right);<br />
                }<br />
            }<br />
        }<br />
        System.out.print(max_wid);<br />
    }<br />
</code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27835">
        <div id="dsq-comment-header-27835" class="dsq-comment-header">
            <cite id="dsq-cite-27835">
                <span id="dsq-author-user-27835">krishna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27835" class="dsq-comment-body">
            <div id="dsq-comment-message-27835" class="dsq-comment-message"><p>int treedia(btn* node, int &amp;dia)<br />
{<br />
    if(node==0) return 0;<br />
    int l = treedia(node-&gt;left,dia);<br />
    int r = treedia(node-&gt;right,dia);<br />
    int ch = l+r+1;<br />
    dia = dia = r ? l+1: r+1;<br />
};</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-26807">
        <div id="dsq-comment-header-26807" class="dsq-comment-header">
            <cite id="dsq-cite-26807">
                <span id="dsq-author-user-26807">Chandu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-26807" class="dsq-comment-body">
            <div id="dsq-comment-message-26807" class="dsq-comment-message"><p>// Using Level Order Traversal(using ) only but some what simplified better <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /><br />
#include<br />
int width(struct node *root)<br />
{<br />
	if(root==NULL)  return 0;</p>
<p>	list q;<br />
	q.push_back(root);</p>
<p>	int max_width = 0;<br />
	int wid=0;</p>
<p>	struct node *end_node = root;</p>
<p>	while(!q.empty())<br />
	{<br />
		struct node *temp = q.front();<br />
		q.pop_front();<br />
		wid++;</p>
<p>		if(temp-&gt;left != NULL)<br />
			q.push_back(temp-&gt;left);<br />
		if(temp-&gt;right != NULL)<br />
			q.push_back(temp-&gt;right);	</p>
<p>		if(end_node == temp)<br />
		{<br />
			end_node = q.back();<br />
			if(max_width &lt; wid)<br />
				max_width = wid;<br />
			wid=0;<br />
		}<br />
	}<br />
	return max_width;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-21710">
        <div id="dsq-comment-header-21710" class="dsq-comment-header">
            <cite id="dsq-cite-21710">
                <span id="dsq-author-user-21710">Ujjwal Arora</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21710" class="dsq-comment-body">
            <div id="dsq-comment-message-21710" class="dsq-comment-message"><pre> <code language="C">
int ar[height_of_tree] = {0};

void findWidth(Tree *node, int i)
{
    if(node==NULL)
        return;

    ar[i]++;
    findWidth(node-&gt;left,i+1);
    findWidth(node-&gt;right,i+1);
}

main()
{
findWidth(root,0);

cout&lt;&lt; max of ar[];
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-17683">
        <div id="dsq-comment-header-17683" class="dsq-comment-header">
            <cite id="dsq-cite-17683">
                <span id="dsq-author-user-17683">Durga Guntoju</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17683" class="dsq-comment-body">
            <div id="dsq-comment-message-17683" class="dsq-comment-message"><p>#include<br />
#include<br />
struct node<br />
{<br />
    int data;<br />
    struct node* left;<br />
    struct node* right;<br />
};<br />
void getMaxWidth(struct node* root,int *Widths,int level)<br />
{<br />
    if(root)<br />
        {<br />
                Widths[level]++;<br />
                getMaxWidth(root-&gt;left,&amp;Widths[0],level+1);<br />
                getMaxWidth(root-&gt;right,&amp;Widths[0],level+1);<br />
        }<br />
}<br />
int height(struct node* node)<br />
{<br />
   if (node==NULL)<br />
     return 0;<br />
   else<br />
   {<br />
     int lHeight = height(node-&gt;left);<br />
     int rHeight = height(node-&gt;right);<br />
     return (lHeight &gt; rHeight)? (lHeight+1): (rHeight+1);<br />
   }<br />
}<br />
struct node* newNode(int data)<br />
{<br />
  struct node* node = (struct node*)<br />
                       malloc(sizeof(struct node));<br />
  node-&gt;data = data;<br />
  node-&gt;left = NULL;<br />
  node-&gt;right = NULL;<br />
  return(node);<br />
}<br />
int getMax(int *arr, int n)<br />
{<br />
   int max = arr[0];<br />
   int i;<br />
   for (i = 0; i  max)<br />
          max = arr[i];<br />
   }<br />
   return max;<br />
}<br />
int main()<br />
{<br />
  struct node *root = newNode(1);<br />
  root-&gt;left        = newNode(2);<br />
  root-&gt;right       = newNode(3);<br />
  root-&gt;left-&gt;left  = newNode(4);<br />
  root-&gt;left-&gt;right = newNode(5);<br />
  root-&gt;right-&gt;right = newNode(8);<br />
  root-&gt;right-&gt;right-&gt;left  = newNode(6);<br />
  root-&gt;right-&gt;right-&gt;right  = newNode(7);<br />
  int height_tree=height(root);<br />
  int Widths[height(root)];<br />
  for(int i=0;i&lt;height_tree;++i)<br />
        Widths[i]=0;<br />
  getMaxWidth(root,&amp;Widths[0],0);<br />
  printf(&quot;\n %d&quot;,getMax(&amp;Widths[0],height_tree));<br />
  return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-14238">
        <div id="dsq-comment-header-14238" class="dsq-comment-header">
            <cite id="dsq-cite-14238">
                <span id="dsq-author-user-14238">Rajneesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14238" class="dsq-comment-body">
            <div id="dsq-comment-message-14238" class="dsq-comment-message"><pre> <code language="C">
int MaximumWidth(BinaryTree *root) {
  if (!root) return 0;
  
  queue&lt;BinaryTree*&gt; nodesQueue;
  int max_so_far=1;
  nodesQueue.push(root);
  int nodesInCurrentLevel = 1;
  int nodesInNextLevel = 0;
  
  while (!nodesQueue.empty()) {
    BinaryTree *currNode = nodesQueue.front();
    nodesQueue.pop();
    nodesInCurrentLevel--;
    if (currNode) {
      nodesQueue.push(currNode-&gt;left);
      nodesQueue.push(currNode-&gt;right);
      nodesInNextLevel += 2;
    }
    if (nodesInCurrentLevel == 0) {
      nodesInCurrentLevel = nodesInNextLevel;
	  if(max_so_far &lt; nodesInCurrentLevel)
		max_so_far=nodesInCurrentLevel;
      nodesInNextLevel = 0;
    }
  }
  
  return max_so_far;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10856">
        <div id="dsq-comment-header-10856" class="dsq-comment-header">
            <cite id="dsq-cite-10856">
                <span id="dsq-author-user-10856">prateek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10856" class="dsq-comment-body">
            <div id="dsq-comment-message-10856" class="dsq-comment-message"><p>#include &lt;queue&gt;<br />
#define DUMMY NULL<br />
int max_width(Node * root)<br />
{<br />
   queue&lt;Node *&gt;q;<br />
   int max_size=0,i=0;<br />
   q.insert(root);<br />
   q.insert(DUMMY);<br />
   while(!q.empty()){<br />
      Node *x=q.dequeue();<br />
      if(x!=DUMMY){<br />
         if(x-&gt;left) q.insert(x-&gt;left);<br />
         if(x-&gt;right) q.insert(x-&gt;right);<br />
         i++;<br />
      }else{<br />
         q.insert(DUMMY);<br />
         if(max_size&lt;i){<br />
            max_size=i;<br />
         }<br />
         i=0;<br />
      }<br />
   }<br />
   return max_size;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-10858">
        <div id="dsq-comment-header-10858" class="dsq-comment-header">
            <cite id="dsq-cite-10858">
                <span id="dsq-author-user-10858">prateek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10858" class="dsq-comment-body">
            <div id="dsq-comment-message-10858" class="dsq-comment-message"><p>sorry&#8230;.just add one condition check around initial inserts to the queue as below.</p>
<p>if(root){<br />
   q.insert(root);<br />
   q.insert(DUMMY);<br />
}</p>
<p>now it handles the base case also&#8230;..rest code is as it is given above in my comment&#8230;.if any bug is there then plz lemme know..:)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-31386">
        <div id="dsq-comment-header-31386" class="dsq-comment-header">
            <cite id="dsq-cite-31386">
                <span id="dsq-author-user-31386">Kumar Prashant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31386" class="dsq-comment-body">
            <div id="dsq-comment-message-31386" class="dsq-comment-message"><p>u have inqueued the null only one time. for the first level only.<br />
i think in the else condition, u should add one more statement like &#8221; q.insert(DUMMY);&#8221; for the next levels.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-odd thread-alt depth-1" id="dsq-comment-7316">
        <div id="dsq-comment-header-7316" class="dsq-comment-header">
            <cite id="dsq-cite-7316">
                <span id="dsq-author-user-7316">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7316" class="dsq-comment-body">
            <div id="dsq-comment-message-7316" class="dsq-comment-message"><p>@Raja and @jagdish: Thanks for suggesting a new method. We have included this to the original post.</p>
<p>@Nitish, @DivyaC and @tech.login.id2:  Thanks for suggesting the optimization to the original post. We have added a note for it.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4345">
        <div id="dsq-comment-header-4345" class="dsq-comment-header">
            <cite id="dsq-cite-4345">
                <span id="dsq-author-user-4345">Raja</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4345" class="dsq-comment-body">
            <div id="dsq-comment-message-4345" class="dsq-comment-message"><pre> <code language="C">
N = height of the tree;
static int COUNT[N]; initialize all elements to 0.

computeWidth(root,level)
{
   if( root == null ) return 0;
   COUNT[level]++;
   computeWidth(root-&gt;left,level+1);
   computeWidth(root-&gt;right,level+1);
}
int MAX = 0;
int max_width()
{
  for(int i =1 ;i&lt;=N;i++){
   if ( MAX &lt; COUNT[i]){
        MAX = COUNT[i];

 return MAX;
}
</code> </pre>
<p>Correct me if i&#039;m wrong&#8230;.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4098">
        <div id="dsq-comment-header-4098" class="dsq-comment-header">
            <cite id="dsq-cite-4098">
                <span id="dsq-author-user-4098">Jagdish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4098" class="dsq-comment-body">
            <div id="dsq-comment-message-4098" class="dsq-comment-message"><pre> <code language="C">
int Width(Node * root, int level, Hashtable ht, int * max)
{
	if(root == null) return max;

	if(!ht.haskey(level))
		ht.add(level, 0)
	
	ht[level] ++;

	if(max &lt; ht[level])
		max = ht[level];
	
	width(root-&gt;left, level + 1, ht);
	width(root-&gt;right, level + 1, ht);

	return max;	

}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-darkprince even thread-even depth-1" id="dsq-comment-4040">
        <div id="dsq-comment-header-4040" class="dsq-comment-header">
            <cite id="dsq-cite-4040">
                <span id="dsq-author-user-4040">darkprince</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4040" class="dsq-comment-body">
            <div id="dsq-comment-message-4040" class="dsq-comment-message"><p>This could be done with BFS . Just a little modification is required such that we have to keep on checking no of children present between the parent . A queue will be required.<br />
Correct me if i am wrong .</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-6470">
        <div id="dsq-comment-header-6470" class="dsq-comment-header">
            <cite id="dsq-cite-6470">
                <span id="dsq-author-user-6470">amit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6470" class="dsq-comment-body">
            <div id="dsq-comment-message-6470" class="dsq-comment-message"><p>I agree to this. However an additional space requirement, if using FIFO for the BFS implementation may be an issue.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4015">
        <div id="dsq-comment-header-4015" class="dsq-comment-header">
            <cite id="dsq-cite-4015">
                <span id="dsq-author-user-4015">Dhanasekar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4015" class="dsq-comment-body">
            <div id="dsq-comment-message-4015" class="dsq-comment-message"><p>There is another way i could think of </p>
<p>have two queue S1 and S2, both are empty.</p>
<p>Enque the S1 with root.<br />
S1 is active, S2 is inactive</p>
<p>count = 0;<br />
max_width = 0;<br />
deque the Node from active queue<br />
    enque node-&gt;left into inactive queue<br />
    enque node-&gt;right into inactive queue<br />
    count++<br />
repeat this until the active queue is empty.<br />
when active queue becomes empty<br />
   if(max_width&lt;count)<br />
          max_width = count<br />
   swap the active and inactive queues and set count=0;<br />
repeat this until both the queue becomes empty.</p>
<p>the maximum queue size i.e space complexity would be O(m) where m is the max width of the tree.<br />
run time would be O(n) where n is the number of nodes in the tree.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-3704">
        <div id="dsq-comment-header-3704" class="dsq-comment-header">
            <cite id="dsq-cite-3704">
                <span id="dsq-author-user-3704">Mike Hang</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3704" class="dsq-comment-body">
            <div id="dsq-comment-message-3704" class="dsq-comment-message"><p>I would use the same basic idea of BFS with additional variable, say count. </p>
<p>1. Set count to 1 before the loop<br />
2. Decrease count by 1 after dequeue<br />
3. Add left and right node if there are any<br />
4. Check if count == 0. This flag tells we are switching the level<br />
    &#8211; Reset count to queue size</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-2349">
        <div id="dsq-comment-header-2349" class="dsq-comment-header">
            <cite id="dsq-cite-2349">
                <span id="dsq-author-user-2349">bsh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2349" class="dsq-comment-body">
            <div id="dsq-comment-message-2349" class="dsq-comment-message"><p>I dont know whether it will work!!!<br />
But cant we modify <a href="http://geeksforgeeks.org/?p=8615" rel="nofollow">&#8220;Print nodes at k distance from root&#8221;</a> to know the length.<br />
if(k==0){<br />
push(root-&gt;data);<br />
return;}<br />
Stack pointer value will give u width of binary tree at k level.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-vibhav3008 odd alt thread-even depth-1" id="dsq-comment-2323">
        <div id="dsq-comment-header-2323" class="dsq-comment-header">
            <cite id="dsq-cite-2323">
                <span id="dsq-author-user-2323">vibhav3008</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2323" class="dsq-comment-body">
            <div id="dsq-comment-message-2323" class="dsq-comment-message"><pre> <code language="CPP">
void findwidth(node *root, int width[],int level)
{
    if(root!=NULL)
    {
        width[level]++;
        findwidth(root-&gt;left,width,level+1);
        findwidth(root-&gt;right,width,level+1);
    }
}

void findmaxwidth(node *root)
{
    cout&lt;&lt;&quot;came here&quot;&lt;&lt;endl;
    int h=height(root);
    int widthlist[h];
    for(int i=0;i&lt;h;i++)
    {
        widthlist[i]=0;
    }
    findwidth(root,widthlist,0);
    int max=0,level=0;
    for(int i=0;imax)
        {
            max=widthlist[i];
            level=i;
        }
    }
    cout&lt;&lt;&quot;Maximum width= &quot;&lt;&lt;max&lt;&lt;&quot; at level &quot;&lt;&lt;level&lt;&lt;endl;
}
</code> </pre>
<p>//What do you think about this solution, it requires an array of size equal to the height of the tree<br />
//Time complexity : O(n)<br />
//Space complexity : O (h)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-2006">
        <div id="dsq-comment-header-2006" class="dsq-comment-header">
            <cite id="dsq-cite-2006">
                <span id="dsq-author-user-2006">aravindh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2006" class="dsq-comment-body">
            <div id="dsq-comment-message-2006" class="dsq-comment-message"><p>what will happen if the i/p is a left-skewed / right-skewed tree??<br />
since at each level der s 1ly one node &#8230; how 2 proceed?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-tech-login-id2 odd alt thread-even depth-1" id="dsq-comment-1968">
        <div id="dsq-comment-header-1968" class="dsq-comment-header">
            <cite id="dsq-cite-1968">
                <span id="dsq-author-user-1968">tech.login.id2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1968" class="dsq-comment-body">
            <div id="dsq-comment-message-1968" class="dsq-comment-message"><p>Done easily by using Level-Order-Traversal<br />
O(logN) space is required by the queue but that offsets the recursive stack used to calculate depth at each level.<br />
This one is more efficient than the given solution.</p>
<pre> <code language="C">int find_max_width (Tree *node) {

    if (!node)
        return 0;

    q-&gt;push (node);

    int w = 1;
    int max_w = 0;
    Tree *lev_start_node = node;


    while (q.empty() == false) {

        node = q.first();
        q-&gt;push (node-&gt;left);
        q-&gt;push (node-&gt;right);

        if (lev_start_node == node || q.empty() == true) {
            lev_start_node = node-&gt;left;
            if (max_w &lt; w)
                max_w = w;
            w = 0;
        }
        w++;
    }
    return max_w;
}</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-cyberwolf even depth-2" id="dsq-comment-15090">
        <div id="dsq-comment-header-15090" class="dsq-comment-header">
            <cite id="dsq-cite-15090">
                <span id="dsq-author-user-15090">cyberWolf</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15090" class="dsq-comment-body">
            <div id="dsq-comment-message-15090" class="dsq-comment-message"><p>It gives SegFault because if there are some NULL nodes, they are also put in queue and when we retrieve them using q.first() and try to access their &#8216;left&#8217; and &#8216;right&#8217;, it dumps core. Checks must be put to correct it.</p>
<pre> <code language="C">
while (q.empty() == false) {

        node = q.first();
        if(node-&gt;left)            
                q-&gt;push (node-&gt;left);

        if(node-&gt;right)
                q-&gt;push (node-&gt;right);

        if (lev_start_node == node || q.empty() == true) {
                if(node-&gt;left)
                        lev_start_node = node-&gt;left;
                else if(node-&gt;right)
                        lev_start_node = node-&gt;right;
                if (max_w &lt; w)
                        max_w = w;
                w = 0;
        }   
        w++;
}


</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-shek8034 odd alt depth-3" id="dsq-comment-19883">
        <div id="dsq-comment-header-19883" class="dsq-comment-header">
            <cite id="dsq-cite-19883">
                <span id="dsq-author-user-19883">shek8034</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19883" class="dsq-comment-body">
            <div id="dsq-comment-message-19883" class="dsq-comment-message"><p>Nice one&#8230;. Thanks <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-tech-login-id2 even thread-odd thread-alt depth-1" id="dsq-comment-1931">
        <div id="dsq-comment-header-1931" class="dsq-comment-header">
            <cite id="dsq-cite-1931">
                <span id="dsq-author-user-1931">tech.login.id2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1931" class="dsq-comment-body">
            <div id="dsq-comment-message-1931" class="dsq-comment-message"><p>I guess the level-order traversal solutions given by Nilesh and DivyaC are both fine and better. They could be added as optimized solution to the given solution.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-tech-login-id2 odd alt thread-even depth-1" id="dsq-comment-1783">
        <div id="dsq-comment-header-1783" class="dsq-comment-header">
            <cite id="dsq-cite-1783">
                <span id="dsq-author-user-1783">tech.login.id2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1783" class="dsq-comment-body">
            <div id="dsq-comment-message-1783" class="dsq-comment-message"><p>There is no need to compute the height of the tree.<br />
The loop using it can be terminated when width returned is zero.</p>
<p>Also, a version using Queues is better because it will save repeated traversing of the tree.<br />
What we need is BFS and some kind of manipulation of 2-3 integers like level, max-width etc to get this right.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-1784">
        <div id="dsq-comment-header-1784" class="dsq-comment-header">
            <cite id="dsq-cite-1784">
                <span id="dsq-author-user-1784">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1784" class="dsq-comment-body">
            <div id="dsq-comment-message-1784" class="dsq-comment-message"><p>Good one!! We will make the suggested changes.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1452">
        <div id="dsq-comment-header-1452" class="dsq-comment-header">
            <cite id="dsq-cite-1452">
                <span id="dsq-author-user-1452">Gagan Arora</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1452" class="dsq-comment-body">
            <div id="dsq-comment-message-1452" class="dsq-comment-message"><p>I am not able to understand the height() function.<br />
Wont it always return the value 1.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-1566">
        <div id="dsq-comment-header-1566" class="dsq-comment-header">
            <cite id="dsq-cite-1566">
                <span id="dsq-author-user-1566">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1566" class="dsq-comment-body">
            <div id="dsq-comment-message-1566" class="dsq-comment-message"><p>It correctly returns the height. See <a href="http://geeksforgeeks.org/?p=646" rel="nofollow">http://geeksforgeeks.org/?p=646</a> for detailed explanation.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-1433">
        <div id="dsq-comment-header-1433" class="dsq-comment-header">
            <cite id="dsq-cite-1433">
                <span id="dsq-author-user-1433">sunny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1433" class="dsq-comment-body">
            <div id="dsq-comment-message-1433" class="dsq-comment-message"><p>if tree is sparse&#8230;then is the above solution effective?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-1207">
        <div id="dsq-comment-header-1207" class="dsq-comment-header">
            <cite id="dsq-cite-1207">
                <span id="dsq-author-user-1207">Anshul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1207" class="dsq-comment-body">
            <div id="dsq-comment-message-1207" class="dsq-comment-message"><p>If anyone is interested in teaching data structure and solving problem on hourly basis. Please contact me via email. anshubansal2000 at  yahoo.com</p>
<p>thanks</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-2891">
        <div id="dsq-comment-header-2891" class="dsq-comment-header">
            <cite id="dsq-cite-2891">
                <span id="dsq-author-user-2891">Anony</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2891" class="dsq-comment-body">
            <div id="dsq-comment-message-2891" class="dsq-comment-message"><p>u got anyone ??? <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1202">
        <div id="dsq-comment-header-1202" class="dsq-comment-header">
            <cite id="dsq-cite-1202">
                <span id="dsq-author-user-1202">Nilesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1202" class="dsq-comment-body">
            <div id="dsq-comment-message-1202" class="dsq-comment-message"><p>This is the modified function that returns maxwidth with use of a queue. It basically does BFS of the tree and uses dummy node to figure out if a level ends.</p>
<pre> <code language="C">
#include &lt;queue&gt;
int maxWidth(struct node* root){
  if(root == NULL) return 0;
  int width=1;
  std::queue&lt;struct node*&gt; myqueue;
  myqueue.push(root);
  // Adding dummy Node to signify the end of a level
  myqueue.push(NULL);

  int count=0;
  while(!myqueue.empty()){
    struct node *temp=myqueue.front();
    myqueue.pop();
    // temp = NULL denotes end of one level
    if(temp == NULL){
      // count != 0 denote this had some nodes before this level ended so add dummy node and check for width
      // else denotes no more levels as this level had no nodes hence dont add dummy node to queue .. do nothing
      if(count != 0) {
        myqueue.push(NULL);
        if(count &gt; width ){
          width = count;
        }
        count = 0;
      }
    }else{
      // If not dummy Node just add its children to the queue and increment count
      count++;
      if(temp-&gt;left != NULL) myqueue.push(temp-&gt;left);
      if(temp-&gt;right != NULL) myqueue.push(temp-&gt;right);
    }
  }
  return width;
}
</code> </pre>
<p>Time Complexity O(n)<br />
Space Complexity O(n) the amount of space need by queue</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geek4u odd alt depth-2" id="dsq-comment-1205">
        <div id="dsq-comment-header-1205" class="dsq-comment-header">
            <cite id="dsq-cite-1205">
                <span id="dsq-author-user-1205">geek4u</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1205" class="dsq-comment-body">
            <div id="dsq-comment-message-1205" class="dsq-comment-message"><p>You should have enqueue/dequeue operations on a queue, not push/pop <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-1206">
        <div id="dsq-comment-header-1206" class="dsq-comment-header">
            <cite id="dsq-cite-1206">
                <span id="dsq-author-user-1206">Nilesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1206" class="dsq-comment-body">
            <div id="dsq-comment-message-1206" class="dsq-comment-message"><p>Please refer this<br />
<a href="http://www.cplusplus.com/reference/stl/queue/" rel="nofollow">http://www.cplusplus.com/reference/stl/queue/</a></p>
<p>It has 2 function for FIFO queue as &#8220;push&#8221; .. which pushes the element at the back of the cube and &#8220;pop&#8221; which removes the element at the front of the queue. I have tested this code.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1143">
        <div id="dsq-comment-header-1143" class="dsq-comment-header">
            <cite id="dsq-cite-1143">
                <span id="dsq-author-user-1143">DivyaC</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1143" class="dsq-comment-body">
            <div id="dsq-comment-message-1143" class="dsq-comment-message"><pre> <code language="C">
int maxWidth(Node root){// total algo n+log n
	if(root==null) return 0;
	Set&lt;Node&gt; levelEnds=getLevelEnds(root);
	int width=1;
	Queue&lt;Node&gt; Q=new Queue();
	Q.add(root);
	
	int count=0;
	while(!Q.empty){
		Node temp=Q.dequeue();
		count++;
		if(levelEnds.contains(temp)){
			if(width&lt; count){
				width=count;
			}
			count=0;
		}
		if(temp.left!=null) Q.add(temp.left);
		if(temp.right!=null) Q.add(temp.right);
	}
	return width;
}

ArrayList&lt;Node&gt; getLevelEnds(Node root){// log n where n is the number of nodes
	Set&lt;Node&gt; levelEnds=new HashSet();
	levelEnds.add(root);
	Node curr=root;
	while(curr.right!=null){
		levelEnds.add(curr.right);
		curr=curr.right;
	}
	return levelEnds;
}</code> </pre>
<p>// please let me know via mail if i am wrong</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-1201">
        <div id="dsq-comment-header-1201" class="dsq-comment-header">
            <cite id="dsq-cite-1201">
                <span id="dsq-author-user-1201">Nil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1201" class="dsq-comment-body">
            <div id="dsq-comment-message-1201" class="dsq-comment-message"><p>The above solution wont work because of the getLevelEnds being wrong. Consider a sample tree which is a mirror of the one give in the example above, the function getLevelEnds will return a hashset with 1,2,4 nodes in it which is wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/';
var disqus_identifier = '7447 http://geeksforgeeks.org/?p=7447';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Maximum width of a binary tree";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.210 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:26:23 -->

<!-- Compression = gzip -->
<!-- super cache -->