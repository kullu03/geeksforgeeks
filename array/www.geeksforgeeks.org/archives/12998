<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Dynamic Programming | Set 4 (Longest Common Subsequence) - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Dynamic Programming | Set 4 (Longest Common Subsequence) - GeeksforGeeks" />
<meta property="og:description" content="We have discussed Overlapping Subproblems and Optimal Substructure properties in Set 1 and Set 2 respectively. We also discussed one example problem in Set 3. Let us discuss Longest Common Subsequence (LCS) problem as one more example problem that can be solved using Dynamic Programming. LCS Problem Statement: Given two sequences, find the length of &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Dynamic Programming" />
<meta property="article:section" content="Misc" />
<meta property="article:published_time" content="2011-06-14T13:30:33+00:00" />
<meta property="article:modified_time" content="2014-04-23T18:31:53+00:00" />
<meta property="og:updated_time" content="2014-04-23T18:31:53+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.497 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110864 169.231.19.18';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Dynamic Programming | Set 4 (Longest Common Subsequence)</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>We have discussed Overlapping Subproblems and Optimal Substructure properties in <a href="http://geeksforgeeks.org/?p=12635">Set 1</a> and <a href="http://geeksforgeeks.org/?p=12819">Set 2</a> respectively. <span id="more-12998"></span>We also discussed one example problem in <a href="http://geeksforgeeks.org/?p=12832">Set 3</a>. <!--more-->Let us discuss Longest Common Subsequence (LCS) problem as one more example problem that can be solved using Dynamic Programming.</p>
<p><em>LCS Problem Statement:</em>  Given two sequences, find the length of longest subsequence present in both of them. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, &#8220;abc&#8221;, &#8220;abg&#8221;, &#8220;bdf&#8221;, &#8220;aeg&#8221;, &#8216;&#8221;acefg&#8221;, .. etc are subsequences of &#8220;abcdefg&#8221;.  So a string of length n has 2^n different possible subsequences.</p>
<p>It is a classic computer science problem, the basis of <a href="http://en.wikipedia.org/wiki/Diff">diff </a>(a file comparison program that outputs the differences between two files), and has applications in bioinformatics.</p>
<p><strong>Examples:</strong><br />
LCS for input Sequences &#8220;ABCDGH&#8221; and &#8220;AEDFHR&#8221; is &#8220;ADH&#8221; of length 3.<br />
LCS for input Sequences &#8220;AGGTAB&#8221; and &#8220;GXTXAYB&#8221; is &#8220;GTAB&#8221; of length 4.</p>
<p>The naive solution for this problem is to generate all subsequences of both given sequences and find the longest matching subsequence.  This solution is exponential in term of time complexity.  Let us see how this problem possesses both important properties of a Dynamic Programming (DP) Problem. </p>
<p><strong>1) Optimal Substructure: </strong><br />
Let the input sequences be X[0..m-1] and Y[0..n-1] of lengths m and n respectively. And let L(X[0..m-1],  Y[0..n-1]) be the length of LCS of the two sequences X and Y. Following is the recursive definition of L(X[0..m-1],  Y[0..n-1]).</p>
<p>If last characters of both sequences match (or X[m-1] == Y[n-1]) then<br />
L(X[0..m-1],  Y[0..n-1]) =  1 + L(X[0..m-2],  Y[0..n-2])</p>
<p>If last characters of both sequences do not match (or X[m-1] != Y[n-1]) then<br />
L(X[0..m-1],  Y[0..n-1]) =  MAX ( L(X[0..m-2],  Y[0..n-1]),   L(X[0..m-1],  Y[0..n-2])</p>
<p>Examples:<br />
1) Consider the input strings &#8220;AGGTAB&#8221; and &#8220;GXTXAYB&#8221;.  Last characters match for the strings. So length of LCS can be written as:<br />
L(&#8220;AGGTAB&#8221;, &#8220;GXTXAYB&#8221;) = 1 + L(&#8220;AGGTA&#8221;, &#8220;GXTXAY&#8221;)</p>
<p>2) Consider the input strings &#8220;ABCDGH&#8221; and &#8220;AEDFHR. Last characters do not match for the strings.  So length of LCS can be written as:<br />
L(“ABCDGH”, “AEDFHR”) = MAX ( L(“ABCDG”, “AEDFH<strong>R</strong>”), L(“ABCDG<strong>H</strong>”, “AEDFH”) )</p>
<p>So the LCS problem has optimal substructure property as the main problem can be solved using solutions to subproblems.</p>
<p><strong>2) Overlapping Subproblems:</strong><br />
Following is simple recursive implementation of the LCS problem. The implementation simply follows the recursive structure mentioned above.</p>
<pre class="brush: cpp; highlight: [7,8,9,10,11,12,13,14,15,16]; title: ; notranslate" title="">
/* A Naive recursive implementation of LCS problem */
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

int max(int a, int b);

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
   if (m == 0 || n == 0)
     return 0;
   if (X[m-1] == Y[n-1])
     return 1 + lcs(X, Y, m-1, n-1);
   else
     return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));
}

/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a &gt; b)? a : b;
}

/* Driver program to test above function */
int main()
{
  char X[] = &quot;AGGTAB&quot;;
  char Y[] = &quot;GXTXAYB&quot;;

  int m = strlen(X);
  int n = strlen(Y);

  printf(&quot;Length of LCS is %d\n&quot;, lcs( X, Y, m, n ) );

  getchar();
  return 0;
}
</pre>
<p>Time complexity of the above naive recursive approach is O(2^n) in worst case and worst case happens when all characters of X and Y mismatch i.e., length of LCS is 0.<br />
Considering the above implementation, following is a partial recursion tree for input strings &#8220;AXYT&#8221; and &#8220;AYZX&#8221;</p>
<pre>                         lcs("AXYT", "AYZX")
                       /                 \
         lcs("AXY", "AYZX")            lcs("AXYT", "AYZ")
         /            \                  /               \
lcs("AX", "AYZX") lcs("AXY", "AYZ")   lcs("AXY", "AYZ") lcs("AXYT", "AY")</pre>
<p>In the above partial recursion tree, lcs(&#8220;AXY&#8221;, &#8220;AYZ&#8221;) is being solved twice. If we draw the complete recursion tree, then we can see that there are many subproblems which are solved again and again. So this problem has Overlapping Substructure property and recomputation of same subproblems can be avoided by either using Memoization or Tabulation. Following is a tabulated implementation for the LCS problem. </p>
<pre class="brush: cpp; highlight: [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]; title: ; notranslate" title="">
/* Dynamic Programming implementation of LCS problem */
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
 
int max(int a, int b);
 
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
   int L[m+1][n+1];
   int i, j;
 
   /* Following steps build L[m+1][n+1] in bottom up fashion. Note 
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i&lt;=m; i++)
   {
     for (j=0; j&lt;=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;
 
       else if (X[i-1] == Y[j-1])
         L[i][j] = L[i-1][j-1] + 1;
 
       else
         L[i][j] = max(L[i-1][j], L[i][j-1]);
     }
   }
   
   /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
   return L[m][n];
}
 
/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a &gt; b)? a : b;
}
 
/* Driver program to test above function */
int main()
{
  char X[] = &quot;AGGTAB&quot;;
  char Y[] = &quot;GXTXAYB&quot;;
 
  int m = strlen(X);
  int n = strlen(Y);
 
  printf(&quot;Length of LCS is %d\n&quot;, lcs( X, Y, m, n ) );
 
  getchar();
  return 0;
}
</pre>
<p>Time Complexity of the above implementation is O(mn) which is much better than the worst case time complexity of Naive Recursive implementation. </p>
<p>The above algorithm/code returns only length of LCS.  Please see the following post for printing the LCS.<br />
<a href="http://www.geeksforgeeks.org/printing-longest-common-subsequence/" target="_blank">Printing Longest Common Subsequence  </a></p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
<p><strong>References: </strong><br />
<a href="http://www.youtube.com/watch?v=V5hZoJ6uK-s">http://www.youtube.com/watch?v=V5hZoJ6uK-s</a><br />
<a href="http://www.algorithmist.com/index.php/Longest_Common_Subsequence">http://www.algorithmist.com/index.php/Longest_Common_Subsequence</a><br />
<a href="http://www.ics.uci.edu/~eppstein/161/960229.html">http://www.ics.uci.edu/~eppstein/161/960229.html</a><br />
<a href="http://en.wikipedia.org/wiki/Longest_common_subsequence_problem">http://en.wikipedia.org/wiki/Longest_common_subsequence_problem</a></p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/job-sequencing-problem-set-1-greedy-algorithm/" title="Job Sequencing Problem | Set 1 (Greedy Algorithm)">Job Sequencing Problem | Set 1 (Greedy Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/multiply-two-polynomials-2/" title="Multiply two polynomials">Multiply two polynomials</a></li><li><a href="http://www.geeksforgeeks.org/algorithm-practice-question-beginners-set-1/" title="Algorithm Practice Question for Beginners | Set 1">Algorithm Practice Question for Beginners | Set 1</a></li><li><a href="http://www.geeksforgeeks.org/count-distinct-non-negative-pairs-x-y-satisfy-inequality-xx-yy-n-2/" title="Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y &lt; n">Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n</a></li><li><a href="http://www.geeksforgeeks.org/binomial-heap-2/" title="Binomial Heap">Binomial Heap</a></li><li><a href="http://www.geeksforgeeks.org/print-increasing-sequences-length-k-first-n-natural-numbers/" title="Print all increasing sequences of length k from first n natural numbers">Print all increasing sequences of length k from first n natural numbers</a></li><li><a href="http://www.geeksforgeeks.org/find-nth-number-number-system-3-4/" title="Find n&#8217;th number in a number system with only 3 and 4">Find n&#8217;th number in a number system with only 3 and 4</a></li><li><a href="http://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/" title="Minimum Cost Polygon Triangulation">Minimum Cost Polygon Triangulation</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/" rel="tag">Dynamic Programming</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fdynamic-programming-set-4-longest-common-subsequence%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/" data-text="Dynamic Programming | Set 4 (Longest Common Subsequence)" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34813">
        <div id="dsq-comment-header-34813" class="dsq-comment-header">
            <cite id="dsq-cite-34813">
                <span id="dsq-author-user-34813">Ankit Jain</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34813" class="dsq-comment-body">
            <div id="dsq-comment-message-34813" class="dsq-comment-message"><p>int lcs (char str1[],char str2[],int len1,int len2)<br />
{<br />
    int M[len1+1][len2+1],i,j,flag[len1+1][len2+1],a=0;<br />
    for(i=0;i&lt;len1+1;i++)<br />
    {<br />
        M[i][0]=0;<br />
        flag[i][0]=2;<br />
    }<br />
    for(j=0;j&lt;len2+1;j++)<br />
    {<br />
        M[0][j]=0;<br />
        flag[0][j]=2;<br />
    }<br />
    for(i=1;i&lt;len1+1;i++)<br />
    {<br />
        for(j=1;j=M[i][j-1])<br />
            {<br />
                M[i][j]=M[i-1][j];<br />
                flag[i][j]=1;<br />
            }<br />
            else<br />
            {<br />
                M[i][j]=M[i][j-1];<br />
                flag[i][j]=-1;<br />
            }<br />
        }<br />
    }</p>
<p>    i=len1;<br />
    j=len2;</p>
<p>    while(1)<br />
    {</p>
<p>        if(flag[i][j]==3)<br />
        {<br />
            printf(&#8220;%c&#8221;,str1[i-1]);<br />
            i-=1;j-=1;<br />
            a++;<br />
        }<br />
        else if(flag[i][j]==1)<br />
        {<br />
            i-=1;<br />
        }<br />
        else if(flag[i][j]==-1)<br />
        {<br />
            j-=1;<br />
        }<br />
        else<br />
        {<br />
            break;<br />
        }</p>
<p>    }<br />
    return a;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33060">
        <div id="dsq-comment-header-33060" class="dsq-comment-header">
            <cite id="dsq-cite-33060">
                <span id="dsq-author-user-33060">Joel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33060" class="dsq-comment-body">
            <div id="dsq-comment-message-33060" class="dsq-comment-message"><p>Here&#8217;s an implementation although not memoized that returns the sequence itself:</p>
<p>struct pair {</p>
<p>        int start;</p>
<p>        int end;</p>
<p>};</p>
<p>struct char_list {</p>
<p>        char c;</p>
<p>        struct char_list *next_char;</p>
<p>};</p>
<p>int find_len(struct char_list *list) {</p>
<p>        int n = 0;</p>
<p>        while(list) {</p>
<p>                n++;</p>
<p>                list = list-&gt;next_char;</p>
<p>        }</p>
<p>        return n;</p>
<p>}</p>
<p>struct char_list *lcs(char *str1, char *str2, struct pair p1, struct pair p2, struct char_list *clist)</p>
<p>{</p>
<p>        struct char_list *tmp;</p>
<p>        struct char_list *option1, *option2;</p>
<p>        if(p1.end &lt; p1.start ||  p2.end c = str1[p1.end];</p>
<p>                tmp-&gt;next_char = clist;</p>
<p>                p1.end&#8211;;</p>
<p>                p2.end&#8211;;</p>
<p>                return lcs(str1, str2, p1, p2, tmp);</p>
<p>        } else {</p>
<p>                p2.end&#8211;;</p>
<p>                option1 = lcs(str1, str2, p1, p2, clist);</p>
<p>                p2.end++;</p>
<p>                p1.end&#8211;;</p>
<p>                option2 = lcs(str1, str2, p1, p2, clist);</p>
<p>                p1.end++;</p>
<p>                /* TODO: Fix memory leaks */</p>
<p>                if(find_len(option1) &lt; find_len(option2))</p>
<p>                        return option2;</p>
<p>                else</p>
<p>                        return option1;</p>
<p>        }</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-31886">
        <div id="dsq-comment-header-31886" class="dsq-comment-header">
            <cite id="dsq-cite-31886">
                <span id="dsq-author-user-31886">wgpshashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31886" class="dsq-comment-body">
            <div id="dsq-comment-message-31886" class="dsq-comment-message"><p>int LCS_Memoization (int i, int j) //0,0 starting point<br />
    {<br />
	if (L[i,j] &lt; 0) {<br />
	    if (A[i] == &#039;&#039; || B[j] == &#039;&#039;) L[i,j] = 0;<br />
	    else if (A[i] == B[j]) L[i,j] = 1 + LCS_Memoization (i+1, j+1);<br />
	    else L[i,j] = max(LCS_Memoization (i+1, j), LCS_Memoization (i, j+1));<br />
	}<br />
	return L[i,j];<br />
    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31817">
        <div id="dsq-comment-header-31817" class="dsq-comment-header">
            <cite id="dsq-cite-31817">
                <span id="dsq-author-user-31817">prashnat</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31817" class="dsq-comment-body">
            <div id="dsq-comment-message-31817" class="dsq-comment-message"><p>/*</p>
<p>int fun(int** arr,char st1[],char st2[],int i,int j)</p>
<p>{</p>
<p>	if((i&gt;=strlen(st1))||(j&gt;=strlen(st2)))</p>
<p>	     return 0;</p>
<p>    if(arr[i][j]!=-1)</p>
<p>        return arr[i][j];</p>
<p>	if(st1[i]==st2[j])</p>
<p>	{</p>
<p>		arr[i][j]=1+fun(arr,st1,st2,i+1,j+1);</p>
<p>		return arr[i][j];</p>
<p>	}</p>
<p>	else</p>
<p>	{</p>
<p>	   arr[i][j]=max(fun(arr,st1,st2,i+1,j),fun(arr,st1,st2,i,j+1));</p>
<p>	   return arr[i][j];	</p>
<p>	}</p>
<p>}</p>
<p>*/</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-31816">
        <div id="dsq-comment-header-31816" class="dsq-comment-header">
            <cite id="dsq-cite-31816">
                <span id="dsq-author-user-31816">prashnat</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31816" class="dsq-comment-body">
            <div id="dsq-comment-message-31816" class="dsq-comment-message"><p><a href="http://ideone.com/pWnsvM" rel="nofollow">http://ideone.com/pWnsvM</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31136">
        <div id="dsq-comment-header-31136" class="dsq-comment-header">
            <cite id="dsq-cite-31136">
                <span id="dsq-author-user-31136">Code_Addict</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31136" class="dsq-comment-body">
            <div id="dsq-comment-message-31136" class="dsq-comment-message"><p>Java version for above LCS problem (Recursion + DP):<br />
<a href="http://ideone.com/fsgBNB" rel="nofollow">http://ideone.com/fsgBNB</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-32887">
        <div id="dsq-comment-header-32887" class="dsq-comment-header">
            <cite id="dsq-cite-32887">
                <span id="dsq-author-user-32887">rohtakdev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32887" class="dsq-comment-body">
            <div id="dsq-comment-message-32887" class="dsq-comment-message"><p>Doesn&#8217;t print correct sequence.<br />
try with AGGTAB and GXTXAYB</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28576">
        <div id="dsq-comment-header-28576" class="dsq-comment-header">
            <cite id="dsq-cite-28576">
                <span id="dsq-author-user-28576">tina</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28576" class="dsq-comment-body">
            <div id="dsq-comment-message-28576" class="dsq-comment-message"><p>How can we di backtracking to get the best optimal path?</p>
</div>
        </div>

    </li><!-- #comment-## -->
<ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33318">
        <div id="dsq-comment-header-33318" class="dsq-comment-header">
            <cite id="dsq-cite-33318">
                <span id="dsq-author-user-33318">sr</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33318" class="dsq-comment-body">
            <div id="dsq-comment-message-33318" class="dsq-comment-message"><p>fuck off..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-21025">
        <div id="dsq-comment-header-21025" class="dsq-comment-header">
            <cite id="dsq-cite-21025">
                <span id="dsq-author-user-21025">Aritra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21025" class="dsq-comment-body">
            <div id="dsq-comment-message-21025" class="dsq-comment-message"><p>i have used mergesort for this .. i think it&#8217;ll take O(nlogn) + O(n).. If i am wrong please comment.. thank you</p>
<pre> <code language="C">
/*Aritra Das*/


#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;

void Mergesort(char[],int,int);
void Merge(char[],int,int,int);

void main()
{
           int n,i,count=0,k;
           char a[100];
               
               printf(&quot;\nEnter 1st sequence length: &quot;);
               scanf(&quot;%d&quot;,&amp;n);
               printf(&quot;\nEnter the sequence : &quot;);
             
               for(i=0;i&lt;n;i++)
               {
                              a[i]=getche();
							   
							  							                  
							   	 }
                printf(&quot;\n\nEnter 2st sequence length: &quot;);
               scanf(&quot;%d&quot;,&amp;n);
               printf(&quot;\nEnter the sequence : &quot;);
             
               for(k=i;k&lt;n+i;k++)
               {
                              a[k]=getche();
							  // scanf(&quot;%c&quot;,&amp;a[i]); 
							  fflush(stdin);
							                  
							   	 }
         
		   printf(&quot;\n%d %d\n&quot;,n,i);
           
                  Mergesort(a,0,(n+i)-1);       
                 
               		  for(k=0;k&lt;(n+i);k++)
				  {
				  	
					  if(a[k]==a[k+1])
				  	{
				  	
						  count++;
					}
				  	
				  }     
				  
				  printf(&quot;\n\nThe Longest Common subsequence is of length %d&quot;,count);        
                                           
     }

void Mergesort(char a[],int low,int high)
{
                   int mid;
                   if(low&lt;high)
                   {
                               mid=(low+high)/2;
                               Mergesort(a,low,mid);
                               Mergesort(a,mid+1,high);
                               Merge(a,low,mid,high);
                               }     
     }
     
void Merge(char a[],int low,int mid,int high)
{
               int b[20],l1,r1,i;
               
               l1=low;
               r1=mid+1;
               i=low;
               
               while((l1&lt;=mid) &amp;&amp; (r1&lt;=high))
               {
                               if(a[l1]&lt;a[r1])
                               {
                                     b[i]=a[l1];
                                     l1++;
                                     i++;          
                                               }
                               else
                               {
                                   b[i]=a[r1];
                                   r1++;
                                   i++;
                                   }                
                               } 
                   while(l1&lt;=mid)
                   {
                                 b[i]=a[l1];
                                 l1++;
                                 i++;
                                 }   
                  
                    while(r1&lt;=high)
                    {
                                   b[i]=a[r1];
                                   r1++;
                                   i++;
                                   }   
                                                      
                  for(i=low;i&lt;=high;i++)
                            a[i]=b[i];                                                     
     }     
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-21026">
        <div id="dsq-comment-header-21026" class="dsq-comment-header">
            <cite id="dsq-cite-21026">
                <span id="dsq-author-user-21026">Aritra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21026" class="dsq-comment-body">
            <div id="dsq-comment-message-21026" class="dsq-comment-message"><p>sorry for posting this .. and couldn&#8217;t find the way to delete or modify it .. it&#8217;s wrong .. and i am working on this</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-32782">
        <div id="dsq-comment-header-32782" class="dsq-comment-header">
            <cite id="dsq-cite-32782">
                <span id="dsq-author-user-32782">Bharathkumar Hegde</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32782" class="dsq-comment-body">
            <div id="dsq-comment-message-32782" class="dsq-comment-message"><p>consider this input</p>
<p>Enter 1st sequence length: 2</p>
<p>Enter the sequence : aa</p>
<p>Enter 2st sequence length: 2</p>
<p>Enter the sequence : bb</p>
<p>actual ans is 0 but your solution gives 2 as answer. </p>
<p>your solution does not discriminate between characters from same string and characters from different string</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-jainamit0909gmail-com even thread-even depth-1" id="dsq-comment-19543">
        <div id="dsq-comment-header-19543" class="dsq-comment-header">
            <cite id="dsq-cite-19543">
                <span id="dsq-author-user-19543">AMIT</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19543" class="dsq-comment-body">
            <div id="dsq-comment-message-19543" class="dsq-comment-message"><p>Shouldn&#8217;t it be<br />
if(x[i-1]==y[i-1])<br />
l[i][j]=max(l[i-1][j],l[i][j-1],l[i-1][j-i]+1);<br />
instead of<br />
 L[i][j] = L[i-1][j-1] + 1;<br />
Will that make any difference?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-goyalmnl odd alt thread-odd thread-alt depth-1" id="dsq-comment-19358">
        <div id="dsq-comment-header-19358" class="dsq-comment-header">
            <cite id="dsq-cite-19358">
                <span id="dsq-author-user-19358">goyalmnl</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19358" class="dsq-comment-body">
            <div id="dsq-comment-message-19358" class="dsq-comment-message"><p>We can also do this using set3 approach. let arr[i] be the LCS of the sequence string1[i] and string2[n-1],including string1[i]. Also we store the position of string1[i] in string2 at each arr[i]. Now, for any j>i, first check the position of string1[j]>string1[i] in string2 and from these pick the one with maximum length.<br />
Finally, the one with the largest length (largest value of arr)is the ans.<br />
Please correct me if i am wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-18177">
        <div id="dsq-comment-header-18177" class="dsq-comment-header">
            <cite id="dsq-cite-18177">
                <span id="dsq-author-user-18177">Prateek Sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18177" class="dsq-comment-body">
            <div id="dsq-comment-message-18177" class="dsq-comment-message"><p>Python code with O(n) time complexity without using dynamic programming approach.It generates all longest common subsequence if present b/w two strings.<br />
Approach-<br />
1)Compute all substrings of both strings using normal substring generating algo(NO ned to use recursion here).Each substring has the same order of elements as present in original string.<br />
2)Compare all substrings of both strings with each other and find the longest common substring. That&#8217;s the answer.</p>
<p>import math<br />
def subStringsOfStringUsingBinaryMethod(list1,len1):<br />
    storingList =[]<br />
    list2 =[]<br />
    for i in range(int(len1+1)):<br />
        list2.append(i)<br />
    for i in list2:<br />
        remainder = []<br />
        temp =[]<br />
        while i!= 0:<br />
            remainder.append(i%2)<br />
            i = i/2<br />
        for i in range(len(remainder)):<br />
            if remainder[i] == 1:<br />
                temp.append(list1[i])<br />
        storingList.append(temp)<br />
    return storingList      </p>
<p>def longestCommonSubsequence(storingList,storingList1):<br />
    stringList =[]<br />
    for i in storingList:<br />
        for j in storingList1:<br />
            if i == j:<br />
                stringList.append(i)<br />
    max =0<br />
    var =&#8217;a&#8217;<br />
    for i in stringList:<br />
        if len(i)&gt;max:<br />
            max = len(i)<br />
    tempList =[]<br />
    for i  in stringList:</p>
<p>        if len(i) == max:<br />
            if any([True for e in [i] if e in tempList]):<br />
                continue<br />
            else:<br />
                tempList.append(i)<br />
    for i in tempList:<br />
        print &quot;&quot;.join(i)                            </p>
<p>def main():<br />
    string1 = &quot;bdcaba&quot;<br />
    string2 = &quot;abcbdab&quot;<br />
    list1 = list(string1)<br />
    list2 = list(string2)<br />
    len1 = math.pow(2,len(string1))-1<br />
    len2 = math.pow(2,len(string2))-1<br />
    storingList = subStringsOfStringUsingBinaryMethod(list1,len1)<br />
    storingList1 = subStringsOfStringUsingBinaryMethod(list2,len2)<br />
    longestCommonSubsequence(storingList,storingList1)</p>
<p>if __name__ == &#8216;__main__':<br />
    main()</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17272">
        <div id="dsq-comment-header-17272" class="dsq-comment-header">
            <cite id="dsq-cite-17272">
                <span id="dsq-author-user-17272">Laurence</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17272" class="dsq-comment-body">
            <div id="dsq-comment-message-17272" class="dsq-comment-message"><p>Something is wrong in the post. If(X[i-1] == Y[j-1]) we should not simply add 1 before we check the newly added character will keep the new longest common subsequence IN RELATIVE ORDER!!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-14586">
        <div id="dsq-comment-header-14586" class="dsq-comment-header">
            <cite id="dsq-cite-14586">
                <span id="dsq-author-user-14586">George</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14586" class="dsq-comment-body">
            <div id="dsq-comment-message-14586" class="dsq-comment-message"><p>&#8220;So a string of length n has 2^n different possible subsequences.&#8221;<br />
Aren&#8217;t 2^n-1 possible subsequences ?<br />
Regards</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-31436">
        <div id="dsq-comment-header-31436" class="dsq-comment-header">
            <cite id="dsq-cite-31436">
                <span id="dsq-author-user-31436">Prateek Jassal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31436" class="dsq-comment-body">
            <div id="dsq-comment-message-31436" class="dsq-comment-message"><p>I agree George. It will be 2^n-1 because the number of ways of choosing 0 characters from n (which is 1 way) is also included in 2^n. That is not a valid subsequence. I would request the authors to please update this.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10284">
        <div id="dsq-comment-header-10284" class="dsq-comment-header">
            <cite id="dsq-cite-10284">
                <span id="dsq-author-user-10284">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10284" class="dsq-comment-body">
            <div id="dsq-comment-message-10284" class="dsq-comment-message"><p>Can we straight away remove the characters present in first input sequence X and not in the second input sequence and the vice versa. </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10203">
        <div id="dsq-comment-header-10203" class="dsq-comment-header">
            <cite id="dsq-cite-10203">
                <span id="dsq-author-user-10203">chanchal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10203" class="dsq-comment-body">
            <div id="dsq-comment-message-10203" class="dsq-comment-message"><p>can anyone write a function to print all Longest Common Sequence with same max langth.<br />
for ex. strings are<br />
s1=&#8221;BDCABA&#8221;;<br />
s2=&#8221;ABCBDAB&#8221;;<br />
max length of LCS is 4 and there are two possible sequences.<br />
BDAB and BCAB</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-8792">
        <div id="dsq-comment-header-8792" class="dsq-comment-header">
            <cite id="dsq-cite-8792">
                <span id="dsq-author-user-8792">Shaanu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8792" class="dsq-comment-body">
            <div id="dsq-comment-message-8792" class="dsq-comment-message"><p>Can you please provide and explains the suffix tree or suffix array implementation as it would cost O(n+m) in finding the length of LCS..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-sparco odd alt thread-even depth-1" id="dsq-comment-7981">
        <div id="dsq-comment-header-7981" class="dsq-comment-header">
            <cite id="dsq-cite-7981">
                <span id="dsq-author-user-7981">sparco</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7981" class="dsq-comment-body">
            <div id="dsq-comment-message-7981" class="dsq-comment-message"><p>Code for First row and column space optimised in the code<br />
Instead of L[m+1][n+1] , L[m][n] can be used</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
/* Dynamic Programming implementation of LCS problem */
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
 
int max(int a, int b);
 
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
   int L[m][n];
   int i, j;
 
   /* Following steps build L[m+1][n+1] in bottom up fashion. Note
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i&lt;m; i++)
   {
     for (j=0; j&lt;n; j++)
     {
       if(X[i] == Y[j])
         L[i][j] = (i==0||j==0)?1:L[i-1][j-1]+1;
       else
         L[i][j] = (i==0||j==0)?0:max(L[i-1][j], L[i][j-1]);
   printf(&quot;%d&quot;,L[i][j]);
     }
     printf(&quot;\n&quot;);
   }
 

   /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
   return L[m-1][n-1];
}
 
/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a &gt; b)? a : b;
}
 
/* Driver program to test above function */
int main()
{
  char X[] = &quot;AGGTAB&quot;;
  char Y[] = &quot;GXTXAYB&quot;;
 
  int m = strlen(X);
  int n = strlen(Y);
 
  printf(&quot;Length of LCS is %d\n&quot;, lcs( X, Y, m, n ) );
 
  getchar();
  return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-17335">
        <div id="dsq-comment-header-17335" class="dsq-comment-header">
            <cite id="dsq-cite-17335">
                <span id="dsq-author-user-17335">Priyanka</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17335" class="dsq-comment-body">
            <div id="dsq-comment-message-17335" class="dsq-comment-message"><pre> <code language="C">
Can you please explain your
approach little bit?
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7621">
        <div id="dsq-comment-header-7621" class="dsq-comment-header">
            <cite id="dsq-cite-7621">
                <span id="dsq-author-user-7621">kartikaditya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7621" class="dsq-comment-body">
            <div id="dsq-comment-message-7621" class="dsq-comment-message"><p>public class LongestCommonSubsequence {<br />
    public static String getLongestCommonSubsequence(String s1, String s2) {<br />
		int dp[][] = new int[s1.length()][s2.length()];<br />
		dp[0][0] = (s1.charAt(0) == s2.charAt(0)) ? 1 : 0;<br />
		for (int i = 1; i &lt; s1.length(); ++i) {<br />
			if (s1.charAt(i) == s2.charAt(0)) {<br />
				dp[i][0] = 1;<br />
			} else {<br />
				dp[i][0] = dp[i &#8211; 1][0];<br />
			}<br />
		}<br />
		for (int i = 1; i &lt; s2.length(); ++i) {<br />
			if (s1.charAt(0) == s2.charAt(i)) {<br />
				dp[0][i] = 1;<br />
			} else {<br />
				dp[0][i] = dp[0][i &#8211; 1];<br />
			}<br />
		}<br />
		for (int i = 1; i &lt; s1.length(); ++i) {<br />
			for (int j = 1; j &lt; s2.length(); ++j) {<br />
				if (s1.charAt(i) == s2.charAt(j)) {<br />
					dp[i][j] = 1 + dp[i &#8211; 1][j &#8211; 1];<br />
				} else {<br />
					dp[i][j] = Math.max(dp[i][j &#8211; 1], dp[i &#8211; 1][j]);<br />
				}<br />
			}<br />
		}<br />
		StringBuffer sb = new StringBuffer();<br />
		int x = s1.length() &#8211; 1, y = s2.length() &#8211; 1;<br />
		while (x &gt;= 0 &amp;&amp; y &gt;= 0) {<br />
			if (s1.charAt(x) == s2.charAt(y)) {<br />
				sb.append(s1.charAt(x));<br />
				&#8211;x;<br />
				&#8211;y;<br />
			} else {<br />
				if (x &gt; 0 &amp;&amp; dp[x &#8211; 1][y] == dp[x][y]) {<br />
					&#8211;x;<br />
				} else {<br />
					&#8211;y;<br />
				}<br />
			}<br />
		}<br />
		return sb.reverse().toString();<br />
	}</p>
<p>	public static void main(String[] args) {<br />
		System.out.println(getLongestCommonSubsequence(&quot;ABCDGH&quot;, &quot;AEDFHR&quot;));<br />
		System.out.println(getLongestCommonSubsequence(&quot;AGGTAB&quot;, &quot;GXTXAYB&quot;));<br />
	}<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-14229">
        <div id="dsq-comment-header-14229" class="dsq-comment-header">
            <cite id="dsq-cite-14229">
                <span id="dsq-author-user-14229">York Tsai</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14229" class="dsq-comment-body">
            <div id="dsq-comment-message-14229" class="dsq-comment-message"><p>Thank you. Your code is very clearly.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-aggarwald2002 odd alt thread-even depth-1" id="dsq-comment-6784">
        <div id="dsq-comment-header-6784" class="dsq-comment-header">
            <cite id="dsq-cite-6784">
                <span id="dsq-author-user-6784">aggarwald2002</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6784" class="dsq-comment-body">
            <div id="dsq-comment-message-6784" class="dsq-comment-message"><p>Below is java code that also prints the longest common subsequence. It uses bottom-up dp technique.</p>
<p>public class LongestCommonSubsequence<br />
{</p>
<p>    /**<br />
     * longest-common-subsequence cache<br />
     */<br />
    private static List&lt;Character&gt;[][] lcsCache;</p>
<p>    /**<br />
     * We&#8217;ll use bottom-up dynamic programming technique.<br />
     *<br />
     *    LCS(X[0..m-1], Y[0..n-1]) = {<br />
     *      1. if character X[m-1] == Y[n-1], then this character will be part of LCS found for X[0..n-2] and Y[0..m-2]<br />
     *              LCS(X[0..m-2], Y[0..n-2]) + 1<br />
     *      2. if character X[m-1] != Y[n-1], then<br />
     *              max(LCS(X[0..m-1], Y[0..n-2], LCS(X[0..m-2], Y[0..n-1])<br />
     *<br />
     * @return list containing longest-common-subsequence for strings X and Y.<br />
     */<br />
    private static List&lt;Character&gt; LCS(Character[] X, Character[] Y)<br />
    {<br />
        // Initialize lcsCache for Y[0] and X[0..n-1]<br />
        for (int i = 0; i &lt; X.length; ++i) {<br />
            if (X[i].equals(Y[0])) {<br />
                lcsCache[i][0] = new ArrayList&lt;Character&gt;();<br />
                lcsCache[i][0].add(X[0]);<br />
            }<br />
            else {<br />
                lcsCache[i][0] = Collections.emptyList();<br />
            }<br />
        }</p>
<p>        // Initialize lcsCache for X[0] and Y[1..m-1]<br />
        for (int j = 1; j &lt; Y.length; ++j) {<br />
            if (X[0].equals(Y[j])) {<br />
                lcsCache[0][j] = new ArrayList&lt;Character&gt;();<br />
                lcsCache[0][j].add(X[0]);<br />
            }<br />
            else {<br />
                lcsCache[0][j] = Collections.emptyList();<br />
            }<br />
        }</p>
<p>        for (int i = 1; i &lt;= X.length &#8211; 1; ++i) {<br />
            for (int j = 1; j &lt;= Y.length &#8211; 1; ++j) {<br />
                if (X[i].equals(Y[j])) {<br />
                    lcsCache[i][j] = lcsCache[i &#8211; 1][j &#8211; 1] != null<br />
                        ? new ArrayList&lt;Character&gt;(lcsCache[i &#8211; 1][j &#8211; 1]) : new ArrayList&lt;Character&gt;();<br />
                    lcsCache[i][j].add(X[i]);<br />
                }<br />
                else {<br />
                    lcsCache[i][j] = max(<br />
                        lcsCache[i][j &#8211; 1] != null ? lcsCache[i][j &#8211; 1] : Collections.EMPTY_LIST,<br />
                        lcsCache[i &#8211; 1][j] != null ? lcsCache[i &#8211; 1][j] : Collections.EMPTY_LIST);<br />
                }<br />
            }<br />
        }</p>
<p>        return lcsCache[X.length &#8211; 1][Y.length &#8211; 1];<br />
    }</p>
<p>    private static List&lt;Character&gt; max(List&lt;Character&gt; list1, List&lt;Character&gt; list2)<br />
    {<br />
        return (list1.size() &gt;= list2.size() ? list1 : list2);<br />
    }</p>
<p>    /**<br />
     * @param args<br />
     */<br />
    public static void main(String[] args)<br />
    {<br />
        List&lt;Character&gt; input = new ArrayList&lt;Character&gt;();<br />
        Character[] X = new Character[] { &#8216;a&#8217;, &#8216;b&#8217;, &#8216;c&#8217;, &#8216;d&#8217;, &#8216;e&#8217;, &#8216;f&#8217;, &#8216;g&#8217;, &#8216;h&#8217;, &#8216;i&#8217;, &#8216;j&#8217; };<br />
        Character[] Y = new Character[] {<br />
            &#8216;b&#8217;, &#8216;a&#8217;, &#8216;d&#8217;, &#8216;c&#8217;, &#8216;f&#8217;, &#8216;e&#8217;, &#8216;h&#8217;, &#8216;a&#8217;, &#8216;b&#8217;, &#8216;c&#8217;, &#8216;d&#8217;, &#8216;e&#8217;, &#8216;f&#8217;, &#8216;g&#8217;, &#8216;h&#8217;, &#8216;i&#8217;, &#8216;j&#8217;, &#8216;g&#8217;, &#8216;j&#8217;, &#8216;i&#8217; };<br />
        lcsCache = new List[X.length][Y.length];</p>
<p>        List&lt;Character&gt; lcs = LCS(X, Y);<br />
        System.out.println(lcs);<br />
    }</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6516">
        <div id="dsq-comment-header-6516" class="dsq-comment-header">
            <cite id="dsq-cite-6516">
http://mobilityworld.wordpress.com                <span id="dsq-author-user-6516">Punit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6516" class="dsq-comment-body">
            <div id="dsq-comment-message-6516" class="dsq-comment-message"><p>Here is Java version of the Dynamic Programming implementation of LCS problem that prints the LCS</p>
<p>public class LCS {<br />
	public static void main(String[] args) {<br />
		String x = &quot;AGGTAB&quot;;<br />
		String y = &quot;GXTXAYB&quot;;<br />
		System.out.println(&quot;Length of LCS is &quot;+ lcs(x,y, x.length(), y.length()) );<br />
	}</p>
<p>	static String lcs(String x,String y, int m, int n){<br />
		if(m == 0 || n == 0)<br />
			return &quot;&quot;;</p>
<p>		if(x.charAt(m-1) == y.charAt(n-1)){<br />
			return lcs(x,y,m-1,n-1)+x.charAt(m-1);<br />
		}</p>
<p>		else<br />
			//return Math.max(lcs(x,y,m, n-1), lcs(x,y,m-1,n));<br />
			return maxString(lcs(x,y,m, n-1), lcs(x,y,m-1,n));</p>
<p>	}</p>
<p>	public static String maxString(String a, String b){<br />
		if(a.length() &gt;= b.length())<br />
			return a;<br />
		else<br />
			return b;<br />
	}<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-12850">
        <div id="dsq-comment-header-12850" class="dsq-comment-header">
            <cite id="dsq-cite-12850">
                <span id="dsq-author-user-12850">mohitk</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12850" class="dsq-comment-body">
            <div id="dsq-comment-message-12850" class="dsq-comment-message"><p>Hi,<br />
Just a query, but I think this would run in exponential time?<br />
This seems to be quite the opposite of Dynamic prog.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4591">
        <div id="dsq-comment-header-4591" class="dsq-comment-header">
            <cite id="dsq-cite-4591">
                <span id="dsq-author-user-4591">InvalidUserName</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4591" class="dsq-comment-body">
            <div id="dsq-comment-message-4591" class="dsq-comment-message"><p>Typo in explanation in Optimal Substructure section example</p>
<p>&#8220;Last characters do not match for strings “ABCDGH” and “AEDFHR”. So length of LCS can be written as:</p>
<p><del>L(“AGGTAB”, “GXTXAYB”)</del> = MAX ( L(“ABCDG”, “AEDFHR”), L(“ABCDGH”, “AEDFH”) )&#8221;</p>
<p>Replace with:<br />
L(“ABCDGH”, “AEDFHR”) = MAX ( L(“ABCDG”, “AEDFHR”), L(“ABCDGH”, “AEDFH”) )</p>
<p>-Ujjwal W</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-6305">
        <div id="dsq-comment-header-6305" class="dsq-comment-header">
            <cite id="dsq-cite-6305">
                <span id="dsq-author-user-6305">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6305" class="dsq-comment-body">
            <div id="dsq-comment-message-6305" class="dsq-comment-message"><p>@Ujjwal W:  Thanks for pointing this out.  We have corrected the typo.  Keep it up!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-venki even thread-odd thread-alt depth-1" id="dsq-comment-4320">
        <div id="dsq-comment-header-4320" class="dsq-comment-header">
            <cite id="dsq-cite-4320">
http://www.linkedin.com/in/ramanawithu                <span id="dsq-author-user-4320">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4320" class="dsq-comment-body">
            <div id="dsq-comment-message-4320" class="dsq-comment-message"><p>@Sandeep, the title is misleading. The programs prints only the length of LCS, not the LCS itself.</p>
<p>The table approach is more understandable if we can print the table status after each iteration of inner loop (initially fill the table with zeros or -1). Simply print the 2D matrix after every inner loop. It would be helpful to the beginners of DP how the algorithm builds the table.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-venki odd alt depth-2" id="dsq-comment-4321">
        <div id="dsq-comment-header-4321" class="dsq-comment-header">
            <cite id="dsq-cite-4321">
http://www.linkedin.com/in/ramanawithu                <span id="dsq-author-user-4321">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4321" class="dsq-comment-body">
            <div id="dsq-comment-message-4321" class="dsq-comment-message"><p>Hope the following code helps in printing the table at runtime.</p>
<pre> <code language="C">
/* Dynamic Programming implementation of LCS problem */
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

int max(int a, int b);

/* Change these string to test the program */
#define STRING_1 &quot;MZJAWXU&quot;
#define STRING_2 &quot;XMJYAXU&quot;

/* Algorithm visulization helper */
void display(int *base, int row, int col)
{
    int r, c;

    for(r = 0; r &lt; row; r++)
    {
        for(c = 0; c &lt; col; c++)
        {
            printf(&quot;\t%4d&quot;, (base + r * col));
        }

        printf(&quot;\n&quot;);
    }
}

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
    int L[sizeof(STRING_1)][sizeof(STRING_2)];
    int i, j;

    for (i = 0; i &lt;= m; i++)
    {
        for (j = 0; j &lt;= n; j++)
        {
            L[i][j] = -1;
        }
    }

    /* Following steps build L[m+1][n+1] in bottom up fashion. Note
    that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
    for (i = 0; i &lt;= m; i++)
    {
        for (j = 0; j &lt;= n; j++)
        {
            if (i == 0 || j == 0)
                L[i][j] = 0;

            else if(X[i-1] == Y[j-1])
                L[i][j] = L[i-1][j-1] + 1;

            else
                L[i][j] = max(L[i-1][j], L[i][j-1]);
        }

        /* Algorithm visulization code */
        display((int *)L, m+1, n+1);
        printf(&quot;\n\n&quot;);
    }

    /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
    return L[m][n];
}

/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a &gt; b) ? a : b;
}

/* Driver program to test above function */
int main()
{
    char X[] = STRING_1;
    char Y[] = STRING_2;

    int m = sizeof(STRING_1) - 1;
    int n = sizeof(STRING_2) - 1;

    printf(&quot;Length of LCS is %d\n&quot;, lcs( X, Y, m, n ) );

    return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4319">
        <div id="dsq-comment-header-4319" class="dsq-comment-header">
            <cite id="dsq-cite-4319">
                <span id="dsq-author-user-4319">rajeev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4319" class="dsq-comment-body">
            <div id="dsq-comment-message-4319" class="dsq-comment-message"><p>Nice post! One of the best contents for DP. </p>
<p>How to print LCS string?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-dumanshu odd alt depth-2" id="dsq-comment-4324">
        <div id="dsq-comment-header-4324" class="dsq-comment-header">
            <cite id="dsq-cite-4324">
                <span id="dsq-author-user-4324">Doom</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4324" class="dsq-comment-body">
            <div id="dsq-comment-message-4324" class="dsq-comment-message"><p>here I have written a backtrack function to print the LCS string. However, it prints one of the many(if exist) same length strings. Can someone modify it to print all the strings with same length??<br />
In the code, c1 and c2 are the respective lengths of the strings and mat is a 2D matrix of size (c1+1)*(c2+1).<br />
This function is called after LCS populates the matrix.</p>
<pre> <code language="C">
void backtrack(char *s1,char *s2,int **mat,int c1,int c2)
{
        if(c1!=0 &amp;&amp; c2!=0)
        if(s1[c1-1]==s2[c2-1])
        {
                backtrack(s1,s2,mat,c1-1,c2-1);
                printf(&quot;%c&quot;,s1[c1-1]);
        }
        else
        {
                if(mat[c1-1][c2] &gt; mat[c1][c2-1])
                        backtrack(s1,s2,mat,c1-1,c2);
                else
                        backtrack(s1,s2,mat,c1,c2-1);
        }
 
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-6763">
        <div id="dsq-comment-header-6763" class="dsq-comment-header">
            <cite id="dsq-cite-6763">
                <span id="dsq-author-user-6763">Teste</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6763" class="dsq-comment-body">
            <div id="dsq-comment-message-6763" class="dsq-comment-message"><p>How LCS populates the matrix?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-14802">
        <div id="dsq-comment-header-14802" class="dsq-comment-header">
            <cite id="dsq-cite-14802">
                <span id="dsq-author-user-14802">Yatendra Goel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14802" class="dsq-comment-body">
            <div id="dsq-comment-message-14802" class="dsq-comment-message"><p>The code below will print all the possible LCSs.</p>
<p>Note1: This code prints a LCS multiple times if multiple paths leads to the same LCS. One dirty way to fix this by store all the LCSs first and then print only unique LCS. So if you guys have any better idea to stop printing multiple LCS then please reply</p>
<p>Note2: The below recursive function can be memoized as it solves various same sub-problems multiple times</p>
<pre> <code language="C">
	private void printAllLCS_Strings_Recursively(int i, int j, String currentLCSStr) {;

		if (i == 0 || j == 0) { // base-case
			System.out.println(&quot;LCS_String: &quot; + currentLCSStr);
			return;
		}
		
		/*
		 * Reducing both i &amp; j by 1 because they represent matrix index and
		 * matrix contains one dummy row and column.
		 */
		if (x[i-1] == y[j-1]) {
			printAllLCS_Strings_Recursively(i-1, j-1, x[i-1] + currentLCSStr);
		} else {
			if (c[i-1][j] &gt; c[i][j-1]) // top-cell
				printAllLCS_Strings_Recursively(i-1, j, currentLCSStr);
			else if (c[i-1][j] &lt; c[i][j-1]) // left-cell
				printAllLCS_Strings_Recursively(i, j-1, currentLCSStr);
			else {
				
				printAllLCS_Strings_Recursively(i, j-1, currentLCSStr);
				printAllLCS_Strings_Recursively(i-1, j, currentLCSStr);
				
			}
		}
	}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-kartik even thread-odd thread-alt depth-1" id="dsq-comment-4316">
        <div id="dsq-comment-header-4316" class="dsq-comment-header">
            <cite id="dsq-cite-4316">
                <span id="dsq-author-user-4316">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4316" class="dsq-comment-body">
            <div id="dsq-comment-message-4316" class="dsq-comment-message"><p>Following is memoized version for the same problem.  </p>
<pre> <code language="C">
/* Memoized implementation of LCS problem */
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define NIL -1
#define MAX 1000
 
int max(int a, int b);
int L[MAX][MAX];

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{    
   if (L[m][n] == NIL)     
   {
     if (m == 0 || n == 0)
       L[m][n] = 0;
     else if(X[m-1] == Y[n-1])
       L[m][n] = 1 + lcs(X, Y, m-1, n-1);
     else
       L[m][n] = max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));
   }     
   
   return L[m][n];
}

void _initialize(int m, int n)
{
   int i, j;  
   for (i=0; i&lt;=m; i++)
     for (j=0; j&lt;=n; j++)
        L[i][j] = NIL;
}

/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a &gt; b)? a : b;
}
 
/* Driver program to test above function */
int main()
{
  char X[] = &quot;AGGTAB&quot;;
  char Y[] = &quot;GXTXAYB&quot;;
 
  int m = strlen(X);
  int n = strlen(Y);
 
  _initialize(m, n);
  printf(&quot;Length of LCS is %d\n&quot;, lcs( X, Y, m, n ) );
 
  getchar();
  return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/';
var disqus_identifier = '12998 http://geeksforgeeks.org/?p=12998';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Dynamic Programming | Set 4 (Longest Common Subsequence)";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.218 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:24:25 -->

<!-- Compression = gzip -->
<!-- super cache -->