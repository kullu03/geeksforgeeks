<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Breadth First Traversal for a Graph - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Breadth First Traversal for a Graph - GeeksforGeeks" />
<meta property="og:description" content="Breadth First Traversal (or Search) for a graph is similar to Breadth First Traversal of a tree (See mthod 2 of this post). The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Graph" />
<meta property="article:section" content="Graph" />
<meta property="article:published_time" content="2012-03-20T23:28:05+00:00" />
<meta property="article:modified_time" content="2014-02-09T19:30:47+00:00" />
<meta property="og:updated_time" content="2014-02-09T19:30:47+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/BFS.jpg" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.481 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110876 148.211.68.193';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Breadth First Traversal for a Graph</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p><a href="http://en.wikipedia.org/wiki/Breadth-first_search">Breadth First Traversal (or Search)</a> for a graph is similar to Breadth First Traversal of a tree (See mthod 2 of <a href="http://www.geeksforgeeks.org/archives/2686">this post</a>).<span id="more-18382"></span> The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array.  For simplicity, it is assumed that all vertices are reachable from the starting vertex.<br />
For example, in the following graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0. If we don’t mark visited vertices, then 2 will be processed again and it will become a non-terminating process. Breadth First Traversal of the following graph is 2, 0, 3, 1.</p>
<p><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/BFS.jpg"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/BFS.jpg" alt="" title="BFS" width="228" height="181" class="aligncenter size-full wp-image-18398" /></a></p>
<p>Following is C++ implementation of simple Breadth First Traversal from a given source. The implementation uses <a href="http://en.wikipedia.org/wiki/Adjacency_list">adjacency list representation</a> of graphs. <a href="http://en.wikipedia.org/wiki/Standard_Template_Library">STL</a>&#8216;s <a href="http://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html#LIST">list container</a> is used to store lists of adjacent nodes and queue of nodes needed for BFS traversal.</p>
<pre class="brush: cpp; highlight: [30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]; title: ; notranslate" title="">
// Program to print BFS traversal from a given source vertex. BFS(int s) 
// traverses vertices reachable from s.
#include&lt;iostream&gt;
#include &lt;list&gt;

using namespace std;

// This class represents a directed graph using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists
public:
    Graph(int V);  // Constructor
    void addEdge(int v, int w); // function to add an edge to graph
    void BFS(int s);  // prints BFS traversal from a given source s
};

Graph::Graph(int V)
{
    this-&gt;V = V;
    adj = new list&lt;int&gt;[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to v’s list.
}

void Graph::BFS(int s)
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for(int i = 0; i &lt; V; i++)
        visited[i] = false;

    // Create a queue for BFS
    list&lt;int&gt; queue;

    // Mark the current node as visited and enqueue it
    visited[s] = true;
    queue.push_back(s);

    // 'i' will be used to get all adjacent vertices of a vertex
    list&lt;int&gt;::iterator i;

    while(!queue.empty())
    {
        // Dequeue a vertex from queue and print it
        s = queue.front();
        cout &lt;&lt; s &lt;&lt; &quot; &quot;;
        queue.pop_front();

        // Get all adjacent vertices of the dequeued vertex s
        // If a adjacent has not been visited, then mark it visited
        // and enqueue it
        for(i = adj[s].begin(); i != adj[s].end(); ++i)
        {
            if(!visited[*i])
            {
                visited[*i] = true;
                queue.push_back(*i);
            }
        }
    }
}

// Driver program to test methods of graph class
int main()
{
    // Create a graph given in the above diagram
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout &lt;&lt; &quot;Following is Breadth First Traversal (starting from vertex 2) \n&quot;;
    g.BFS(2);

    return 0;
}
</pre>
<p>Output:</p>
<pre>
Following is Breadth First Traversal (starting from vertex 2)
2 0 3 1
</pre>
<p>Note that the above code traverses only the vertices reachable from a given source vertex. All the vertices may not be reachable from a given vertex (example Disconnected graph). To print all the vertices, we can modify the BFS function to do traversal starting from all nodes one by one (Like the <a href="http://www.geeksforgeeks.org/archives/18212">DFS modified version</a>) . </p>
<p>Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph.</p>
<p>Also see <a href="http://www.geeksforgeeks.org/archives/18212">Depth First Traversal</a></p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-1-introduction-approximate-algorithm-2/" title="Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)">Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/snake-ladder-problem-2/" title="Snake and Ladder Problem">Snake and Ladder Problem</a></li><li><a href="http://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/" title="Tarjan&#8217;s Algorithm to find Strongly Connected Components">Tarjan&#8217;s Algorithm to find Strongly Connected Components</a></li><li><a href="http://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/" title="Shortest path with exactly k edges in a directed and weighted graph">Shortest path with exactly k edges in a directed and weighted graph</a></li><li><a href="http://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/" title="Count all possible walks from a source to a destination with exactly k edges">Count all possible walks from a source to a destination with exactly k edges</a></li><li><a href="http://www.geeksforgeeks.org/euler-circuit-directed-graph/" title="Euler Circuit in a Directed Graph">Euler Circuit in a Directed Graph</a></li><li><a href="http://www.geeksforgeeks.org/given-array-strings-find-strings-can-chained-form-circle/" title="Given an array of strings, find if the strings can be chained to form a circle">Given an array of strings, find if the strings can be chained to form a circle</a></li><li><a href="http://www.geeksforgeeks.org/given-sorted-dictionary-find-precedence-characters/" title="Given a sorted dictionary of an alien language, find order of characters">Given a sorted dictionary of an alien language, find order of characters</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fbreadth-first-traversal-for-a-graph%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/" data-text="Breadth First Traversal for a Graph" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34711">
        <div id="dsq-comment-header-34711" class="dsq-comment-header">
            <cite id="dsq-cite-34711">
                <span id="dsq-author-user-34711">Simrat</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34711" class="dsq-comment-body">
            <div id="dsq-comment-message-34711" class="dsq-comment-message"><p>How The running time is O(V+E) for BFS..?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29529">
        <div id="dsq-comment-header-29529" class="dsq-comment-header">
            <cite id="dsq-cite-29529">
                <span id="dsq-author-user-29529">champ</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29529" class="dsq-comment-body">
            <div id="dsq-comment-message-29529" class="dsq-comment-message"><p>what are application of BFT??</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-32373">
        <div id="dsq-comment-header-32373" class="dsq-comment-header">
            <cite id="dsq-cite-32373">
                <span id="dsq-author-user-32373">Sherif Yosri</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32373" class="dsq-comment-body">
            <div id="dsq-comment-message-32373" class="dsq-comment-message"><p>Breadth-first search can be used to solve many problems in graph theory, for example:</p>
<p>Finding all nodes within one connected component<br />
Copying Collection, Cheney&#8217;s algorithm<br />
Finding the shortest path between two nodes u and v<br />
Testing a graph for bipartiteness<br />
(Reverse) Cuthill–McKee mesh numbering<br />
Ford–Fulkerson method for computing the maximum flow in a flow network<br />
Serialization/Deserialization of a binary tree vs serialization in sorted order, allows the tree to be re-constructed in an efficient manner.</p>
<p>Source: <a href="https://www.princeton.edu/~achaney/tmve/wiki100k/docs/Breadth-first_search.html" rel="nofollow">https://www.princeton.edu/~achaney/tmve/wiki100k/docs/Breadth-first_search.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29343">
        <div id="dsq-comment-header-29343" class="dsq-comment-header">
            <cite id="dsq-cite-29343">
                <span id="dsq-author-user-29343">Md Arquam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29343" class="dsq-comment-body">
            <div id="dsq-comment-message-29343" class="dsq-comment-message"><p>getting error :-</p>
<p>bfs.cpp:83:1: error: stray ‘240’ in program</p>
<p>bfs.cpp:83:1: error: stray ‘302’ in program</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-19396">
        <div id="dsq-comment-header-19396" class="dsq-comment-header">
            <cite id="dsq-cite-19396">
                <span id="dsq-author-user-19396">sky</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19396" class="dsq-comment-body">
            <div id="dsq-comment-message-19396" class="dsq-comment-message"><p>the best useful stuff. thank u guys! helped a lot <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-17201">
        <div id="dsq-comment-header-17201" class="dsq-comment-header">
            <cite id="dsq-cite-17201">
                <span id="dsq-author-user-17201">cooldude</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17201" class="dsq-comment-body">
            <div id="dsq-comment-message-17201" class="dsq-comment-message"><p>Above code can be wrong suppose if we start from vertex 3 then other nodes are unreachable.Minor adjustment is required.I am using adjacency matrix as input. I have implemented queue interface in java using class Queue.</p>
<p>public void BFSutil(boolean[][] mat,int start)<br />
	{<br />
		boolean[] visited=new boolean[mat.length];<br />
		visited=BFS(mat,start,visited);</p>
<p>		while(true)<br />
		{<br />
			boolean check=false;<br />
			for(int i=0;i&lt;mat.length;i++)<br />
			{<br />
				if(visited[i]==false)<br />
				{<br />
					check=true;<br />
					visited=BFS(mat,i,visited);<br />
				}<br />
			}<br />
			if(check==false)<br />
				break;<br />
		}<br />
	}<br />
	public boolean[] BFS(boolean[][] mat,int start,boolean[] visited)<br />
	{<br />
		QueuesImpl fifo=new QueuesImpl();<br />
		fifo.queue=new Integer[mat.length];<br />
		fifo.offer(start);<br />
		visited[start]=true;<br />
		while(!fifo.isEmpty())<br />
		{<br />
			Integer temp=(Integer)fifo.poll();<br />
			System.out.println(temp);<br />
			for(int i=0;i&lt;mat[0].length;i++)<br />
			{<br />
				if(mat[temp][i]==true &amp;&amp; visited[i]==false)<br />
				{<br />
					fifo.offer(i);<br />
					visited[i]=true;<br />
				}<br />
			}</p>
<p>		}<br />
	return visited;<br />
	}<br />
public static void main(String[] input)<br />
	{<br />
		Graph graph=new Graph();<br />
		boolean[][] sampleGraph=new boolean[5][5];<br />
		sampleGraph[0][1]=true;<br />
		sampleGraph[1][2]=true;</p>
<p>		sampleGraph[2][3]=true;<br />
		sampleGraph[2][0]=true;<br />
		sampleGraph[3][3]=true;<br />
		sampleGraph[4][3]=true;<br />
		sampleGraph[4][1]=true;<br />
graph.BFSutil(sampleGraph, 4);</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-17224">
        <div id="dsq-comment-header-17224" class="dsq-comment-header">
            <cite id="dsq-cite-17224">
                <span id="dsq-author-user-17224">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17224" class="dsq-comment-body">
            <div id="dsq-comment-message-17224" class="dsq-comment-message"><p>Please see the following note.<br />
<em>Note that the above code traverses only the vertices reachable from a given source vertex. All the vertices may not be reachable from a given vertex (example Disconnected graph). To print all the vertices, we can modify the BFS function to do traversal starting from all nodes one by one (Like the DFS modified version)</em></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17172">
        <div id="dsq-comment-header-17172" class="dsq-comment-header">
            <cite id="dsq-cite-17172">
                <span id="dsq-author-user-17172">honey</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17172" class="dsq-comment-body">
            <div id="dsq-comment-message-17172" class="dsq-comment-message"><p>Applications f bfs, pls !</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-12014">
        <div id="dsq-comment-header-12014" class="dsq-comment-header">
            <cite id="dsq-cite-12014">
                <span id="dsq-author-user-12014">Crystal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12014" class="dsq-comment-body">
            <div id="dsq-comment-message-12014" class="dsq-comment-message"><p>why use list for implementing queue when we can use std::queue instead</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10575">
        <div id="dsq-comment-header-10575" class="dsq-comment-header">
            <cite id="dsq-cite-10575">
                <span id="dsq-author-user-10575">deep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10575" class="dsq-comment-body">
            <div id="dsq-comment-message-10575" class="dsq-comment-message"><p>this code has errors. check.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-12459">
        <div id="dsq-comment-header-12459" class="dsq-comment-header">
            <cite id="dsq-cite-12459">
                <span id="dsq-author-user-12459">kavya gupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12459" class="dsq-comment-body">
            <div id="dsq-comment-message-12459" class="dsq-comment-message"><p>yup dude&#8230;u r saying ri8&#8230;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-34186">
        <div id="dsq-comment-header-34186" class="dsq-comment-header">
            <cite id="dsq-cite-34186">
                <span id="dsq-author-user-34186">khamms</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34186" class="dsq-comment-body">
            <div id="dsq-comment-message-34186" class="dsq-comment-message"><p>yeah yu also ryt :P:D</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-34187">
        <div id="dsq-comment-header-34187" class="dsq-comment-header">
            <cite id="dsq-cite-34187">
                <span id="dsq-author-user-34187">khamms</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34187" class="dsq-comment-body">
            <div id="dsq-comment-message-34187" class="dsq-comment-message"><p>yeah yu also ryt :P:D</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-34188">
        <div id="dsq-comment-header-34188" class="dsq-comment-header">
            <cite id="dsq-cite-34188">
                <span id="dsq-author-user-34188">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34188" class="dsq-comment-body">
            <div id="dsq-comment-message-34188" class="dsq-comment-message"><p>It worked for me, could someone specify the errors?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-7992">
        <div id="dsq-comment-header-7992" class="dsq-comment-header">
            <cite id="dsq-cite-7992">
                <span id="dsq-author-user-7992">sujit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7992" class="dsq-comment-body">
            <div id="dsq-comment-message-7992" class="dsq-comment-message"><pre> <code language="C">
/* /*An adjacency list written in the input1 file is provided for execution. The program can be tested by varying the contents of this input1 file. */


#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define c 100 

//initializing the variables to be used.
int a;       
int i,x,y,z,r,inp,l,flag;

int main()
{
	FILE* fp;
	fp = fopen(&quot;ip.txt&quot;,&quot;r&quot;); //opening the input1 file which contains the adjacency list.
	FILE* fp1;
	fp1 = fopen(&quot;op.txt&quot;,&quot;w&quot;); //creating the output file which will contain the result of whether it is a diagraph or not

	while(!feof(fp))
	{
/*
This loop will basically read the input file till the fle pointer poits to NULL. The do loop nested inside this will create an array with each element of the form (a,b) which means an edge is created from directed from a to b. The elements of the array will be displayed to the user. 
*/
		fscanf(fp,&quot;%d&quot;, &amp;x);  

		do	
		{
		fscanf(fp,&quot;%d&quot;, &amp;inp);
		
		if (inp &lt; 0)
		break;
		a[i][0]=x;
		a[i][1]=inp;
		printf(&quot;(%d,%d)\n&quot;,a[i][0],a[i][1]); 
		i++;
		} while(inp!=-1);
	}	
	r = i;  // here r is the upper limit of the loop to be used below.


/*
The for loop will compare the head of one edge with the tail of the other edge and vice-versa. If the two match, then it will break the loop  
and print NOT A DIAGRAPH in the output. Say if there exists (1,2) and (2,1). since 1 == 1 and 2==2 , NOT A DIAGRAPH. Else it will print DIGRAPH!!!. In case its a self loop, the user will know of it on execution. 
*/

for (i=0; i&lt;r; i++)
{

	z = a[i][0];
	y = a[i][1];

	
	for (l=i+1;l&lt;r;l++)
	{

		if ( a[l][0] == a[l][1] )
			printf(&quot;it is a self looping graph \n&quot;);

		if ( a[l][0] == y &amp;&amp; a[l][1] == z )
		{
			printf(&quot;%d&quot;,a[l][0]);
			printf(&quot;%d&quot;, a[l][1]);
			flag =1;
			break;
		}
		else
			continue;
	
	}
	 
	
	if (flag ==1)
	{
		fprintf(fp1,&quot;NOT A DIGRAPH\n&quot;);
		fclose(fp);
		fclose(fp1);
		return 0;
	}
	else
		continue;
}

fprintf(fp1,&quot;DIGRAPH!!!\n&quot;);
fclose(fp1);
fclose(fp);
	
	return 0;
}
 */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7858">
        <div id="dsq-comment-header-7858" class="dsq-comment-header">
            <cite id="dsq-cite-7858">
                <span id="dsq-author-user-7858">krishna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7858" class="dsq-comment-body">
            <div id="dsq-comment-message-7858" class="dsq-comment-message"><p><a href="http://en.wikipedia.org/wiki/Breadth-first_search#Applications" rel="nofollow">http://en.wikipedia.org/wiki/Breadth-first_search#Applications</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-7856">
        <div id="dsq-comment-header-7856" class="dsq-comment-header">
            <cite id="dsq-cite-7856">
                <span id="dsq-author-user-7856">shiv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7856" class="dsq-comment-body">
            <div id="dsq-comment-message-7856" class="dsq-comment-message"><p>What are the applications of BFS?   </p>
<p>Please write like your DFS application article.</p>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/';
var disqus_identifier = '18382 http://www.geeksforgeeks.org/?p=18382';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Breadth First Traversal for a Graph";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.187 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:24:37 -->

<!-- Compression = gzip -->
<!-- super cache -->