<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Searching for Patterns | Set 5 (Finite Automata) - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Searching for Patterns | Set 5 (Finite Automata) - GeeksforGeeks" />
<meta property="og:description" content="Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n &gt; m. Examples: 1) Input: txt[] = &quot;THIS IS A TEST TEXT&quot; pat[] = &quot;TEST&quot; Output: Pattern found at index 10 2) Input: txt[] = &quot;AABAACAADAABAAABAA&quot; pat[] &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Pattern Searching" />
<meta property="article:section" content="Strings" />
<meta property="article:published_time" content="2012-04-24T23:12:25+00:00" />
<meta property="article:modified_time" content="2012-06-16T00:14:49+00:00" />
<meta property="og:updated_time" content="2012-06-16T00:14:49+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/FA11.png" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/FA2.png" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.489 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111518 123.252.226.225';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Searching for Patterns | Set 5 (Finite Automata)</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given a text <em>txt[0..n-1]</em> and a pattern <em>pat[0..m-1]</em>, write a function <em>search(char pat[], char txt[])</em> that prints all occurrences of <em>pat[]</em> in <em>txt[]</em>. You may assume that n > m.<span id="more-18919"></span></p>
<p>Examples:<br />
1) Input:</p>
<pre>
  txt[] =  "THIS IS A TEST TEXT"
  pat[] = "TEST"</pre>
<p>Output:</p>
<p>Pattern found at index 10</p>
<p>2) Input:</p>
<pre>  txt[] =  "AABAACAADAABAAABAA"
  pat[] = "AABA"
</pre>
<p>Output:</p>
<pre>
   Pattern found at index 0
   Pattern found at index 9
   Pattern found at index 13
</pre>
<p>Pattern searching is an important problem in computer science. When we do search for a string in notepad/word file or browser or database, pattern searching algorithms are used to show the search results. </p>
<p>We have discussed the following algorithms in the previous posts:</p>
<p><a href="http://www.geeksforgeeks.org/archives/11871">Naive Algorithm </a><br />
<a href="http://www.geeksforgeeks.org/archives/11902">KMP Algorithm</a><br />
<a href="http://www.geeksforgeeks.org/archives/11937">Rabin Karp Algorithm</a></p>
<p>In this post, we will discuss Finite Automata (FA) based pattern searching algorithm. In FA based algorithm, we preprocess the pattern and build a 2D array that represents a Finite Automata. Construction of the FA is the main tricky part of this algorithm. Once the FA is built, the searching is simple. In search, we simply need to start from the first state of the automata and first character of the text.  At every step, we consider next character of text, look for the next state in the built FA and move to new state.  If we reach final state, then pattern is found in text. Time complexity of the search prcess is O(n).<br />
Before we discuss FA construction, let us take a look at the following FA for pattern ACACAGA.<br />
<a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/FA11.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/FA11.png" alt="" title="FA1" width="497" height="181" class="aligncenter size-full wp-image-18934" /></a></p>
<p><a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/FA2.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/FA2.png" alt="" title="FA2" width="154" height="188" class="aligncenter size-full wp-image-18931" /></a><br />
The abvoe diagrams represent graphical and tabular representations of pattern ACACAGA.</p>
<p>Number of states in FA will be M+1 where M is length of the pattern. The main thing to construct FA is to get the next state from the current state for every possible character. Given a character x and a state k, we can get the next state by considering the string &#8220;pat[0..k-1]x&#8221; which is basically concatenation of pattern characters pat[0], pat[1] &#8230; pat[k-1] and the character x. The idea is to get length of the longest prefix of the given pattern such that the prefix is also suffix of &#8220;pat[0..k-1]x&#8221;. The value of length gives us the next state. For example, let us see how to get the next state from current state 5 and character &#8216;C&#8217; in the above diagram. We need to consider the string, &#8220;pat[0..5]C&#8221; which is &#8220;ACACAC&#8221;. The lenght of the longest prefix of the pattern such that the prefix is suffix of &#8220;ACACAC&#8221;is 4 (&#8220;ACAC&#8221;).  So the next state (from state 5) is 4 for character &#8216;C&#8217;.  </p>
<p>In the following code, computeTF() constructs the FA. The time complexity of the computeTF() is O(m^3*NO_OF_CHARS) where m is length of the pattern and NO_OF_CHARS is size of alphabet (total number of possible characters in pattern and text). The implementation tries all possible prefixes starting from the longest possible that can be a suffix of &#8220;pat[0..k-1]x&#8221;. There are better implementations to construct FA in O(m*NO_OF_CHARS) (Hint: we can use something like <a href="http://www.geeksforgeeks.org/archives/11902">lps array construction in KMP algorithm</a>). We have covered the better implementation in our <a href="http://www.geeksforgeeks.org/archives/18902">next post on pattern searching</a>.</p>
<pre class="brush: cpp; highlight: [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#define NO_OF_CHARS 256

int getNextState(char *pat, int M, int state, int x)
{
    // If the character c is same as next character in pattern,
    // then simply increment state
    if (state &lt; M &amp;&amp; x == pat[state])
        return state+1;

    int ns, i;  // ns stores the result which is next state

    // ns finally contains the longest prefix which is also suffix
    // in &quot;pat[0..state-1]c&quot;

    // Start from the largest possible value and stop when you find
    // a prefix which is also suffix
    for (ns = state; ns &gt; 0; ns--)
    {
        if(pat[ns-1] == x)
        {
            for(i = 0; i &lt; ns-1; i++)
            {
                if (pat[i] != pat[state-ns+1+i])
                    break;
            }
            if (i == ns-1)
                return ns;
        }
    }

    return 0;
}

/* This function builds the TF table which represents Finite Automata for a
   given pattern  */
void computeTF(char *pat, int M, int TF[][NO_OF_CHARS])
{
    int state, x;
    for (state = 0; state &lt;= M; ++state)
        for (x = 0; x &lt; NO_OF_CHARS; ++x)
           TF[state][x] = getNextState(pat, M,  state, x);
}

/* Prints all occurrences of pat in txt */
void search(char *pat, char *txt)
{
    int M = strlen(pat);
    int N = strlen(txt);

    int TF[M+1][NO_OF_CHARS];

    computeTF(pat, M, TF);

    // Process txt over FA.
    int i, state=0;
    for (i = 0; i &lt; N; i++)
    {
       state = TF[state][txt[i]];
       if (state == M)
       {
         printf (&quot;\n patterb found at index %d&quot;, i-M+1);
       }
    }
}

// Driver program to test above function
int main()
{
   char *txt = &quot;AABAACAADAABAAABAA&quot;;
   char *pat = &quot;AABA&quot;;
   search(pat, txt);
   return 0;
}
</pre>
<p>Output:</p>
<pre>
   Pattern found at index 0
   Pattern found at index 9
   Pattern found at index 13
</pre>
<p><strong>References:</strong><br />
<a href="http://mitpress.mit.edu/algorithms/">Introduction to Algorithms by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a></p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-5-longest-common-substring-2/" title="Suffix Tree Application 5 &#8211; Longest Common Substring">Suffix Tree Application 5 &#8211; Longest Common Substring</a></li><li><a href="http://www.geeksforgeeks.org/generalized-suffix-tree-1/" title="Generalized Suffix Tree 1">Generalized Suffix Tree 1</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-4-build-linear-time-suffix-array/" title="Suffix Tree Application 4 &#8211; Build Linear Time Suffix Array">Suffix Tree Application 4 &#8211; Build Linear Time Suffix Array</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-3-longest-repeated-substring/" title="Suffix Tree Application 3 &#8211; Longest Repeated Substring">Suffix Tree Application 3 &#8211; Longest Repeated Substring</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-2-searching-all-patterns/" title="Suffix Tree Application 2 &#8211; Searching All Patterns">Suffix Tree Application 2 &#8211; Searching All Patterns</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-1-substring-check/" title="Suffix Tree Application 1 &#8211; Substring Check">Suffix Tree Application 1 &#8211; Substring Check</a></li><li><a href="http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-6/" title="Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 6">Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 6</a></li><li><a href="http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-5/" title="Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 5">Ukkonen&#8217;s Suffix Tree Construction &#8211; Part 5</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/pattern-searching/" rel="tag">Pattern Searching</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fsearching-for-patterns-set-5-finite-automata%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/" data-text="Searching for Patterns | Set 5 (Finite Automata)" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-27228">
        <div id="dsq-comment-header-27228" class="dsq-comment-header">
            <cite id="dsq-cite-27228">
                <span id="dsq-author-user-27228">alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27228" class="dsq-comment-body">
            <div id="dsq-comment-message-27228" class="dsq-comment-message"><p>Can someone please explain what is the difference between FA string matching and KMP String matching.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-28451">
        <div id="dsq-comment-header-28451" class="dsq-comment-header">
            <cite id="dsq-cite-28451">
                <span id="dsq-author-user-28451">dag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28451" class="dsq-comment-body">
            <div id="dsq-comment-message-28451" class="dsq-comment-message"><p>in case of KMP, there is no overhead of creating FA and storing FA, rather we have to construct lps which takes O(m) time only</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27067">
        <div id="dsq-comment-header-27067" class="dsq-comment-header">
            <cite id="dsq-cite-27067">
                <span id="dsq-author-user-27067">Iqbal Hawre</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27067" class="dsq-comment-body">
            <div id="dsq-comment-message-27067" class="dsq-comment-message"><p>/* I think this is Simplest PROGRAM */</p>
<p>#include<br />
#include<br />
#include<br />
int state=0;<br />
int count=0;<br />
char *s,*pattern;<br />
int Machine(int state,char input)<br />
{<br />
    switch(state)<br />
    {<br />
        case 0: if (input==pattern[0]){state=2;}<br />
            else{state=1;}<br />
            break;<br />
        case 1:<br />
            if (input==pattern[0]){state=2;}<br />
            else{state=1;}<br />
            break;<br />
        case 2:<br />
            if (input==pattern[0]){state=2;}<br />
            if(input==pattern[1]){state=3;}<br />
            if(input!=pattern[0] &amp;&amp; input!=pattern[1]){state=1;}<br />
            break;<br />
        case 3:<br />
            if (input==pattern[2]){state=4;count++;}<br />
            else{state=1;}<br />
            break;<br />
           case 4:<br />
            if (input==pattern[0]){state=2;}<br />
            else{state=1;}<br />
            break;</p>
<p>    }<br />
    return state;<br />
}<br />
void main()<br />
{<br />
    clrscr();<br />
    int arr[10];<br />
    char input;<br />
    printf(&#8220;nEnter the string: &#8220;);<br />
    scanf(&#8220;%s&#8221;,s);<br />
    printf(&#8220;nThe Given String is: %s&#8221;,s);<br />
    printf(&#8220;nEnter the pattern: &#8220;);<br />
    scanf(&#8220;%s&#8221;,pattern);<br />
    for(int i=0;s[i]!=&#8221;;i++)<br />
    { input=s[i];<br />
      state=Machine(state,input);<br />
    }<br />
    printf(&#8220;ncat: occurs %d times&#8221;,count);<br />
    getch();<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27066">
        <div id="dsq-comment-header-27066" class="dsq-comment-header">
            <cite id="dsq-cite-27066">
                <span id="dsq-author-user-27066">Iqbal Hawre</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27066" class="dsq-comment-body">
            <div id="dsq-comment-message-27066" class="dsq-comment-message"><p>/* I think this is Simplest PROGRAM */</p>
<p>#include<br />
#include<br />
#include<br />
int state=0;<br />
int count=0;<br />
char *s,*pattern;<br />
int Machine(int state,char input)<br />
{<br />
    switch(state)<br />
    {<br />
        case 0: if (input==pattern[0]){state=2;}<br />
            else{state=1;}<br />
            break;<br />
        case 1:<br />
            if (input==pattern[0]){state=2;}<br />
            else{state=1;}<br />
            break;<br />
        case 2:<br />
            if (input==pattern[0]){state=2;}<br />
            if(input==pattern[1]){state=3;}<br />
            if(input!=pattern[0] &amp;&amp; input!=pattern[1]){state=1;}<br />
            break;<br />
        case 3:<br />
            if (input==pattern[2]){state=4;count++;}<br />
            else{state=1;}<br />
            break;<br />
           case 4:<br />
            if (input==pattern[0]){state=2;}<br />
            else{state=1;}<br />
            break;</p>
<p>    }<br />
    return state;<br />
}<br />
void main()<br />
{<br />
    clrscr();<br />
    int arr[10];<br />
    char input;<br />
    printf(&#8220;nEnter the string: &#8220;);<br />
    scanf(&#8220;%s&#8221;,s);<br />
    printf(&#8220;nThe Given String is: %s&#8221;,s);<br />
    printf(&#8220;nEnter the pattern: &#8220;);<br />
    scanf(&#8220;%s&#8221;,pattern);<br />
    for(int i=0;s[i]!=&#8221;;i++)<br />
    { input=s[i];<br />
      state=Machine(state,input);<br />
    }<br />
    printf(&#8220;ncat: occurs %d times&#8221;,count);<br />
    getch();<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-sanjay-agarwal even thread-odd thread-alt depth-1" id="dsq-comment-22397">
        <div id="dsq-comment-header-22397" class="dsq-comment-header">
            <cite id="dsq-cite-22397">
                <span id="dsq-author-user-22397">Sanjay Agarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22397" class="dsq-comment-body">
            <div id="dsq-comment-message-22397" class="dsq-comment-message"><p>This is one of the solutions (Written in C++)<br />
Time Complexity: O(n*k)<br />
(n = size of given string, k = size of the pattern)<br />
Note: Solutions exist which have linear time complexity.</p>
<pre> <code language="C">
#include&lt;iostream&gt;
#include&lt;conio.h&gt;
#include&lt;string.h&gt;
using namespace std;

void pattern_matching_naive(char *str, char *pattern, int n, int k);

int main()
{
    char str[100] = {'&#92;&#48;'}, pattern[100]= {'&#92;&#48;'};
    int n,k;
    
    cout&lt;&lt;&quot;\nEnter the string: &quot;;
    gets(str);
        
    cout&lt;&lt;&quot;\nEnter the pattern: &quot;;
    gets(pattern);
        
    pattern_matching_naive(str, pattern,strlen(str), strlen(pattern)); 
    getch();
    return 0;
}

void pattern_matching_naive(char *str, char *pattern, int n, int k)
{
    int i,j, pos;
    for(i = 0; i &lt; n; i++)
    {
        pos = i;
        for(j=0; j&lt;k; )
        {
            if (pattern[j] == str[i])
            {
                j++;
                i++;
            }
            else
                break;
        }
        if (j == k)
        {
            cout&lt;&lt;&quot;\nPattern found at i = \n&quot; &lt;&lt;pos;
            i--;
        } 
        else
            i = i - j;      
    }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-even depth-1" id="dsq-comment-17990">
        <div id="dsq-comment-header-17990" class="dsq-comment-header">
            <cite id="dsq-cite-17990">
                <span id="dsq-author-user-17990">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17990" class="dsq-comment-body">
            <div id="dsq-comment-message-17990" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10944">
        <div id="dsq-comment-header-10944" class="dsq-comment-header">
            <cite id="dsq-cite-10944">
                <span id="dsq-author-user-10944">zeus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10944" class="dsq-comment-body">
            <div id="dsq-comment-message-10944" class="dsq-comment-message"><p>my code looks like this</p>
<p>#include<br />
using namespace std;</p>
<p>const int d=256;// here d represnts no. of types of letters used which is 4 here as A,B,C,D {Number of characters}</p>
<p>int getvalueforTF(char *b,int m,int i,int j) // i is value of state and j value corresponding to the character<br />
{<br />
        int max=0;<br />
        char z1=j;<br />
        int flag=0;<br />
        for(int a1=0;a1&lt;i+1;a1++)<br />
        {<br />
            flag=0;<br />
            if(z1==b[a1])<br />
            {<br />
                for(int a2=0;a2&lt;a1;a2++)<br />
                {<br />
                   if(b[i+a2-a1]!=b[a2])<br />
                   flag=1;<br />
                }<br />
                if(flag==0)<br />
                max=a1+1;<br />
            }<br />
        }<br />
        return max;<br />
}</p>
<p>void createTransitionFunction(int TF[][d],char *b,int m)<br />
{</p>
<p>    for(int i=0;i&lt;m+1;i++)<br />
    {<br />
        for(int j=0;j&lt;d;j++)<br />
        {<br />
            TF[i][j]=getvalueforTF(b,m,i,j);<br />
        }<br />
    }</p>
<p>    //for(int i=0;i&lt;m+1;i++)  //for printing TF  matrix<br />
    //{</p>
<p>      //  for(int j=0;j&lt;d;j++)<br />
       // {<br />
         //   if(j==65||j==66||j==67||j==68)<br />
           // cout&lt;&lt;TF[i][j]&lt;&lt;&quot; &quot;;<br />
        //}<br />
        //cout&lt;&lt;endl;<br />
    //}<br />
}</p>
<p>void SearchString(char *a,char *b,int n,int m)<br />
{</p>
<p>    int TF[m+1][d];<br />
    createTransitionFunction(TF,b,m);</p>
<p>    int a1=0;<br />
    for(int g1=0;g1&lt;n;g1++)<br />
    {<br />
        a1=TF[a1][a[g1]];<br />
        if(a1==m)<br />
        cout&lt;&lt;&quot;found at index &quot;&lt;&lt;g1-m+1&lt;&lt;endl;<br />
    }</p>
<p>}</p>
<p>int main()<br />
{</p>
<p>    char a[]=&quot;AABAACAADAABAACAADAABA&quot;;<br />
    char b[]=&quot;AABA&quot;;<br />
    int n=sizeof(a)/sizeof(char);<br />
    int m=sizeof(b)/sizeof(char);<br />
    SearchString(a,b,n-1,m-1);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10915">
        <div id="dsq-comment-header-10915" class="dsq-comment-header">
            <cite id="dsq-cite-10915">
                <span id="dsq-author-user-10915">zeus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10915" class="dsq-comment-body">
            <div id="dsq-comment-message-10915" class="dsq-comment-message"><p>how can u equate x and pat[ns-1] ?<br />
pls reply asap</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-27758">
        <div id="dsq-comment-header-27758" class="dsq-comment-header">
            <cite id="dsq-cite-27758">
                <span id="dsq-author-user-27758">Azim</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27758" class="dsq-comment-body">
            <div id="dsq-comment-message-27758" class="dsq-comment-message"><p>Yes it is wrong.</p>
<p>The condition should be like this<br />
if( state &lt; patLength &amp;&amp; pat[state] == (character + 65) ) // for uppercase letters</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9151">
        <div id="dsq-comment-header-9151" class="dsq-comment-header">
            <cite id="dsq-cite-9151">
                <span id="dsq-author-user-9151">Steven Bi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9151" class="dsq-comment-body">
            <div id="dsq-comment-message-9151" class="dsq-comment-message"><p>What is the advantage of using this algorithm?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-10916">
        <div id="dsq-comment-header-10916" class="dsq-comment-header">
            <cite id="dsq-cite-10916">
                <span id="dsq-author-user-10916">zeus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10916" class="dsq-comment-body">
            <div id="dsq-comment-message-10916" class="dsq-comment-message"><p>this execute in big theta of n though it is a complex algo<br />
but it is far far better than other algos</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-27737">
        <div id="dsq-comment-header-27737" class="dsq-comment-header">
            <cite id="dsq-cite-27737">
                <span id="dsq-author-user-27737">Azim</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27737" class="dsq-comment-body">
            <div id="dsq-comment-message-27737" class="dsq-comment-message"><p>Yes searching takes O(n) but to create transition table takes more than O(n^2) complexity.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8217">
        <div id="dsq-comment-header-8217" class="dsq-comment-header">
            <cite id="dsq-cite-8217">
                <span id="dsq-author-user-8217">Avi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8217" class="dsq-comment-body">
            <div id="dsq-comment-message-8217" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;string.h&gt;
void patern_Search(char *,char *);
int main()
{
    char input_String[] = &quot;THIS IS A TEST TEXT&quot;;
    char patern[] =&quot;TEST&quot;;
    int i = 0;
     
    patern_Search(input_String,patern);
    getch(); 
}
void patern_Search(char *a,char *b)
{
     int index,i,j,match,flag;
     i = 0;
     index = 0;
     j = 0;
     match = 0;
     flag = 0;
     
     while((*(a + i) != '&#092;&#048;'))
     { 
     
                  if(*(a + i) == *(b + j) )
                  {
                        
                       
                         i = i + 1;
                         j = j + 1;
                         match++;
                  }
                  else
                  {
                   i = i + 1;
                   j = 0;  
                   match = 0; 
                  }
                
              
        if(match == 1)
        {
                 index = i - 1;
        }
         if(match == strlen(b))
         {
           printf(&quot;Match Found at index %d&quot;,index);
           printf(&quot;\n&quot;);
           match = 0;
           j = 0;
           flag = 1;
      }
     }
     
     if(flag == 0)
     {
               printf(&quot;Match Not Found&quot;);
     }
    
    
}


</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-8218">
        <div id="dsq-comment-header-8218" class="dsq-comment-header">
            <cite id="dsq-cite-8218">
                <span id="dsq-author-user-8218">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8218" class="dsq-comment-body">
            <div id="dsq-comment-message-8218" class="dsq-comment-message"><p>@Avi: Your code looks like implementation of Naive String Matching algorithm.  The time complexity of Naive is O((n-m+1)*m) in worst case. Worst case time complexity of FA based and KMP algorithms is linear in worst case.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-10913">
        <div id="dsq-comment-header-10913" class="dsq-comment-header">
            <cite id="dsq-cite-10913">
                <span id="dsq-author-user-10913">zeus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10913" class="dsq-comment-body">
            <div id="dsq-comment-message-10913" class="dsq-comment-message"><p>your code is a bit better than naive string search algo<br />
as it uses the knowledge of previous processed data&#8230;</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-10917">
        <div id="dsq-comment-header-10917" class="dsq-comment-header">
            <cite id="dsq-cite-10917">
                <span id="dsq-author-user-10917">zeus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10917" class="dsq-comment-body">
            <div id="dsq-comment-message-10917" class="dsq-comment-message"><p>ur code is a bit better than naive algo as it use the knowledge of preprocesed data</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/';
var disqus_identifier = '18919 http://www.geeksforgeeks.org/?p=18919';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Searching for Patterns | Set 5 (Finite Automata)";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.194 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:35:18 -->

<!-- Compression = gzip -->
<!-- super cache -->