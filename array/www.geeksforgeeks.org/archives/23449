<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Check whether a given Binary Tree is Complete or not - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Check whether a given Binary Tree is Complete or not - GeeksforGeeks" />
<meta property="og:description" content="Given a Binary Tree, write a function to check whether the given Binary Tree is Complete Binary Tree or not. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. See following examples. The following trees are &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2012-09-06T13:14:22+00:00" />
<meta property="article:modified_time" content="2014-01-01T19:34:49+00:00" />
<meta property="og:updated_time" content="2014-01-01T19:34:49+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.485 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1418902785 183.82.77.210';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Check whether a given Binary Tree is Complete or not</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given a Binary Tree, write a function to check whether the given Binary Tree is Complete Binary Tree or not.<span id="more-23449"></span></p>
<p>A <a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees">complete binary tree</a> is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.  See following examples.</p>
<pre>
The following trees are examples of Complete Binary Trees
    1
  /   \
 2     3
  
       1
    /    \
   2       3
  /
 4

       1
    /    \
   2      3
  /  \    /
 4    5  6
</pre>
<pre>
The following trees are examples of Non-Complete Binary Trees
    1
      \
       3
  
       1
    /    \
   2       3
    \     /  \   
     4   5    6

       1
    /    \
   2      3
         /  \
        4    5
</pre>
<p>Source:  <a href="http://geeksforgeeks.org/forum/topic/write-an-algorithm-to-check-if-a-tree-is-complete-binary-tree-or-not">Write an algorithm to check if a tree is complete binary tree or not</a></p>
<p>The method 2 of <a href="http://www.geeksforgeeks.org/archives/2686">level order traversal post</a> can be easily modified to check whether a tree is Complete or not. To understand the approach, let us first define a term &#8216;Full Node&#8217;.  A node is &#8216;Full Node&#8217; if both left and right children are not empty (or not NULL).<br />
The approach is to do a level order traversal starting from root.  In the traversal, once a node is found which is NOT a Full Node, all the following nodes must be leaf nodes.<br />
Also, one more thing needs to be checked to handle the below case: If a node has empty left child, then the right child must be empty. </p>
<pre>
    1
  /   \
 2     3
  \
   4</pre>
<p>Thanks to Guddu Sharma for suggesting this simple and efficient approach. </p>
<pre class="brush: cpp; highlight: [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76]; title: ; notranslate" title="">
// A program to check if a given binary tree is complete or not
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
#define MAX_Q_SIZE 500

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

/* frunction prototypes for functions needed for Queue data
   structure. A queue is needed for level order tarversal */
struct node** createQueue(int *, int *);
void enQueue(struct node **, int *, struct node *);
struct node *deQueue(struct node **, int *);
bool isQueueEmpty(int *front, int *rear);

/* Given a binary tree, return true if the tree is complete
   else false */
bool isCompleteBT(struct node* root)
{
  // Base Case: An empty tree is complete Binary Tree
  if (root == NULL)
    return true;

  // Create an empty queue
  int rear, front;
  struct node **queue = createQueue(&amp;front, &amp;rear);

  // Create a flag variable which will be set true
  // when a non full node is seen
  bool flag = false;

  // Do level order traversal using queue.
  enQueue(queue, &amp;rear, root);
  while(!isQueueEmpty(&amp;front, &amp;rear))
  {
    struct node *temp_node = deQueue(queue, &amp;front);

    /* Ceck if left child is present*/
    if(temp_node-&gt;left)
    {
       // If we have seen a non full node, and we see a node
       // with non-empty left child, then the given tree is not
       // a complete Binary Tree
       if (flag == true)
         return false;

       enQueue(queue, &amp;rear, temp_node-&gt;left);  // Enqueue Left Child
    }
    else // If this a non-full node, set the flag as true
       flag = true;

    /* Ceck if right child is present*/
    if(temp_node-&gt;right)
    {
       // If we have seen a non full node, and we see a node
       // with non-empty left child, then the given tree is not
       // a complete Binary Tree
       if(flag == true)
         return false;

       enQueue(queue, &amp;rear, temp_node-&gt;right);  // Enqueue Right Child
    }
    else // If this a non-full node, set the flag as true
       flag = true;
  }

  // If we reach here, then the tree is complete Bianry Tree
  return true;
}


/*UTILITY FUNCTIONS*/
struct node** createQueue(int *front, int *rear)
{
  struct node **queue =
   (struct node **)malloc(sizeof(struct node*)*MAX_Q_SIZE);

  *front = *rear = 0;
  return queue;
}

void enQueue(struct node **queue, int *rear, struct node *new_node)
{
  queue[*rear] = new_node;
  (*rear)++;
}

struct node *deQueue(struct node **queue, int *front)
{
  (*front)++;
  return queue[*front - 1];
}

bool isQueueEmpty(int *front, int *rear)
{
   return (*rear == *front);
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{
   /* Let us construct the following Binary Tree which
      is not a complete Binary Tree
            1
          /   \
         2     3
        / \     \
       4   5     6
    */

  struct node *root  = newNode(1);
  root-&gt;left         = newNode(2);
  root-&gt;right        = newNode(3);
  root-&gt;left-&gt;left   = newNode(4);
  root-&gt;left-&gt;right  = newNode(5);
  root-&gt;right-&gt;right = newNode(6);

  if ( isCompleteBT(root) == true )
      printf (&quot;Complete Binary Tree&quot;);
  else
      printf (&quot;NOT Complete Binary Tree&quot;);

  return 0;
}
</pre>
<p>Output:
<pre>NOT Complete Binary Tree</pre>
<p><em>Time Complexity:</em> O(n) where n is the number of nodes in given Binary Tree</p>
<p><em>Auxiliary Space: </em>O(n) for queue.</p>
<p>Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/diagonal-sum-binary-tree/" title="Diagonal Sum of a Binary Tree">Diagonal Sum of a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/bottom-view-binary-tree/" title="Bottom View of a Binary Tree">Bottom View of a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/" title="Binary Indexed Tree or Fenwick tree">Binary Indexed Tree or Fenwick tree</a></li><li><a href="http://www.geeksforgeeks.org/implement-reverse-dns-look-cache/" title="How to Implement Reverse DNS Look Up Cache?">How to Implement Reverse DNS Look Up Cache?</a></li><li><a href="http://www.geeksforgeeks.org/given-n-appointments-find-conflicting-appointments/" title="Given n appointments, find all conflicting appointments">Given n appointments, find all conflicting appointments</a></li><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fcheck-if-a-given-binary-tree-is-complete-tree-or-not%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/" data-text="Check whether a given Binary Tree is Complete or not" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34641">
        <div id="dsq-comment-header-34641" class="dsq-comment-header">
            <cite id="dsq-cite-34641">
                <span id="dsq-author-user-34641">AlienOnEarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34641" class="dsq-comment-body">
            <div id="dsq-comment-message-34641" class="dsq-comment-message"><p>@Geeksforgeeks:</p>
<p>Easy and recursive solution.</p>
<p>int isNotCompleteBT(struct node *root)</p>
<p>{</p>
<p>	if(root == NULL)</p>
<p>		return 0;</p>
<p>	if((root-&gt;left == NULL &amp;&amp; root-&gt;right != NULL) || isNotCompleteBT(root-&gt;left) || isNotCompleteBT(root-&gt;right))</p>
<p>	{<br />
		return 1;</p>
<p>	}<br />
	return 0;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-34857">
        <div id="dsq-comment-header-34857" class="dsq-comment-header">
            <cite id="dsq-cite-34857">
                <span id="dsq-author-user-34857">master</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34857" class="dsq-comment-body">
            <div id="dsq-comment-message-34857" class="dsq-comment-message"><p>Lets say a tree has a root and 2 child nodes. These 2 child nodes have only left child. Its not complete BT. But your code will return true.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-34009">
        <div id="dsq-comment-header-34009" class="dsq-comment-header">
            <cite id="dsq-cite-34009">
                <span id="dsq-author-user-34009">ISha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34009" class="dsq-comment-body">
            <div id="dsq-comment-message-34009" class="dsq-comment-message"><p>Different approach: We count the number of nodes in the tree and then check if nodes lies in their respective index if they had to be put in an array, where if root has index i then  index of its left child will be 2*i+1 and for its right child will be 2*i+2.</p>
<p>Code:</p>
<p>#include </p>
<p>#include </p>
<p>using namespace std;</p>
<p>struct btree {</p>
<p>	int data;</p>
<p>    struct btree *left;</p>
<p>    struct btree *right;</p>
<p>};</p>
<p>struct btree * newNode(int d)</p>
<p>{</p>
<p>	struct btree *n=(struct btree *)malloc(sizeof(struct btree));</p>
<p>	n-&gt;data=d;</p>
<p>	n-&gt;left=n-&gt;right=NULL;</p>
<p>	return n;</p>
<p>}</p>
<p>int getNodesSum(struct btree *r)</p>
<p>{</p>
<p>	if(r==NULL) return 0;</p>
<p>	int lh=getNodesSum(r-&gt;left);</p>
<p>	int rh=getNodesSum(r-&gt;right);</p>
<p>	return lh+rh+1;</p>
<p>}</p>
<p>bool isCompleteTree(struct btree *r, int i, int n )</p>
<p>{</p>
<p>	if((r==NULL &amp;&amp; i=n)) return false;</p>
<p>	if(r==NULL) return true;</p>
<p>	return isCompleteTree(r-&gt;left,2*i+1,n)&amp;&amp;isCompleteTree(r-&gt;right,2*i+2,n);</p>
<p>}</p>
<p>int main() {</p>
<p>	struct btree *r=newNode(1);</p>
<p>	r-&gt;left=newNode(2);</p>
<p>	r-&gt;right=newNode(3);</p>
<p>	r-&gt;left-&gt;left=newNode(4);</p>
<p>	r-&gt;left-&gt;right=newNode(5);</p>
<p>	r-&gt;right-&gt;left=newNode(6);</p>
<p>	r-&gt;right-&gt;right=newNode(7);</p>
<p>	r-&gt;left-&gt;left-&gt;left=newNode(8);</p>
<p>	r-&gt;left-&gt;left-&gt;right=newNode(9);</p>
<p>//	r-&gt;left-&gt;right-&gt;right=newNode(11);</p>
<p>//	r-&gt;left-&gt;right-&gt;left=newNode(11);</p>
<p>//	r-&gt;right-&gt;left-&gt;left=newNode(10);</p>
<p>	int n=getNodesSum(r);</p>
<p>	if(isCompleteTree(r,0,n))</p>
<p>	cout&lt;&lt;&quot;Complete tree&quot;&lt;&lt;endl;</p>
<p>	else </p>
<p>	cout&lt;&lt;&quot;Incomplete tree&quot;&lt;&lt;endl;</p>
<p>	return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-33286">
        <div id="dsq-comment-header-33286" class="dsq-comment-header">
            <cite id="dsq-cite-33286">
                <span id="dsq-author-user-33286">Mohaan Raja</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33286" class="dsq-comment-body">
            <div id="dsq-comment-message-33286" class="dsq-comment-message"><p>#include<br />
#include </p>
<p>/* A binary tree node has data, pointer to left child<br />
   and a pointer to right child */<br />
struct node<br />
{<br />
     int data;<br />
     struct node* left;<br />
     struct node* right;<br />
};</p>
<p>/* Helper function that allocates a new node with the<br />
   given data and NULL left and right pointers. */<br />
struct node* newNode(int data)<br />
{<br />
     struct node* node = (struct node*)<br />
                                  malloc(sizeof(struct node));<br />
     node-&gt;data = data;<br />
     node-&gt;left = NULL;<br />
     node-&gt;right = NULL;</p>
<p>     return(node);<br />
}</p>
<p>/* Given a binary tree, print its nodes in inorder*/<br />
int printPreorder(struct node* node)<br />
{<br />
     if (node == NULL)<br />
          return 1;</p>
<p>if(node-&gt;left != NULL &amp;&amp; node -&gt;right == NULL  )<br />
return 1;</p>
<p>if(node -&gt;left == NULL &amp;&amp; node -&gt;right == NULL)<br />
return 1;</p>
<p>if(node -&gt;left == NULL &amp;&amp; node -&gt;right != NULL)<br />
return 0;</p>
<p>return (printPreorder(node-&gt;left) &amp;&amp;  printPreorder(node-&gt;right));</p>
<p>}   </p>
<p>int max(int a, int b)<br />
{<br />
    return a&gt;b?a:b;<br />
}<br />
int height(struct node *root)<br />
{<br />
    if(root==NULL)<br />
    return 0;<br />
    else<br />
    return 1+ max(height(root-&gt;left), height(root-&gt;right));<br />
}</p>
<p>/* Driver program to test above functions*/<br />
int main()<br />
{</p>
<p>printf(&#8220;Response Values : n0-Not a Complete Binary Tree.n1- Complete Binary Tree.&#8221;);</p>
<p>     struct node *root  = newNode(1);<br />
  root-&gt;right= newNode(2);</p>
<p> int response =0;<br />
    if(height(root-&gt;left)right))<br />
    {<br />
     response = 0;<br />
    }<br />
    else<br />
    {<br />
     response = printPreorder(root);<br />
    }<br />
    printf(&#8220;n%d&#8221;,response);</p>
<p>     getchar();<br />
     return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-31236">
        <div id="dsq-comment-header-31236" class="dsq-comment-header">
            <cite id="dsq-cite-31236">
                <span id="dsq-author-user-31236">lokesh921</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31236" class="dsq-comment-body">
            <div id="dsq-comment-message-31236" class="dsq-comment-message"><p>Another approach.<br />
Do a reverse in-order traversal. Note the height of the first leaf in this traversal as max_height.<br />
If ((the height of other leaves is more than the max_height) || (a node has only one child)), the tree is not complete.</p>
<p>else the tree is complete</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-30569">
        <div id="dsq-comment-header-30569" class="dsq-comment-header">
            <cite id="dsq-cite-30569">
                <span id="dsq-author-user-30569">Vivek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30569" class="dsq-comment-body">
            <div id="dsq-comment-message-30569" class="dsq-comment-message"><p>im</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29478">
        <div id="dsq-comment-header-29478" class="dsq-comment-header">
            <cite id="dsq-cite-29478">
                <span id="dsq-author-user-29478">xiaoguangye</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29478" class="dsq-comment-body">
            <div id="dsq-comment-message-29478" class="dsq-comment-message"><p>I have one Time O(n), Space O(lgn) solution. Please double check for me.<br />
A: Get height of tree, can check if (!node-&gt;left &amp;&amp; node-&gt;right) as well.</p>
<p>B: Allocate int * level = malloc(height * sizeof(int)) to count nodes on each level.<br />
    Only allow deepest level to have none 2^n number of nodes</p>
<p>C: Use preorder traversal to check the second deepest level nodes. Every one of them after first none &#8220;full node&#8221; need to be leaf.</p>
<p>If the tree passes above three tests, it is a complete tree.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29226">
        <div id="dsq-comment-header-29226" class="dsq-comment-header">
            <cite id="dsq-cite-29226">
                <span id="dsq-author-user-29226">Vivek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29226" class="dsq-comment-body">
            <div id="dsq-comment-message-29226" class="dsq-comment-message"><p>O(n) solution without using any extra space and without calculating height.</p>
<p>please go throught this solution.</p>
<p><code><br />
int isComplete(struct node *root)<br />
{<br />
if(!root)<br />
return 1;<br />
if(!root-&gt;left)<br />
{<br />
if(root-&gt;right)<br />
return 0;<br />
else<br />
return 1;<br />
}<br />
if(root-&gt;left)<br />
{<br />
if(!root-&gt;right)<br />
{<br />
if(!root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right)<br />
return 1;<br />
else<br />
return 0;<br />
}<br />
else<br />
return isComplete(root-&gt;left)&amp;&amp;isComplete(root-&gt;right);<br />
}<br />
}</p>
<p></code></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-29848">
        <div id="dsq-comment-header-29848" class="dsq-comment-header">
            <cite id="dsq-cite-29848">
                <span id="dsq-author-user-29848">Jayanth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29848" class="dsq-comment-body">
            <div id="dsq-comment-message-29848" class="dsq-comment-message"><p>   1<br />
    /<br />
   2      3<br />
         /<br />
        4    5</p>
<p>ur code returns true for above tree which isn&#8217;t a complete tree</p>
<p>Edit : The tree is not clear in the diagram&#8230;<br />
the tree desc is<br />
root = 1<br />
1-&gt;left = 2;<br />
1-&gt;right = 3;</p>
<p>2-&gt;left = 2-&gt;right = NULL;</p>
<p>3-&gt;left = 4;<br />
3-&gt;right = 5;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-30570">
        <div id="dsq-comment-header-30570" class="dsq-comment-header">
            <cite id="dsq-cite-30570">
                <span id="dsq-author-user-30570">Vivek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30570" class="dsq-comment-body">
            <div id="dsq-comment-message-30570" class="dsq-comment-message"><p>my code does check this condition.<br />
if (height (root-&gt;left)right))<br />
 then its not a complete binary tree</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-34002">
        <div id="dsq-comment-header-34002" class="dsq-comment-header">
            <cite id="dsq-cite-34002">
                <span id="dsq-author-user-34002">ISha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34002" class="dsq-comment-body">
            <div id="dsq-comment-message-34002" class="dsq-comment-message"><p>It is giving incorrect results for this tree:</p>
<p>  struct node *root  = newNode(1);</p>
<p>  root-&gt;left         = newNode(2);</p>
<p>  root-&gt;right        = newNode(3);</p>
<p>  root-&gt;left-&gt;left   = newNode(4);</p>
<p>  root-&gt;left-&gt;right  = newNode(5);</p>
<p>  root-&gt;left-&gt;left-&gt;left = newNode(6);</p>
<p>  root-&gt;left-&gt;left-&gt;right  = newNode(7);</p>
<p>  root-&gt;right-&gt;left = newNode(8);</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29161">
        <div id="dsq-comment-header-29161" class="dsq-comment-header">
            <cite id="dsq-cite-29161">
                <span id="dsq-author-user-29161">digiter</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29161" class="dsq-comment-body">
            <div id="dsq-comment-message-29161" class="dsq-comment-message"><p>How about this one?</p>
<p><code></p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#include </p>
<p>#define OUT(x) cerr &lt;&lt; #x &lt;&lt; &quot;: &quot; &lt;&lt; (x) &lt;&lt; endl</p>
<p>#define REP(i, n) for (int i = 0; i &lt; (n); ++i)</p>
<p>#define SZ(x) ((int)x.size())</p>
<p>using namespace std;</p>
<p>typedef long long LL;</p>
<p>struct TreeNode {</p>
<p>    int data;</p>
<p>    TreeNode* left;</p>
<p>    TreeNode* right;</p>
<p>    TreeNode(int _data): data(_data), left(NULL), right(NULL) {}</p>
<p>};</p>
<p>bool is_complete(TreeNode* root) {</p>
<p>    vector v;</p>
<p>    v.push_back(root);</p>
<p>    for (int i = 0; i left)  v.push_back(v[i]-&gt;left);</p>
<p>        if (v[i]-&gt;right) v.push_back(v[i]-&gt;right);</p>
<p>    }</p>
<p>    for (int i = 0; i left) {</p>
<p>            if (!(i * 2 + 1 left)) return false;</p>
<p>        }</p>
<p>        if (v[i]-&gt;right) {</p>
<p>            if (!(i * 2 + 2 right)) return false;</p>
<p>        }</p>
<p>    }</p>
<p>    return true;</p>
<p>}</p>
<p>int main() {</p>
<p>    TreeNode *root     = new TreeNode(1);</p>
<p>    root-&gt;left         = new TreeNode(2);</p>
<p>    root-&gt;right        = new TreeNode(3);</p>
<p>    root-&gt;left-&gt;left   = new TreeNode(4);</p>
<p>    root-&gt;left-&gt;right  = new TreeNode(5);</p>
<p>    root-&gt;right-&gt;right = new TreeNode(6);</p>
<p>    OUT(is_complete(root));</p>
<p>    return 0;</p>
<p>}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-28527">
        <div id="dsq-comment-header-28527" class="dsq-comment-header">
            <cite id="dsq-cite-28527">
                <span id="dsq-author-user-28527">Olivier</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28527" class="dsq-comment-body">
            <div id="dsq-comment-message-28527" class="dsq-comment-message"><p>Hi,<br />
   Just wondering if this code will work too.. I think it should:</p>
<p> public boolean isComplete(Node node) {<br />
        if (node == null) return true;<br />
        if (node.left == null &amp;&amp; node.right != null) return false;<br />
        int leftHeight = 0;<br />
        int rightHeight = 0;<br />
        leftHeight = node.left != null ? tree.height(node.left) : 0;<br />
        rightHeight = node.right != null ? tree.height(node.right) : 0;<br />
        if( rightHeight &gt; leftHeight)return false; //right height cannot be greater than left<br />
        if( leftHeight &gt; 0 &amp;&amp; rightHeight &gt; 0){    //leftheight and right height differ by at most one<br />
            if( (leftHeight-rightHeight) &gt; 1)return false;<br />
        }else{<br />
            if( leftHeight&gt;1 || rightHeight &gt; 1 )return false;<br />
        }</p>
<p>        return isComplete(node.left) &amp;&amp; isComplete(node.right);</p>
<p>    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28525">
        <div id="dsq-comment-header-28525" class="dsq-comment-header">
            <cite id="dsq-cite-28525">
                <span id="dsq-author-user-28525">pavansrinivas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28525" class="dsq-comment-body">
            <div id="dsq-comment-message-28525" class="dsq-comment-message"><p>code in java&#8230;</p>
<p><code></p>
<p>boolean isComplete(){</p>
<p>		Node temp = root;<br />
		boolean isFirstLeaf = false;<br />
		 Queue Q = new LinkedList();<br />
		    Q.add(root);<br />
		    while (!Q.isEmpty())<br />
		    {<br />
		        temp = Q.remove();<br />
		        if(temp.left==null&amp;&amp;temp.right!=null){<br />
		        	return false;<br />
}<br />
		        if(temp.left==null&amp;&amp;temp.right==null){<br />
		        	isFirstLeaf = true;<br />
		        }<br />
		        if(isFirstLeaf&amp;&amp;(temp.left!=null||temp.right!=null)){<br />
		        	return false;<br />
		        }<br />
		        if (temp.left!=null){<br />
			         Q.add(temp.left);<br />
		        }<br />
if (temp.right!=null){<br />
		         Q.add(temp.right);<br />
		       }<br />
		       }</p>
<p>		    return true;</p>
<p>	}</code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-28050">
        <div id="dsq-comment-header-28050" class="dsq-comment-header">
            <cite id="dsq-cite-28050">
                <span id="dsq-author-user-28050">draganwarrior</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28050" class="dsq-comment-body">
            <div id="dsq-comment-message-28050" class="dsq-comment-message"><p>can  we  do as  follows </p>
<p><a href="http://ideone.com/SNXRqe" rel="nofollow">http://ideone.com/SNXRqe</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27995">
        <div id="dsq-comment-header-27995" class="dsq-comment-header">
            <cite id="dsq-cite-27995">
                <span id="dsq-author-user-27995">rajeevprasanna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27995" class="dsq-comment-body">
            <div id="dsq-comment-message-27995" class="dsq-comment-message"><p>Why can&#8217;t we simply check if level before the last level is completely filled or not ?</p>
<p>1) Calculate height(h) of the tree<br />
2) Count number of node at level h-1<br />
3) Check if node count is equal to 2 power(h-1)<br />
if matches, it is complete tree otherwise not.</p>
<p>Let me know if there are any flaws in this approach.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-28245">
        <div id="dsq-comment-header-28245" class="dsq-comment-header">
            <cite id="dsq-cite-28245">
                <span id="dsq-author-user-28245">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28245" class="dsq-comment-body">
            <div id="dsq-comment-message-28245" class="dsq-comment-message"><p>need to have a check for following cases..</p>
<p>   1<br />
 /<br />
2      3</p>
<p>    4</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-29476">
        <div id="dsq-comment-header-29476" class="dsq-comment-header">
            <cite id="dsq-cite-29476">
                <span id="dsq-author-user-29476">xiaoguangye</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29476" class="dsq-comment-body">
            <div id="dsq-comment-message-29476" class="dsq-comment-message"><p>this can be checked by if (!node-&gt;left &amp;&amp; node-&gt;right).<br />
I think you mean:<br />
  1<br />
  /<br />
 2 3<br />
 /  /<br />
4 5</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-29477">
        <div id="dsq-comment-header-29477" class="dsq-comment-header">
            <cite id="dsq-cite-29477">
                <span id="dsq-author-user-29477">xiaoguangye</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29477" class="dsq-comment-body">
            <div id="dsq-comment-message-29477" class="dsq-comment-message"><p>add:<br />
4). check every node on the second deepest level. every node after first none leaf node needs to be leaf.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-29688">
        <div id="dsq-comment-header-29688" class="dsq-comment-header">
            <cite id="dsq-cite-29688">
                <span id="dsq-author-user-29688">Sriharsha g.r.v</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29688" class="dsq-comment-body">
            <div id="dsq-comment-message-29688" class="dsq-comment-message"><p>u aproach fals for thiscase </p>
<p>    1<br />
    /<br />
   2       3<br />
  /<br />
 4</p>
<p>i mean the child should be towards left..that criteria is missing in ur algo</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-21041">
        <div id="dsq-comment-header-21041" class="dsq-comment-header">
            <cite id="dsq-cite-21041">
                <span id="dsq-author-user-21041">Trilok Sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21041" class="dsq-comment-body">
            <div id="dsq-comment-message-21041" class="dsq-comment-message"><p>/*  c++ version  */</p>
<p>#include<br />
#include<br />
using namespace std;</p>
<p>struct node<br />
{<br />
    int data;<br />
    struct node* left;<br />
    struct node* right;<br />
};</p>
<p>struct node* newNode(int data)<br />
{<br />
  struct node* node = new(struct node);<br />
  node-&gt;data = data;<br />
  node-&gt;left = NULL;<br />
  node-&gt;right = NULL;<br />
  return(node);<br />
}</p>
<p>bool isCompleteBT(struct node* root)<br />
{<br />
  if (root == NULL)<br />
    return true;</p>
<p>  bool flag = false;<br />
  queue myqueue;</p>
<p>  myqueue.push(root);</p>
<p>  while(!myqueue.empty())<br />
  {<br />
    struct node *temp_node = myqueue.front();<br />
    myqueue.pop();</p>
<p>    if(temp_node-&gt;left)<br />
    {<br />
      if (flag == true)<br />
         return false;</p>
<p>       myqueue.push(temp_node-&gt;left);<br />
    }<br />
    else<br />
       flag = true;</p>
<p>    if(temp_node-&gt;right)<br />
    {<br />
       if(flag == true)<br />
         return false;</p>
<p>       myqueue.push(temp_node-&gt;right);<br />
    }<br />
    else<br />
       flag = true;<br />
  }</p>
<p>  return true;<br />
}</p>
<p>int main ()<br />
{<br />
	 /* Let us construct the following Binary Tree which<br />
	      is not a complete Binary Tree<br />
	            1<br />
	          /   \<br />
	         2     3<br />
	        / \     \<br />
	       4   5     6<br />
	    */</p>
<p>	  struct node *root  = newNode(1);<br />
	  root-&gt;left         = newNode(2);<br />
	  root-&gt;right        = newNode(3);<br />
	  root-&gt;left-&gt;left   = newNode(4);<br />
	  root-&gt;left-&gt;right  = newNode(5);<br />
	  root-&gt;right-&gt;left = newNode(6);</p>
<p>	  if ( isCompleteBT(root) == true )<br />
	      cout&lt;&lt;&quot;Complete Binary Tree&quot;&lt;&lt;endl;<br />
	  else<br />
	      cout&lt;&lt;&quot;NOT Complete Binary Tree&quot;&lt;&lt;endl;</p>
<p>	  return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-odd thread-alt depth-1" id="dsq-comment-18393">
        <div id="dsq-comment-header-18393" class="dsq-comment-header">
            <cite id="dsq-cite-18393">
                <span id="dsq-author-user-18393">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18393" class="dsq-comment-body">
            <div id="dsq-comment-message-18393" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-11536">
        <div id="dsq-comment-header-11536" class="dsq-comment-header">
            <cite id="dsq-cite-11536">
                <span id="dsq-author-user-11536">FAISAL</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11536" class="dsq-comment-body">
            <div id="dsq-comment-message-11536" class="dsq-comment-message"><p>Time complexity :O(n)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-11535">
        <div id="dsq-comment-header-11535" class="dsq-comment-header">
            <cite id="dsq-cite-11535">
                <span id="dsq-author-user-11535">FAISAL</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11535" class="dsq-comment-body">
            <div id="dsq-comment-message-11535" class="dsq-comment-message"><p>/* #include&lt;iostream&gt;<br />
using namespace std;<br />
class Node<br />
    {<br />
        public:<br />
            int data;<br />
            Node* left;<br />
            Node* right;<br />
            Node(int d,Node* l = 0,Node* r = 0)<br />
            {<br />
                data = d;<br />
                right = r;<br />
                left = l;<br />
            }<br />
    };<br />
bool check(Node* root1,Node* root2)<br />
    {<br />
        if(root1 == NULL &amp;&amp; root2 == NULL)<br />
        {<br />
            return true;<br />
        }<br />
        if(root1!=NULL &amp;&amp; root2==NULL)<br />
        {<br />
            return check(root1-&gt;left,root1-&gt;right);<br />
        }<br />
        if(root1 == NULL &amp;&amp; root2!= NULL)<br />
        {<br />
            return false;<br />
        }<br />
        if(root1!= NULL &amp;&amp; root2!= NULL)<br />
        {<br />
            return check(root1-&gt;left,root1-&gt;right) &amp;&amp; check(root1-&gt;left,root2-&gt;right) &amp;&amp; check(root1-&gt;left,root2-&gt;left) &amp;&amp; check(root2-&gt;left,root2-&gt;right);<br />
        }<br />
    }<br />
bool iscomplete(Node* root)<br />
    {<br />
        if(root == NULL)<br />
        {<br />
            return true;<br />
        }<br />
        else<br />
        {<br />
            return check(root-&gt;left,root-&gt;right);<br />
        }<br />
    }<br />
int main()<br />
    {<br />
        Node* root  = new Node(1);<br />
  root-&gt;left         = new Node(2);<br />
  root-&gt;right        = new Node(3);<br />
  root-&gt;left-&gt;left   = new Node(4);<br />
  root-&gt;left-&gt;right  = new Node(5);<br />
 root-&gt;right-&gt;left = new Node(6);<br />
  root-&gt;right-&gt;right = new Node(6);<br />
   root-&gt;left-&gt;left-&gt;left = new Node(6);<br />
    root-&gt;left-&gt;right-&gt;right = new Node(6);<br />
  cout&lt;&lt;iscomplete(root);<br />
  system(&quot;pause&quot;);<br />
  return 0;<br />
    } */</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10677">
        <div id="dsq-comment-header-10677" class="dsq-comment-header">
            <cite id="dsq-cite-10677">
                <span id="dsq-author-user-10677">atul007</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10677" class="dsq-comment-body">
            <div id="dsq-comment-message-10677" class="dsq-comment-message"><p>Time complexity  = O(n)<br />
space complexity = O(1)<br />
int flag=0;<br />
ht=height(root);<br />
call : CheckComplete(root,ht-1,&amp;flag)<br />
if return 1 -&gt; Complete Binary Tree<br />
if return 0 -&gt; NOT Complete Binary Tree</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */

int height(node *root)
{
int l=0,r=0;

	if(!root)
		return 0;
	l=height(root-&gt;left);
	r=height(root-&gt;right);

	if(l &gt;= r)
		return l+1;
	else
		return r+1;

}

int CheckComplete(node *root,int height,int *flag)
{
int l=0,r=0;
static int fail=0;
	if(!root)
		return 0;
	
	l=CheckComplete(root-&gt;left,height-1,flag);
	if(l==0 &amp;&amp; fail)
	{
		return 0;
	}
	r=CheckComplete(root-&gt;right,height-1,flag);

	if(l==0 &amp;&amp; r==0 &amp;&amp; height==0)
	{
		return 1;
	}
	/*by setting flag we are setting boundary for adding nodes in the tree*/
	else if(l==0 &amp;&amp; r==0 &amp;&amp; height==1)
	{
		*flag=height;
		return 1;
	}
	/*here left nodes exists but right doesnt , so set new boundary = 1*/
	else if(l==1 &amp;&amp; r==0 &amp;&amp; height==1 &amp;&amp; *flag &lt; height)
	{
		*flag=height;
		 return 1;
	}
	/*left node doesnt exists but right node exists ..return false*/
	else if(l==0 &amp;&amp; r==1)
	{
		fail=1;
		return 0;
	}
	else if(l==1 &amp;&amp; r==1 &amp;&amp; height &gt;= 1 &amp;&amp; *flag &lt; height)
	{
		return 1;
	}		
	else
	{
		return 0;
	}
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27523">
        <div id="dsq-comment-header-27523" class="dsq-comment-header">
            <cite id="dsq-cite-27523">
                <span id="dsq-author-user-27523">mrn</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27523" class="dsq-comment-body">
            <div id="dsq-comment-message-27523" class="dsq-comment-message"><p>stack implicitly takes O(n) space ..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10673">
        <div id="dsq-comment-header-10673" class="dsq-comment-header">
            <cite id="dsq-cite-10673">
                <span id="dsq-author-user-10673">White Tiger</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10673" class="dsq-comment-body">
            <div id="dsq-comment-message-10673" class="dsq-comment-message"><p>void checkCompleteTree(struct BSTnode* root)<br />
{<br />
	int level=0,count=0,flag=0,temp_flag=0;<br />
	struct BSTnode* temp;<br />
	insert(root);<br />
	while(!isQueueEmpty())<br />
	{<br />
		temp=extract();<br />
		if(flag==0)<br />
		{<br />
			if(temp-&gt;left!=NULL &amp;&amp; temp-&gt;right!=NULL)<br />
			{<br />
				insert(temp-&gt;left);<br />
				insert(temp-&gt;right);<br />
			}<br />
			else if(temp-&gt;right==NULL)<br />
			{<br />
				if(temp-&gt;left!=NULL)<br />
					insert(temp-&gt;left);<br />
				flag=1;<br />
			}<br />
                        // had missed this case<br />
			else<br />
			{<br />
				temp_flag=1;<br />
				break;<br />
			}<br />
		}<br />
		else<br />
		{<br />
			if(temp-&gt;left!=NULL || temp-&gt;right!=NULL)<br />
			{<br />
				temp_flag=1;<br />
				break;<br />
			}<br />
		}<br />
	}<br />
	if(temp_flag==1)<br />
	{<br />
		while(!isQueueEmpty())<br />
			extract();<br />
		cout&lt;&lt;&quot;Not a Complete Binary Tree&quot;&lt;&lt;endl;<br />
	}<br />
	else<br />
	{<br />
		cout&lt;&lt;&quot;It&#039;s a Complete Binary Tree&quot;&lt;&lt;endl;<br />
	}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10667">
        <div id="dsq-comment-header-10667" class="dsq-comment-header">
            <cite id="dsq-cite-10667">
                <span id="dsq-author-user-10667">lohith</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10667" class="dsq-comment-body">
            <div id="dsq-comment-message-10667" class="dsq-comment-message"><p>#include&lt;iostream&gt;<br />
using namespace std;</p>
<p>struct node<br />
{<br />
struct node * left;<br />
int value;<br />
struct node * right;<br />
};</p>
<p>typedef struct node * Node;</p>
<p>Node newNode(int val)<br />
{<br />
Node temp = new node;<br />
temp-&gt;left = NULL;<br />
temp-&gt;right = NULL;<br />
temp-&gt;value = val;<br />
return temp;<br />
}</p>
<p>int isComplete(Node temp)<br />
{<br />
  if(!temp)<br />
	return 0;<br />
   int a=0,b=0;</p>
<p>  a = isComplete(temp-&gt;left);<br />
  b = isComplete(temp-&gt;right);</p>
<p>  if( a == -1 || b ==-1)<br />
	return -1;<br />
  else if( a-b&lt;2 &amp;&amp; a-b&gt;-1)<br />
	return a+1;<br />
  return -1;<br />
}</p>
<p>int main()<br />
{</p>
<p>Node head = newNode(1);<br />
head-&gt;left = newNode(2);<br />
head-&gt;right = newNode(3);<br />
head-&gt;left-&gt;right = newNode(5);</p>
<p>if(isComplete(head) == -1)<br />
	cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;<br />
else<br />
cout&lt;&lt;&quot;yes&quot;&lt;&lt;endl;<br />
return 0;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-10668">
        <div id="dsq-comment-header-10668" class="dsq-comment-header">
            <cite id="dsq-cite-10668">
                <span id="dsq-author-user-10668">lohith</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10668" class="dsq-comment-body">
            <div id="dsq-comment-message-10668" class="dsq-comment-message"><p>A simple check, (left sub-tree value &#8211; right sub-tree  value) =0 at each node will be sufficient to decide if a tree is complete or not.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-10669">
        <div id="dsq-comment-header-10669" class="dsq-comment-header">
            <cite id="dsq-cite-10669">
                <span id="dsq-author-user-10669">lohith</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10669" class="dsq-comment-body">
            <div id="dsq-comment-message-10669" class="dsq-comment-message"><p>A simple check, (left sub-tree value &#8211; right sub-tree value) &lt;2 &amp;&amp;<br />
                (left sub-tree value &#8211; right sub-tree value)&gt;=0<br />
at each node will be sufficient to decide if a tree is complete or not.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-10679">
        <div id="dsq-comment-header-10679" class="dsq-comment-header">
            <cite id="dsq-cite-10679">
http://www.geeksforgeeks.org/archives/23449                <span id="dsq-author-user-10679">deep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10679" class="dsq-comment-body">
            <div id="dsq-comment-message-10679" class="dsq-comment-message"><p>@lohith<br />
i tried for many tries ur program is running well</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-10683">
        <div id="dsq-comment-header-10683" class="dsq-comment-header">
            <cite id="dsq-cite-10683">
http://www.geeksforgeeks.org/archives/23449                <span id="dsq-author-user-10683">deep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10683" class="dsq-comment-body">
            <div id="dsq-comment-message-10683" class="dsq-comment-message"><p>@lohith<br />
i tried for many tries ur program is running well</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-10684">
        <div id="dsq-comment-header-10684" class="dsq-comment-header">
            <cite id="dsq-cite-10684">
                <span id="dsq-author-user-10684">Lakshmanan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10684" class="dsq-comment-body">
            <div id="dsq-comment-message-10684" class="dsq-comment-message"><p>This algorithm fails for the following case&#8230; Counting the balance between left and right isn&#8217;t sufficient both of them can&#8217;t be complete (either if then can be full / only one of them should be complete, matching the height criteria used in ur approach)&#8230;</p>
<p>       1<br />
     /   \<br />
    2     3<br />
   / \   /<br />
  4   5 6<br />
 /<br />
7</p>
<pre> <code language="C">
thunder:7% g++ iscomplete.C
thunder:8% ./a.out
yes
thunder:9% cat iscomplete.C
#include&lt;iostream&gt;
using namespace std;

struct node
{
struct node * left;
int value;
struct node * right;
};

typedef struct node * Node;

Node newNode(int val)
{
Node temp = new node;
temp-&gt;left = NULL;
temp-&gt;right = NULL;
temp-&gt;value = val;
return temp;
}

int isComplete(Node temp)
{
if(!temp)
return 0;
int a=0,b=0;

a = isComplete(temp-&gt;left);
b = isComplete(temp-&gt;right);

if( a == -1 || b ==-1)
return -1;
else if( a-b&lt;2 &amp;&amp; a-b&gt;-1)
return a+1;
return -1;
}

int main()
{

Node head = newNode(1);
head-&gt;left = newNode(2);
head-&gt;left-&gt;left = newNode(3);
head-&gt;left-&gt;left-&gt;left = newNode(4);
head-&gt;left-&gt;right = newNode(5);
head-&gt;right = newNode(6);
head-&gt;right-&gt;left = newNode(7);

if(isComplete(head) == -1)
cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;
else
cout&lt;&lt;&quot;yes&quot;&lt;&lt;endl;
return 0;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-10689">
        <div id="dsq-comment-header-10689" class="dsq-comment-header">
            <cite id="dsq-cite-10689">
                <span id="dsq-author-user-10689">lohith</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10689" class="dsq-comment-body">
            <div id="dsq-comment-message-10689" class="dsq-comment-message"><p>Yeah. I dint notice. Thanks.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-17556">
        <div id="dsq-comment-header-17556" class="dsq-comment-header">
            <cite id="dsq-cite-17556">
                <span id="dsq-author-user-17556">BackBencher</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17556" class="dsq-comment-body">
            <div id="dsq-comment-message-17556" class="dsq-comment-message"><p>@Lakshmanan and lohit:</p>
<p>  Can u please expalain algo, i am bit confused in code logic.<br />
   Please reply ASAP..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/';
var disqus_identifier = '23449 http://www.geeksforgeeks.org/?p=23449';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Check whether a given Binary Tree is Complete or not";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.205 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-12-18 17:09:45 -->

<!-- Compression = gzip -->
<!-- super cache -->