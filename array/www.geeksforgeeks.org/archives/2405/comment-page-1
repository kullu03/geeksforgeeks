<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Write a function to get the intersection point of two Linked Lists. - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Write a function to get the intersection point of two Linked Lists. - GeeksforGeeks" />
<meta property="og:description" content="There are two singly linked lists in a system. By some programming error the end node of one of the linked list got linked into the second list, forming a inverted Y shaped list. Write a program to get the point where two linked list merge. Above diagram shows an example with two linked list &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Linked Lists" />
<meta property="article:published_time" content="2009-10-10T02:51:43+00:00" />
<meta property="article:modified_time" content="2011-12-06T20:44:44+00:00" />
<meta property="og:updated_time" content="2011-12-06T20:44:44+00:00" />
<meta property="og:image" content="http://geeksforgeeks.org/wp-content/uploads/2009/10/Y-ShapedLinked-List.gif" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.529 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110933 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Write a function to get the intersection point of two Linked Lists.</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>There are two singly linked lists in a system. By some programming error the end node of one of the linked list got linked into the second list, forming a inverted Y shaped list. Write a program to get the point where two linked list merge. <span id="more-2405"></span></p>
<p><img class="aligncenter size-full wp-image-2753" title="Y ShapedLinked List" src="http://geeksforgeeks.org/wp-content/uploads/2009/10/Y-ShapedLinked-List.gif" alt="Y ShapedLinked List" width="275" height="300" /><br />
Above diagram shows an example with two linked list having 15 as intersection point.</p>
<p><strong>Method 1(Simply use two loops)</strong><br />
Use 2 nested for loops. Outer loop will be for each node of the 1st list and inner loop will be for 2nd list. In the inner loop, check if any of nodes of 2nd list is same as the current node of first linked list. Time complexity of this method will be O(mn) where m and n are the number of nodes in two lists.</p>
<p><strong>Method 2 (Mark Visited Nodes)</strong><br />
This solution requires modifications to basic linked list data structure.  Have a visited flag with each node.  Traverse the first linked list and keep marking visited nodes.  Now traverse second linked list, If you see a visited node again then there is an intersection point, return the intersecting node. This solution works in O(m+n) but requires additional information with each node. A variation of this solution that doesn’t require modification to basic data structure can be implemented using hash.  Traverse the first  linked list and  store the addresses of visited nodes in a hash. Now traverse the second linked list and if you see an address that already exists in hash then return the intersecting node.</p>
<p><strong>Method 3(Using difference of node counts)</strong><br />
1) Get count of the nodes in first list, let count be c1.<br />
2) Get count of the nodes in second list, let count be c2.<br />
3) Get the difference of counts d = abs(c1 &#8211; c2)<br />
4) Now traverse the bigger list from the first node till d nodes so that from here onwards both the lists have equal no of nodes.<br />
5) Then we can traverse both the lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

/* Link list node */
struct node
{
  int data;
  struct node* next;
};

/* Function to get the counts of node in a linked list */
int getCount(struct node* head);

/* function to get the intersection point of two linked
   lists head1 and head2 where head1 has d more nodes than
   head2 */
int _getIntesectionNode(int d, struct node* head1, struct node* head2);

/* function to get the intersection point of two linked
   lists head1 and head2 */
int getIntesectionNode(struct node* head1, struct node* head2)
{
  int c1 = getCount(head1);
  int c2 = getCount(head2);
  int d;

  if(c1 &gt; c2)
  {
    d = c1 - c2;
    return _getIntesectionNode(d, head1, head2);
  }
  else
  {
    d = c2 - c1;
    return _getIntesectionNode(d, head2, head1);
  }
}

/* function to get the intersection point of two linked
   lists head1 and head2 where head1 has d more nodes than
   head2 */
int _getIntesectionNode(int d, struct node* head1, struct node* head2)
{
  int i;
  struct node* current1 = head1;
  struct node* current2 = head2;

  for(i = 0; i &lt; d; i++)
  {
    if(current1 == NULL)
    {  return -1; }
    current1 = current1-&gt;next;
  }

  while(current1 !=  NULL &amp;&amp; current2 != NULL)
  {
    if(current1 == current2)
      return current1-&gt;data;
    current1= current1-&gt;next;
    current2= current2-&gt;next;
  }

  return -1;
}

/* Takes head pointer of the linked list and
   returns the count of nodes in the list */
int getCount(struct node* head)
{
  struct node* current = head;
  int count = 0;

  while (current != NULL)
  {
    count++;
    current = current-&gt;next;
  }

  return count;
}

/* IGNORE THE BELOW LINES OF CODE. THESE LINES
   ARE JUST TO QUICKLY TEST THE ABOVE FUNCTION */
int main()
{
  /*
    Create two linked lists

    1st 3-&gt;6-&gt;9-&gt;15-&gt;30
    2nd 10-&gt;15-&gt;30

    15 is the intersection point
  */

  struct node* newNode;
  struct node* head1 =
            (struct node*) malloc(sizeof(struct node));
  head1-&gt;data  = 10;

  struct node* head2 =
            (struct node*) malloc(sizeof(struct node));
  head2-&gt;data  = 3;

  newNode = (struct node*) malloc (sizeof(struct node));
  newNode-&gt;data = 6;
  head2-&gt;next = newNode;

  newNode = (struct node*) malloc (sizeof(struct node));
  newNode-&gt;data = 9;
  head2-&gt;next-&gt;next = newNode;

  newNode = (struct node*) malloc (sizeof(struct node));
  newNode-&gt;data = 15;
  head1-&gt;next = newNode;
  head2-&gt;next-&gt;next-&gt;next  = newNode;

  newNode = (struct node*) malloc (sizeof(struct node));
  newNode-&gt;data = 30;
  head1-&gt;next-&gt;next= newNode;

  head1-&gt;next-&gt;next-&gt;next = NULL;

  printf(&quot;\n The node of intersection is %d \n&quot;,
          getIntesectionNode(head1, head2));

  getchar();
}
</pre>
<p><strong>Time Complexity:</strong> O(m+n)<br />
<strong>Auxiliary Space:</strong> O(1)</p>
<p><strong>Method 4(Make circle in first list)</strong><br />
Thanks to <a href="http://geeksforgeeks.org/?p=2405#comment-264">Saravanan Man</a> for providing below solution.<br />
1. Traverse the first linked list(count the elements) and make a circular linked list. (Remember last node so that we can break the circle later on).<br />
2. Now view the problem as find the loop in the second linked list. So the problem is solved.<br />
3. Since we already know the length of the loop(size of first linked list) we can traverse those many number of nodes in second list, and then start another pointer from the beginning of second list. we have to traverse until they are equal, and that is the required intersection point.<br />
4. remove the circle from the linked list.<br />
<strong><br />
Time Complexity:</strong> O(m+n)<br />
<strong>Auxiliary Space:</strong> O(1)</p>
<p><strong>Method 5 (Reverse the first list and make equations)</strong><br />
Thanks to <a href="http://geeksforgeeks.org/?p=2405#comment-266">Saravanan Mani</a> for providing this method.</p>
<pre>
1) Let X be the length of the first linked list until intersection point.
   Let Y be the length of the second linked list until the intersection point.
   Let Z be the length of the linked list from intersection point to End of
   the linked list including the intersection node.
   We Have
           X + Z = C1;
           Y + Z = C2;
2) Reverse first linked list.
3) Traverse Second linked list. Let C3 be the length of second list - 1. 
     Now we have
        X + Y = C3
     We have 3 linear equations. By solving them, we get
       X = (C1 + C3 – C2)/2;
       Y = (C2 + C3 – C1)/2;
       Z = (C1 + C2 – C3)/2;
      WE GOT THE INTERSECTION POINT.
4)  Reverse first linked list.
</pre>
<p>Advantage:  No Comparison of pointers.<br />
Disadvantage : Modifying linked list(Reversing list).<br />
<strong><br />
Time complexity:</strong> O(m+n)<br />
<strong>Auxiliary Space: </strong>O(1)</p>
<p><strong>Method 6 (Traverse both lists and compare addresses of last nodes)</strong> This method is only to detect if there is an intersection point or not. (Thanks to NeoTheSaviour for suggesting this)</p>
<pre>
1) Traverse the list 1, store the last node address
2) Traverse the list 2, store the last node address.
3) If nodes stored in 1 and 2 are same then they are intersecting.
</pre>
<p>Time complexity of this method is O(m+n) and used Auxiliary space is O(1)</p>
<p></br><br />
Please write comments if you find any bug in the above algorithm or a better way to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/given-linked-list-reverse-alternate-nodes-append-end/" title="Given a linked list, reverse alternate nodes and append at the end">Given a linked list, reverse alternate nodes and append at the end</a></li><li><a href="http://www.geeksforgeeks.org/pairwise-swap-elements-of-a-given-linked-list-by-changing-links/" title="Pairwise swap elements of a given linked list by changing links">Pairwise swap elements of a given linked list by changing links</a></li><li><a href="http://www.geeksforgeeks.org/self-organizing-list-set-1-introduction/" title="Self Organizing List | Set 1 (Introduction)">Self Organizing List | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/merge-a-linked-list-into-another-linked-list-at-alternate-positions/" title="Merge a linked list into another linked list at alternate positions">Merge a linked list into another linked list at alternate positions</a></li><li><a href="http://www.geeksforgeeks.org/quicksort-on-singly-linked-list/" title="QuickSort on Singly Linked List">QuickSort on Singly Linked List</a></li><li><a href="http://www.geeksforgeeks.org/delete-n-nodes-after-m-nodes-of-a-linked-list/" title="Delete N nodes after M nodes of a linked list">Delete N nodes after M nodes of a linked list</a></li><li><a href="http://www.geeksforgeeks.org/design-a-stack-with-find-middle-operation/" title="Design a stack with operations on middle element">Design a stack with operations on middle element</a></li><li><a href="http://www.geeksforgeeks.org/swap-kth-node-from-beginning-with-kth-node-from-end-in-a-linked-list/" title="Swap Kth node from beginning with Kth node from end in a Linked List">Swap Kth node from beginning with Kth node from end in a Linked List</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fwrite-a-function-to-get-the-intersection-point-of-two-linked-lists%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/" data-text="Write a function to get the intersection point of two Linked Lists." data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-33148">
        <div id="dsq-comment-header-33148" class="dsq-comment-header">
            <cite id="dsq-cite-33148">
                <span id="dsq-author-user-33148">Dilip Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33148" class="dsq-comment-body">
            <div id="dsq-comment-message-33148" class="dsq-comment-message"><p>If the address of last node is same then there is intersection otherwise not.<br />
To find the intersection node, we reverse both the list and compare the adddress. We traverse till we get the address of the node in both list same. If the address differs then the previous node is the intersection node.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33142">
        <div id="dsq-comment-header-33142" class="dsq-comment-header">
            <cite id="dsq-cite-33142">
                <span id="dsq-author-user-33142">Neha Garg</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33142" class="dsq-comment-body">
            <div id="dsq-comment-message-33142" class="dsq-comment-message"><p>in method no. 5 i m not getting which  is c3 .. there is confusion in 3rd step &#8230; somebody plz explain what is c3 and how it is equals to sum of x and y</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-32826">
        <div id="dsq-comment-header-32826" class="dsq-comment-header">
            <cite id="dsq-cite-32826">
                <span id="dsq-author-user-32826">nij</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32826" class="dsq-comment-body">
            <div id="dsq-comment-message-32826" class="dsq-comment-message"><p>#include<br />
#include<br />
//#include<br />
struct student<br />
     {<br />
      struct student *next;<br />
      char name[10];<br />
      int clas;<br />
      }*first,*current,*last,*data,*temp,*te;<br />
void append(struct student *);<br />
void delet(struct student *);<br />
void display(struct student *data,struct student *first);<br />
void main()<br />
{<br />
    int choice;<br />
    data=(struct student*)malloc(sizeof(struct student));<br />
    last=NULL;<br />
    first=data;<br />
    printf(&#8220;enter the record of studentsnn&#8221;);<br />
    printf(&#8220;nName:&#8221;);<br />
    scanf(&#8220;%s&#8221;,data-&gt;name);<br />
    printf(&#8220;Class:&#8221;);<br />
    scanf(&#8220;%d&#8221;,&amp;data-&gt;clas);<br />
    data-&gt;next=NULL;<br />
    printf(&#8220;**ENTER YOUR CHOICE**n&#8221;);<br />
    while(1)</p>
<p>   {<br />
        printf(&#8220;n1:Append a recordn2:Delete last recordn3:Displayn4:To quitn&#8221;);<br />
        scanf(&#8220;%d&#8221;,&amp;choice);</p>
<p>        switch(choice)<br />
        {<br />
        case 1:<br />
             append(data);<br />
             break;</p>
<p>        case 2:<br />
            delet(data);<br />
            break;<br />
        case 3:<br />
            display(data,first);<br />
            break;<br />
        case 4:<br />
             exit(0);<br />
       }<br />
    }<br />
}<br />
void append(struct student *data)<br />
{<br />
    printf(&#8220;Enter new recordnName:&#8221;);<br />
    if(data-&gt;next==NULL)<br />
     {<br />
        last=(struct student*)malloc(sizeof(struct student));<br />
        data-&gt;next=last;<br />
        data=data-&gt;next;<br />
        data=(struct student*)malloc(sizeof(struct student));<br />
        data-&gt;next=NULL;<br />
        scanf(&#8220;%s&#8221;,last-&gt;name);<br />
        printf(&#8220;nClass:&#8221;);<br />
        scanf(&#8220;%d&#8221;,&amp;last-&gt;clas);<br />
     }<br />
    else<br />
    {<br />
        while(data-&gt;next!=NULL)<br />
          {<br />
            data=data-&gt;next;<br />
          }<br />
        last=(struct student*)malloc(sizeof(struct student));<br />
          data-&gt;next=last;<br />
        data=data-&gt;next;<br />
        data=(struct student*)malloc(sizeof(struct student));<br />
        data-&gt;next=NULL;<br />
        scanf(&#8220;%s&#8221;,last-&gt;name);<br />
        printf(&#8220;nClass:&#8221;);<br />
        scanf(&#8220;%d&#8221;,&amp;last-&gt;clas);</p>
<p>    }<br />
}<br />
void delet(struct student *data)<br />
{<br />
        temp=first;<br />
        while(data-&gt;next!=NULL)</p>
<p>          {<br />
              te=data;<br />
              data=data-&gt;next;<br />
              temp=data;<br />
           }<br />
  if(temp!=first)<br />
  {  data=te;<br />
     data-&gt;next=NULL;<br />
     last=data;<br />
     free(temp);<br />
  }<br />
  else<br />
  {<br />
      free(data);<br />
      first=NULL;<br />
  }<br />
}<br />
void display(struct student *data,struct student *first)<br />
{<br />
    data=first;<br />
    if(data!=NULL)<br />
    {<br />
        while(data!=NULL)<br />
      {<br />
        printf(&#8220;Name:%sn&#8221;,data-&gt;name);<br />
        printf(&#8220;Class:%dn&#8221;,data-&gt;clas);<br />
        data=data-&gt;next;<br />
      }<br />
    }<br />
    else<br />
    {<br />
        printf(&#8220;n****EMPTY RECORD****&#8221;);</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32288">
        <div id="dsq-comment-header-32288" class="dsq-comment-header">
            <cite id="dsq-cite-32288">
                <span id="dsq-author-user-32288">Himanshu Dagar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32288" class="dsq-comment-body">
            <div id="dsq-comment-message-32288" class="dsq-comment-message"><p>Can anyone explain method 5 in more detail<br />
I am not getting that how to implement it<br />
and what should be the final condition for checking the intersection point</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30090">
        <div id="dsq-comment-header-30090" class="dsq-comment-header">
            <cite id="dsq-cite-30090">
                <span id="dsq-author-user-30090">trishul shetty</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30090" class="dsq-comment-body">
            <div id="dsq-comment-message-30090" class="dsq-comment-message"><p>HI,*finding intersection this program is more easier than this*/<br />
/*trishul shetty*/</p>
<p>struct node<br />
{<br />
int data;<br />
struct node *next;<br />
};</p>
<p>int main()<br />
{</p>
<p> struct node *temp2,*temp1,*head1,*head2;<br />
struct node *newnode1,*newnode2;</p>
<p>/*  1st node of new 1 */<br />
newnode1=(struct node*)malloc(sizeof(struct node));<br />
newnode1-&gt;data=10;<br />
newnode1-&gt;next=NULL;<br />
temp1=newnode1;<br />
head1=newnode1;</p>
<p>/*second node of new 1*/<br />
newnode1=(struct node*)malloc(sizeof(struct node));<br />
newnode1-&gt;data=30;<br />
newnode1-&gt;next=NULL;<br />
temp1-&gt;next=newnode1;<br />
temp1=temp1-&gt;next;</p>
<p>/*  1st node of new 2 */<br />
newnode2=(struct node*)malloc(sizeof(struct node));<br />
newnode2-&gt;data=15;<br />
newnode2-&gt;next=NULL;<br />
temp2=newnode2;<br />
head2=newnode2;<br />
/*second node of new 2*/<br />
newnode2=(struct node*)malloc(sizeof(struct node));<br />
newnode2-&gt;data=35;<br />
newnode2-&gt;next=NULL;<br />
temp2-&gt;next=newnode2;<br />
temp2=temp2-&gt;next;</p>
<p>/*second node of new 2*/<br />
newnode2=(struct node*)malloc(sizeof(struct node));<br />
newnode2-&gt;data=25;<br />
newnode2-&gt;next=NULL;<br />
temp2-&gt;next=newnode2;<br />
temp2=temp2-&gt;next;</p>
<p>/*common node*/<br />
newnode2=(struct node*)malloc(sizeof(struct node));<br />
newnode2-&gt;data=40;<br />
newnode2-&gt;next=NULL;<br />
temp1-&gt;next=newnode2;<br />
temp2-&gt;next=newnode2;</p>
<p>for(temp2=head2;temp2!=NULL;temp2=temp2-&gt;next)<br />
{<br />
printf(&#8220;%dt&#8221;,temp2-&gt;data);<br />
}</p>
<p> /* printf(&#8220;n The node of intersection is %d n&#8221;,*/<br />
          getIntesectionNode(head1, head2);</p>
<p>  getchar();<br />
}<br />
/*inter section*/<br />
int getIntesectionNode(struct node *head1,struct node * head2)<br />
{<br />
int count1=0,count2=0,i,j;<br />
struct node *cur1=head1;<br />
struct node *cur2=head2;<br />
while(cur1!=NULL)<br />
{<br />
cur2=head2;<br />
while(cur2!=NULL)<br />
{<br />
if(cur1==cur2)<br />
{<br />
printf(&#8220;inter&#8221;);<br />
printf(&#8220;%d&#8221;,cur2-&gt;data);</p>
<p>return;<br />
}<br />
cur2=cur2-&gt;next;<br />
}<br />
cur1=cur1-&gt;next;<br />
}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30034">
        <div id="dsq-comment-header-30034" class="dsq-comment-header">
            <cite id="dsq-cite-30034">
                <span id="dsq-author-user-30034">N30pHyT3</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30034" class="dsq-comment-body">
            <div id="dsq-comment-message-30034" class="dsq-comment-message"><p>Doubt in Method 6 : &#8211;<br />
An intersection between the linked-lists cannot guarantee the last node to be same. After intersection, it may be possible that one list  ends early and other lasts long.<br />
So I think this method will not work even if there is a intersection.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30036">
        <div id="dsq-comment-header-30036" class="dsq-comment-header">
            <cite id="dsq-cite-30036">
                <span id="dsq-author-user-30036">Jayanth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30036" class="dsq-comment-body">
            <div id="dsq-comment-message-30036" class="dsq-comment-message"><p>I don&#8217;t get your point&#8230;When there is an intersection point it means that from that intersection point both the lists are essentially the same&#8230;So naturally Method 6 will work&#8230;Can u explain ur thought with an example&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29511">
        <div id="dsq-comment-header-29511" class="dsq-comment-header">
            <cite id="dsq-cite-29511">
                <span id="dsq-author-user-29511">neelabhsingh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29511" class="dsq-comment-body">
            <div id="dsq-comment-message-29511" class="dsq-comment-message"><p>Please check for first method-1<br />
Node * isIntersect(Node  *L1, Node *L2 )<br />
{<br />
       while(L1)<br />
       {<br />
                while(L2)<br />
                {<br />
                            if(L1==L2)<br />
                               return L1<br />
                            else<br />
                              L2=L2-&gt;next;</p>
<p>                }<br />
                L1=L1-&gt;next;<br />
       }<br />
       return NULL</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28756">
        <div id="dsq-comment-header-28756" class="dsq-comment-header">
            <cite id="dsq-cite-28756">
                <span id="dsq-author-user-28756">BarathVutukuri</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28756" class="dsq-comment-body">
            <div id="dsq-comment-message-28756" class="dsq-comment-message"><p>One can traverse the list in reverse order and at the intersecting point there will be 2 addresses to be pointing by a node,so we can easily find the intersecting node.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-30793">
        <div id="dsq-comment-header-30793" class="dsq-comment-header">
            <cite id="dsq-cite-30793">
                <span id="dsq-author-user-30793">ottobert</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30793" class="dsq-comment-body">
            <div id="dsq-comment-message-30793" class="dsq-comment-message"><p>i think this is the most basic solution, it also came to my mind before others.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-28105">
        <div id="dsq-comment-header-28105" class="dsq-comment-header">
            <cite id="dsq-cite-28105">
                <span id="dsq-author-user-28105">vijaynitj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28105" class="dsq-comment-body">
            <div id="dsq-comment-message-28105" class="dsq-comment-message"><p>Alogorithm:</p>
<p>step1: Take 1st list and set all its node with value 0.</p>
<p>step2: Take 2nd list and set all its node with value 1.</p>
<p>step3: Now traverse 1st list until its node value change to 1.</p>
<p>step4: Save that node address and it wii be the </p>
<p> intersection point of two Linked Lists.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-28656">
        <div id="dsq-comment-header-28656" class="dsq-comment-header">
            <cite id="dsq-cite-28656">
                <span id="dsq-author-user-28656">abc</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28656" class="dsq-comment-body">
            <div id="dsq-comment-message-28656" class="dsq-comment-message"><p>But if you will change the node value by 0 and 1 then you will lose original<br />
intersected node value.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-30661">
        <div id="dsq-comment-header-30661" class="dsq-comment-header">
            <cite id="dsq-cite-30661">
                <span id="dsq-author-user-30661">c programer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30661" class="dsq-comment-body">
            <div id="dsq-comment-message-30661" class="dsq-comment-message"><p>yes</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-30660">
        <div id="dsq-comment-header-30660" class="dsq-comment-header">
            <cite id="dsq-cite-30660">
                <span id="dsq-author-user-30660">c programer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30660" class="dsq-comment-body">
            <div id="dsq-comment-message-30660" class="dsq-comment-message"><p>Please describe with logic</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-24474">
        <div id="dsq-comment-header-24474" class="dsq-comment-header">
            <cite id="dsq-cite-24474">
                <span id="dsq-author-user-24474">teja</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24474" class="dsq-comment-body">
            <div id="dsq-comment-message-24474" class="dsq-comment-message"><p>method -6</p>
<p>l1= 1-&gt;2-&gt;3-&gt;4&gt;-5&gt;-&gt;6<br />
l2 = 8-&gt;3-&gt;7</p>
<p>if we traverse the first list and store the last node&#8217;s(6) address would be x and now traverse the list l2 and store the last node&#8217;s(7) address would be definitely y which is different from x. Is this what approach says, pls correct me if i am wrong?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27068">
        <div id="dsq-comment-header-27068" class="dsq-comment-header">
            <cite id="dsq-cite-27068">
                <span id="dsq-author-user-27068">Induct</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27068" class="dsq-comment-body">
            <div id="dsq-comment-message-27068" class="dsq-comment-message"><p>after node 3 there will be only one linked list not two ,so there address will be same</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-19939">
        <div id="dsq-comment-header-19939" class="dsq-comment-header">
            <cite id="dsq-cite-19939">
                <span id="dsq-author-user-19939">satya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19939" class="dsq-comment-body">
            <div id="dsq-comment-message-19939" class="dsq-comment-message"><p>Hi,</p>
<p>If we can store each link list&#8217;s node address in 2 different stack a&amp;b and than start poping element till we find a != b. Then      a-&gt;next will be the intersection point.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-koolkeshaw odd alt thread-odd thread-alt depth-1" id="dsq-comment-18236">
        <div id="dsq-comment-header-18236" class="dsq-comment-header">
            <cite id="dsq-cite-18236">
                <span id="dsq-author-user-18236">koolkeshaw</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18236" class="dsq-comment-body">
            <div id="dsq-comment-message-18236" class="dsq-comment-message"><p>@geeksforgeeks<br />
I think the following linked list are not intersecting<br />
  L1:-   1->2->3->4->5->null<br />
  L2:-   3->4->5->null</p>
<p>But as per method 6 the linked list are intersecting</p>
<p>please do rectify me if I am wrong&#8230;.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-18237">
        <div id="dsq-comment-header-18237" class="dsq-comment-header">
            <cite id="dsq-cite-18237">
                <span id="dsq-author-user-18237">rakesh mahadasa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18237" class="dsq-comment-body">
            <div id="dsq-comment-message-18237" class="dsq-comment-message"><p>Arey here last node is 5 Not NULL <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> Last node means the node before null <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-18239">
        <div id="dsq-comment-header-18239" class="dsq-comment-header">
            <cite id="dsq-cite-18239">
                <span id="dsq-author-user-18239">rakesh mahadasa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18239" class="dsq-comment-body">
            <div id="dsq-comment-message-18239" class="dsq-comment-message"><p>oops sorry the last node address of both the linked list will be different we are comparing  the address not the value in a node <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-koolkeshaw even depth-4" id="dsq-comment-18253">
        <div id="dsq-comment-header-18253" class="dsq-comment-header">
            <cite id="dsq-cite-18253">
                <span id="dsq-author-user-18253">koolkeshaw</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18253" class="dsq-comment-body">
            <div id="dsq-comment-message-18253" class="dsq-comment-message"><p>@rakesh mahadasa<br />
can&#8217;t give a pictorial representation.<br />
So wrote in that manner.</p>
<p>L2 is a subset of L1 i.e. L2 points to node 3 of L1. Node 4&#038; node 5 r common to both L1 &#038; L2..</p>
<p>wrote null just to show the end of linked list</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-5" id="dsq-comment-18254">
        <div id="dsq-comment-header-18254" class="dsq-comment-header">
            <cite id="dsq-cite-18254">
                <span id="dsq-author-user-18254">rakesh mahadasa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18254" class="dsq-comment-body">
            <div id="dsq-comment-message-18254" class="dsq-comment-message"><p>if l2 is a subset of l1 then there is no point of intersection ryt :p</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-4m7u1 even thread-even depth-1" id="dsq-comment-18196">
        <div id="dsq-comment-header-18196" class="dsq-comment-header">
            <cite id="dsq-cite-18196">
                <span id="dsq-author-user-18196">4m7u1</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18196" class="dsq-comment-body">
            <div id="dsq-comment-message-18196" class="dsq-comment-message"><p>Method 3 is beautiful but I&#8217;ve got a small doubt, what if the given lists are 15->3->6->9 and 10->15; after taking the difference and traversing difference number of nodes in list 1 , we miss out on on the intersection element itself.. Help me clarify my doubt..Thank you..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-18201">
        <div id="dsq-comment-header-18201" class="dsq-comment-header">
            <cite id="dsq-cite-18201">
                <span id="dsq-author-user-18201">rakesh mahadasa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18201" class="dsq-comment-body">
            <div id="dsq-comment-message-18201" class="dsq-comment-message"><p>U Got that completely wrong&#8230; Once draw the linked list u told on a paper&#8230; u will get it as 10-&gt;15-&gt;3-&gt;6-&gt;9 so there is no intersection dudeee its just a single linked list <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> :p</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-4m7u1 even depth-3" id="dsq-comment-18267">
        <div id="dsq-comment-header-18267" class="dsq-comment-header">
            <cite id="dsq-cite-18267">
                <span id="dsq-author-user-18267">4m7u1</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18267" class="dsq-comment-body">
            <div id="dsq-comment-message-18267" class="dsq-comment-message"><p>haha..silly me <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" /> ! I understood the code now, thanks btw <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-odd thread-alt depth-1" id="dsq-comment-17845">
        <div id="dsq-comment-header-17845" class="dsq-comment-header">
            <cite id="dsq-cite-17845">
                <span id="dsq-author-user-17845">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17845" class="dsq-comment-body">
            <div id="dsq-comment-message-17845" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-ramesh-mxian even thread-even depth-1" id="dsq-comment-17249">
        <div id="dsq-comment-header-17249" class="dsq-comment-header">
            <cite id="dsq-cite-17249">
                <span id="dsq-author-user-17249">Ramesh.Mxian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17249" class="dsq-comment-body">
            <div id="dsq-comment-message-17249" class="dsq-comment-message"><p>Method 4 will not work if the length of second linked list before the inter section is greater than the length of the first linked list.</p>
<p>For Example:</p>
<p>L1: 1->2->3->4<br />
L2: 10->2&#8211;>30->40->50->60->70->3</p>
<p>Here the intersection point is 3. But method 4 will not give the correct result.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-18203">
        <div id="dsq-comment-header-18203" class="dsq-comment-header">
            <cite id="dsq-cite-18203">
                <span id="dsq-author-user-18203">rakesh mahadasa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18203" class="dsq-comment-body">
            <div id="dsq-comment-message-18203" class="dsq-comment-message"><p>anything after the intersection must be same for both the linked lists so in ur example the second linked must be<br />
L2: 10-&gt;2&#8211;&gt;30-&gt;40-&gt;50-&gt;60-&gt;70-&gt;3-&gt;4</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-thepace even thread-odd thread-alt depth-1" id="dsq-comment-16861">
        <div id="dsq-comment-header-16861" class="dsq-comment-header">
            <cite id="dsq-cite-16861">
                <span id="dsq-author-user-16861">thepace</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16861" class="dsq-comment-body">
            <div id="dsq-comment-message-16861" class="dsq-comment-message"><p>Hi,</p>
<p>Please verify this solution using implementation.</p>
<p><a href="http://codepad.org/i4oWut0U" rel="nofollow">Code link</a></p>
<p>void getIntesectionNode(struct node* head1, struct node* head2)<br />
{<br />
      if(head1!=NULL &#038;&#038; head1->next!=NULL)<br />
           getIntesectionNode(head1->next,head2);<br />
      if(head2!=NULL &#038;&#038; head2->next!=NULL)<br />
           getIntesectionNode(head1,head2->next);<br />
      if((head1!=head2)&#038;&#038; (head1->next==head2->next))<br />
            printf(&#8220;INTERSECTION POINT =%d&#8221;,head2->next->data);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-16063">
        <div id="dsq-comment-header-16063" class="dsq-comment-header">
            <cite id="dsq-cite-16063">
                <span id="dsq-author-user-16063">Maya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16063" class="dsq-comment-body">
            <div id="dsq-comment-message-16063" class="dsq-comment-message"><p>I have this following solution based on merge sort.</p>
<p>It takes Sorted lists only.</p>
<p>Please correct me if you find any bug.</p>
<pre> <code language="Java">
/* Paste your code here (You may delete these lines if not writing code) */
public void findIntersect ( SortedList list1 , SortedList list2)
	{
		List l1 = list1.head;
		List l2 = list2.head;
		SortedList newlist = new SortedList();
		boolean flag = true;
		List mylist = null;
		
		if( l1 == null | l2 == null	)
		{
			System.out.println(&quot;Either List is Empty Can not Proceed&quot;);
		}
		else
		{
			while(l1 != null &amp;&amp; l2!=null )
			{
				if( l1.data &lt; l2.data &amp; flag)
				{
					l1 = l1.next;
				}
				else if ( l1.data &gt; l2.data &amp; flag)
				{
					l2 = l2.next;
				}
				else if ( l1.data == l2.data)
				{
					newlist.insert(l1.data);
					l1 = l1.next;
					l2 = l2.next;
					flag = false;
				}
				else
				{
					flag = true;
					break;
				}
			}
		}
		if(flag)
			System.out.println(&quot;No Y Intersection Found&quot;);
		else
			System.out.println(&quot;They have common Y Intersection&quot;);
		
		
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15327">
        <div id="dsq-comment-header-15327" class="dsq-comment-header">
            <cite id="dsq-cite-15327">
                <span id="dsq-author-user-15327">ABHINAV</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15327" class="dsq-comment-body">
            <div id="dsq-comment-message-15327" class="dsq-comment-message"><p>OK<br />
for this just take mappings of values in link list 1<br />
e.g 1-&gt;2-&gt;4-&gt;6(list 1)<br />
     and 3-&gt;4-&gt;6<br />
now for each 1,2,4,6 make its map value to 1</p>
<p>now traverse 2nd list value at 3 is not 1<br />
but of 4 is 1<br />
now check if its next nodes value i.e 6 has also 1<br />
(#imp)if next nodei.e 6 till null is not 1 then 4 is not  intersection</p>
<p>plz tell me if you find something wrong</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-13830">
        <div id="dsq-comment-header-13830" class="dsq-comment-header">
            <cite id="dsq-cite-13830">
                <span id="dsq-author-user-13830">akshat gupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13830" class="dsq-comment-body">
            <div id="dsq-comment-message-13830" class="dsq-comment-message"><p>@geeksforgeeks:<br />
just a minor correction<br />
in Method 5:</p>
<p>C3 = X + Y + 1(intersecting point)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30656">
        <div id="dsq-comment-header-30656" class="dsq-comment-header">
            <cite id="dsq-cite-30656">
                <span id="dsq-author-user-30656">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30656" class="dsq-comment-body">
            <div id="dsq-comment-message-30656" class="dsq-comment-message"><p>@admin:<br />
Please update the relevant changes which suggested by akash gupta in the post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-13345">
        <div id="dsq-comment-header-13345" class="dsq-comment-header">
            <cite id="dsq-cite-13345">
                <span id="dsq-author-user-13345">Peiyao</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13345" class="dsq-comment-body">
            <div id="dsq-comment-message-13345" class="dsq-comment-message"><p>Hi, if extra storage is allowed here. I think we could use two stacks based on your illustration chart. First iterate two linkedList and push each Node into corresponding stack. Next, pop up the nodes until different one. </p>
<p>/* Paste your code here (You may delete these lines if not writing code) */<br />
pubic static LinkedListNode findIntersection(LinkedListNode a, LinkedListNode b){<br />
	// allocate two stacks<br />
	Stack&lt;Item&gt; stackA = new Stack&lt;Item&gt;();<br />
	Stack&lt;Item&gt; stackB = new Stack&lt;Item&gt;();<br />
	LinkedListNode currentA = a;<br />
	LinkedListNode currentB = b;</p>
<p>	// push items into corresponding stacks<br />
	while(currentA.next! = null){<br />
		stackA.push(currentA.data);<br />
		currentA = currentA.next;<br />
		}</p>
<p>	while(currentB.next! = null){<br />
		stackB.push(currentB.data);<br />
		currentB = currentB.next;<br />
		}</p>
<p>	// pop up the item and compare to find different one and return one before different<br />
	// one</p>
<p>	LinkedList lastNode = new LinkedListNode();</p>
<p>	while(!stackA.isEmpty()&amp;&amp; !stackB.isEmpty()){<br />
		nodeA = stackA.pop();<br />
		nodeB = stackB.pop();</p>
<p>		if(nodeA.data != nodeB.data)<br />
			return lastNode;<br />
		else<br />
			lastNode = nodeA;<br />
	}	</p>
<p>	return;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10990">
        <div id="dsq-comment-header-10990" class="dsq-comment-header">
            <cite id="dsq-cite-10990">
                <span id="dsq-author-user-10990">khushi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10990" class="dsq-comment-body">
            <div id="dsq-comment-message-10990" class="dsq-comment-message"><p>thanx alot sir&#8230;</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9768">
        <div id="dsq-comment-header-9768" class="dsq-comment-header">
            <cite id="dsq-cite-9768">
http://fishoilbenefits.in/                <span id="dsq-author-user-9768">Fish Oil Benefits</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9768" class="dsq-comment-body">
            <div id="dsq-comment-message-9768" class="dsq-comment-message"><p>Hello, this weekend is fastidious designed for me, for<br />
the reason that this moment i am reading this wonderful educational piece of writing here at my home.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-9635">
        <div id="dsq-comment-header-9635" class="dsq-comment-header">
            <cite id="dsq-cite-9635">
http://www.nikoo28.blogspot.com                <span id="dsq-author-user-9635">nikoo28</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9635" class="dsq-comment-body">
            <div id="dsq-comment-message-9635" class="dsq-comment-message"><p>the last method is completely futile..it uses time O(m+n) and then also we do not get any useful result..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8150">
        <div id="dsq-comment-header-8150" class="dsq-comment-header">
            <cite id="dsq-cite-8150">
                <span id="dsq-author-user-8150">ABC</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8150" class="dsq-comment-body">
            <div id="dsq-comment-message-8150" class="dsq-comment-message"><p>In Method 3, counting number of nodes again requires O(n), Isn&#8217;it, so complexity increases.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-codinglearner even thread-even depth-1" id="dsq-comment-7695">
        <div id="dsq-comment-header-7695" class="dsq-comment-header">
            <cite id="dsq-cite-7695">
                <span id="dsq-author-user-7695">codinglearner</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7695" class="dsq-comment-body">
            <div id="dsq-comment-message-7695" class="dsq-comment-message"><p>the problem cud also be solved by the use of stacks&#8230;..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-anshul odd alt depth-2" id="dsq-comment-7867">
        <div id="dsq-comment-header-7867" class="dsq-comment-header">
            <cite id="dsq-cite-7867">
                <span id="dsq-author-user-7867">Spider</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7867" class="dsq-comment-body">
            <div id="dsq-comment-message-7867" class="dsq-comment-message"><p>gud one</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-8524">
        <div id="dsq-comment-header-8524" class="dsq-comment-header">
            <cite id="dsq-cite-8524">
                <span id="dsq-author-user-8524">Pranay Singhania</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8524" class="dsq-comment-body">
            <div id="dsq-comment-message-8524" class="dsq-comment-message"><p>@codinglearner Can You tell me how this problem can be solved by using STACK</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-10237">
        <div id="dsq-comment-header-10237" class="dsq-comment-header">
            <cite id="dsq-cite-10237">
                <span id="dsq-author-user-10237">Mayautobot</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10237" class="dsq-comment-body">
            <div id="dsq-comment-message-10237" class="dsq-comment-message"><p>This problem can be solved using two stacks for each linked list. Traverse both linked list and push addresses in their respective stacks. Now, pop elements one by one from both stacks if their address are same and remember the last popped address. The moment their top addresses differ your last popped address will be your intersection of the two linked list.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-33143">
        <div id="dsq-comment-header-33143" class="dsq-comment-header">
            <cite id="dsq-cite-33143">
                <span id="dsq-author-user-33143">Neha Garg</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33143" class="dsq-comment-body">
            <div id="dsq-comment-message-33143" class="dsq-comment-message"><p>but this will take extra space of o(m+n)&#8230; so we can just reverse both the list and come up with same approach</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-laddoo odd alt thread-odd thread-alt depth-1" id="dsq-comment-7672">
        <div id="dsq-comment-header-7672" class="dsq-comment-header">
            <cite id="dsq-cite-7672">
                <span id="dsq-author-user-7672">laddoo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7672" class="dsq-comment-body">
            <div id="dsq-comment-message-7672" class="dsq-comment-message"><pre> <code language="C">
int getIntesectionNode(struct node* head1, struct node* head2)
{
    if(head1==NULL &amp;&amp; head2!=NULL)
    getIntesectionNode(head1,head2-&gt;next);
    else if(head2==NULL &amp;&amp; head1!=NULL)
    getIntesectionNode(head1-&gt;next,head2);
    else if(head1==NULL &amp;&amp; head2==NULL)
    return 1;
    else
    getIntesectionNode(head1-&gt;next,head2-&gt;next);
    
    if(head1-&gt;next==head2-&gt;next)
    printf(&quot;Intersection Point is = %d.&quot;,head1-&gt;next-&gt;data);
    
    return 1;
}
</code> </pre>
<p>Guyz..wat abt this?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-9636">
        <div id="dsq-comment-header-9636" class="dsq-comment-header">
            <cite id="dsq-cite-9636">
http://www.nikoo28.blogspot.com                <span id="dsq-author-user-9636">nikoo28</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9636" class="dsq-comment-body">
            <div id="dsq-comment-message-9636" class="dsq-comment-message"><p>this code will not work&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7541">
        <div id="dsq-comment-header-7541" class="dsq-comment-header">
            <cite id="dsq-cite-7541">
                <span id="dsq-author-user-7541">Richa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7541" class="dsq-comment-body">
            <div id="dsq-comment-message-7541" class="dsq-comment-message"><p>Is it really necessary to use current1 and current2 in the function? I guess just one current is enough for the first for loop. For while we can use head1 and head2 only right? Why take extra space.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7310">
        <div id="dsq-comment-header-7310" class="dsq-comment-header">
            <cite id="dsq-cite-7310">
                <span id="dsq-author-user-7310">ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7310" class="dsq-comment-body">
            <div id="dsq-comment-message-7310" class="dsq-comment-message"><p>hari please reply.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6916">
        <div id="dsq-comment-header-6916" class="dsq-comment-header">
            <cite id="dsq-cite-6916">
                <span id="dsq-author-user-6916">Steve</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6916" class="dsq-comment-body">
            <div id="dsq-comment-message-6916" class="dsq-comment-message"><p>1.) Reverse both the lists.<br />
2.)loop until both of the data are equal<br />
     2.1 store data in temporary variable.<br />
     2.2 move to the next element in both the list<br />
3.) the temporary variable contains the intersection element.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-radhe even thread-odd thread-alt depth-1" id="dsq-comment-5362">
        <div id="dsq-comment-header-5362" class="dsq-comment-header">
            <cite id="dsq-cite-5362">
                <span id="dsq-author-user-5362">radhe</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5362" class="dsq-comment-body">
            <div id="dsq-comment-message-5362" class="dsq-comment-message"><p>Solution 3 is incorrect</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-5365">
        <div id="dsq-comment-header-5365" class="dsq-comment-header">
            <cite id="dsq-cite-5365">
                <span id="dsq-author-user-5365">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5365" class="dsq-comment-body">
            <div id="dsq-comment-message-5365" class="dsq-comment-message"><p>See <a href="http://www.geeksforgeeks.org/archives/2405/comment-page-1#comment-5364" rel="nofollow">this </a>comment.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-6416">
        <div id="dsq-comment-header-6416" class="dsq-comment-header">
            <cite id="dsq-cite-6416">
                <span id="dsq-author-user-6416">Amby</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6416" class="dsq-comment-body">
            <div id="dsq-comment-message-6416" class="dsq-comment-message"><p>Solution 3 doesn;t seems to be work for below example,<br />
List1: 1,2,3,4,5,6,7<br />
List2: 1,2,3,4</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-3" id="dsq-comment-6506">
        <div id="dsq-comment-header-6506" class="dsq-comment-header">
            <cite id="dsq-cite-6506">
                <span id="dsq-author-user-6506">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6506" class="dsq-comment-body">
            <div id="dsq-comment-message-6506" class="dsq-comment-message"><p>I think it should work for the example.  Could you provide the code that you tried?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-silversurfer even thread-even depth-1" id="dsq-comment-5101">
        <div id="dsq-comment-header-5101" class="dsq-comment-header">
            <cite id="dsq-cite-5101">
                <span id="dsq-author-user-5101">SilverSurfer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5101" class="dsq-comment-body">
            <div id="dsq-comment-message-5101" class="dsq-comment-message"><p>I m bit confused abt 3rd soln of above problem(By finding out difference.)</p>
<p>Lets consider a scenario.My lists are as follows</p>
<p>L1=1-&gt;2-&gt;3-&gt;4-&gt;5<br />
L2=7-&gt;2</p>
<p>For my L1,head is at 1.For L2 ,head is at 7.<br />
so as per solution proposed,difference of number nodes is 3.<br />
so we will traverse L1 till this difference will not get clear.So we will traverse up to node 3.<br />
After that we will compare values.And we will get no value same.So we will return 0.</p>
<p>But intersection point is 2 as per given lists.<br />
Is my understanding is proper?<br />
If not, plz clarify.<br />
If yes,then this solution is wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-radhe odd alt depth-2" id="dsq-comment-5363">
        <div id="dsq-comment-header-5363" class="dsq-comment-header">
            <cite id="dsq-cite-5363">
                <span id="dsq-author-user-5363">radhe</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5363" class="dsq-comment-body">
            <div id="dsq-comment-message-5363" class="dsq-comment-message"><p>Yes. Solution 3 seems to be incorrect.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-5364">
        <div id="dsq-comment-header-5364" class="dsq-comment-header">
            <cite id="dsq-cite-5364">
                <span id="dsq-author-user-5364">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5364" class="dsq-comment-body">
            <div id="dsq-comment-message-5364" class="dsq-comment-message"><p>@SilverSurfer &amp; @radhe:</p>
<p>Take a closer look at the problem statement. The example linked lists given by you is not a valid example.   If 2 is intersection point of given linked lists then nodes after 2 have to be common in both the lists.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-5457">
        <div id="dsq-comment-header-5457" class="dsq-comment-header">
            <cite id="dsq-cite-5457">
                <span id="dsq-author-user-5457">sreekanth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5457" class="dsq-comment-body">
            <div id="dsq-comment-message-5457" class="dsq-comment-message"><p>@Kartik,</p>
<p>The 3rd soln returns the 1st equal node in both the lists. Consider this</p>
<p>8-&gt;9-&gt;1-&gt;10-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6<br />
10-&gt;15-&gt;3-&gt;4-&gt;5-&gt;6</p>
<p>The function getIntesectionNode will return 10 but the correct node is 3.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-6330">
        <div id="dsq-comment-header-6330" class="dsq-comment-header">
            <cite id="dsq-cite-6330">
                <span id="dsq-author-user-6330">Prabhakar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6330" class="dsq-comment-body">
            <div id="dsq-comment-message-6330" class="dsq-comment-message"><p>@sreekanth<br />
The checking for common node is done<br />
through addresses so solution 3 is correct.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-4" id="dsq-comment-16324">
        <div id="dsq-comment-header-16324" class="dsq-comment-header">
            <cite id="dsq-cite-16324">
                <span id="dsq-author-user-16324">rakesh mahadasa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16324" class="dsq-comment-body">
            <div id="dsq-comment-message-16324" class="dsq-comment-message"><p>here we r not comparing the value stored in nodes instead we r comparing the addresses read carefully</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4653">
        <div id="dsq-comment-header-4653" class="dsq-comment-header">
            <cite id="dsq-cite-4653">
                <span id="dsq-author-user-4653">Prasad</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4653" class="dsq-comment-body">
            <div id="dsq-comment-message-4653" class="dsq-comment-message"><p>how about hashing the address of the node so if the nodes are revisited we can find it out and hence the intersection point</p>
<p>Correct me if i am wrong</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4703">
        <div id="dsq-comment-header-4703" class="dsq-comment-header">
            <cite id="dsq-cite-4703">
                <span id="dsq-author-user-4703">sukhmeet2390</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4703" class="dsq-comment-body">
            <div id="dsq-comment-message-4703" class="dsq-comment-message"><p>But it Requires auxiliary space.. !!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4501">
        <div id="dsq-comment-header-4501" class="dsq-comment-header">
            <cite id="dsq-cite-4501">
                <span id="dsq-author-user-4501">intel2390</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4501" class="dsq-comment-body">
            <div id="dsq-comment-message-4501" class="dsq-comment-message"><p>In method 1: I think can&#8217;t there be a possibility that  the two LL have a common element and it is still not the intersection point..<br />
 EG:<br />
LL1: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;NULL<br />
LL2: 2-&gt;7-&gt;8-&gt;5-&gt;6-&gt;NULL..</p>
<p>Here we will find 2 form method 1 .. which is not the case..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4744">
        <div id="dsq-comment-header-4744" class="dsq-comment-header">
            <cite id="dsq-cite-4744">
                <span id="dsq-author-user-4744">Fanendra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4744" class="dsq-comment-body">
            <div id="dsq-comment-message-4744" class="dsq-comment-message"><p>the equality will be checked on the whole node. i mean to say the node data as well as the next pointer. So it will work fine.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-neothesaviour even thread-odd thread-alt depth-1" id="dsq-comment-4335">
        <div id="dsq-comment-header-4335" class="dsq-comment-header">
            <cite id="dsq-cite-4335">
                <span id="dsq-author-user-4335">NeoTheSaviour</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4335" class="dsq-comment-body">
            <div id="dsq-comment-message-4335" class="dsq-comment-message"><p>Method 6, I do not understand, why we need to do so much if it does not give intersection point.<br />
Method 6 can simply be replaced with<br />
1) Traverse the list 1, store the last node address<br />
2) Traverse the list 2, store the last node address.</p>
<p>If nodes stored in 1 and 2 are same they are intersecting.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-4481">
        <div id="dsq-comment-header-4481" class="dsq-comment-header">
            <cite id="dsq-cite-4481">
                <span id="dsq-author-user-4481">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4481" class="dsq-comment-body">
            <div id="dsq-comment-message-4481" class="dsq-comment-message"><p>@NeoTheSaviour: Thanks for suggesting this method.  We have replaced method 6 with this one.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-curious even depth-3" id="dsq-comment-4872">
        <div id="dsq-comment-header-4872" class="dsq-comment-header">
            <cite id="dsq-cite-4872">
                <span id="dsq-author-user-4872">curious</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4872" class="dsq-comment-body">
            <div id="dsq-comment-message-4872" class="dsq-comment-message"><p>Can you please clarify whether this means traverse both lists to their ends and compare the end nodes?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-4" id="dsq-comment-4873">
        <div id="dsq-comment-header-4873" class="dsq-comment-header">
            <cite id="dsq-cite-4873">
                <span id="dsq-author-user-4873">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4873" class="dsq-comment-body">
            <div id="dsq-comment-message-4873" class="dsq-comment-message"><p>@curious:  Yes, @NeoTheSaviour  means the same.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4312">
        <div id="dsq-comment-header-4312" class="dsq-comment-header">
            <cite id="dsq-cite-4312">
                <span id="dsq-author-user-4312">Boing</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4312" class="dsq-comment-body">
            <div id="dsq-comment-message-4312" class="dsq-comment-message"><p>I have been <a href="http://geeksforgeeks.org" rel="nofollow"> here </a> all day .:)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4311">
        <div id="dsq-comment-header-4311" class="dsq-comment-header">
            <cite id="dsq-cite-4311">
                <span id="dsq-author-user-4311">Boing</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4311" class="dsq-comment-body">
            <div id="dsq-comment-message-4311" class="dsq-comment-message"><p>This is awesome . I have been<a href="http://geeksforgeeks.org" rel="nofollow"> here</a> all day .:)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3452">
        <div id="dsq-comment-header-3452" class="dsq-comment-header">
            <cite id="dsq-cite-3452">
                <span id="dsq-author-user-3452">Swagatika</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3452" class="dsq-comment-body">
            <div id="dsq-comment-message-3452" class="dsq-comment-message"><p>1. reverse both the linked list<br />
so (30, 15, 10 ) and (30, 15, 9, 6, 3)<br />
2. take the biggerlist in outer loop and small one in the inner loop<br />
3. keep checking every element in outer should match with inner element.<br />
4. keep storing the last matched value in a variable.<br />
5. At the node where it does not match come out of loop and the value stored in the variable is the merging point.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2777">
        <div id="dsq-comment-header-2777" class="dsq-comment-header">
            <cite id="dsq-cite-2777">
                <span id="dsq-author-user-2777">mit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2777" class="dsq-comment-body">
            <div id="dsq-comment-message-2777" class="dsq-comment-message"><p>This solution is given for sorted link list. How wil we do if list is unsorted and constraints are: O(1) space and  less than O(n^2) complexity ?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-soundbalaji even depth-2" id="dsq-comment-2808">
        <div id="dsq-comment-header-2808" class="dsq-comment-header">
            <cite id="dsq-cite-2808">
                <span id="dsq-author-user-2808">bala</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2808" class="dsq-comment-body">
            <div id="dsq-comment-message-2808" class="dsq-comment-message"><p>@mit: The example given for the problem in sorted but all the solutions given work for unsorted lists too .</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-kevalvora odd alt thread-even depth-1" id="dsq-comment-2189">
        <div id="dsq-comment-header-2189" class="dsq-comment-header">
            <cite id="dsq-cite-2189">
                <span id="dsq-author-user-2189">kevalvora</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2189" class="dsq-comment-body">
            <div id="dsq-comment-message-2189" class="dsq-comment-message"><p>Amazing solutions!</p>
<p>I have a solution which works for numerical values (for other types, some changes may be required):</p>
<p>1. Compute the sum of all nodes in list1, let it be old_sum<br />
2. Traverse list2 and add &#8216;1&#8217; to each node of list2<br />
3. Re-compute the sum of all nodes in list1, let it be new_sum<br />
4. Difference between new_sum and old_sum is the number of common nodes, let diff = (new_sum &#8211; old_sum). If diff == 0, lists do not intersect, Else, intersection is at (size(list1) &#8211; diff)<br />
5. Traverse list2 and subtract &#8216;1&#8217; from each node of list2 to get the original list back</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-2197">
        <div id="dsq-comment-header-2197" class="dsq-comment-header">
            <cite id="dsq-cite-2197">
                <span id="dsq-author-user-2197">aravind646</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2197" class="dsq-comment-body">
            <div id="dsq-comment-message-2197" class="dsq-comment-message"><p>No way!! Yur solution fails if the point of intersection is the last node of LLs. chk tat.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kevalvora odd alt depth-3" id="dsq-comment-2363">
        <div id="dsq-comment-header-2363" class="dsq-comment-header">
            <cite id="dsq-cite-2363">
                <span id="dsq-author-user-2363">kevalvora</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2363" class="dsq-comment-body">
            <div id="dsq-comment-message-2363" class="dsq-comment-message"><p>I can&#8217;t see why it fails.<br />
Eg:<br />
LL1: 2 4 6 8 10<br />
LL2: 1 3 6 7 10</p>
<p>LL1 and LL2 intersect at last node 10.<br />
Now, old_sum = 2+4+6+8+10 = 30<br />
LL2 is incremented by 1:<br />
LL2 becomes: 2 4 7 8 11<br />
LL1 becomes: 2 4 6 8 11</p>
<p>new_sum = 2+4+6+8+11 = 31</p>
<p>diff = new_sum &#8211; old_sum = 31 &#8211; 30 = 1<br />
no. of common nodes = diff = 1</p>
<p>intersection point = (size(list1)–diff) = 5-1 = 4</p>
<p>LL2 is decremented by 1:<br />
LL2 becomes: 1 3 6 7 10<br />
LL1 becomes: 2 4 6 8 10</p>
<p>Let me know which case you were talking about.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-3229">
        <div id="dsq-comment-header-3229" class="dsq-comment-header">
            <cite id="dsq-cite-3229">
                <span id="dsq-author-user-3229">anuj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3229" class="dsq-comment-body">
            <div id="dsq-comment-message-3229" class="dsq-comment-message"><p>This method does not guarantees that two linked list are actually intersecting or not&#8230;<br />
The solution is actually for finding the number of common nodes with same data value only but not the exactly the same node for the given two linked list.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1601">
        <div id="dsq-comment-header-1601" class="dsq-comment-header">
            <cite id="dsq-cite-1601">
                <span id="dsq-author-user-1601">Sumeet</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1601" class="dsq-comment-body">
            <div id="dsq-comment-message-1601" class="dsq-comment-message"><p>Talking about method 5:<br />
I find the definitions of X and Y ambiguous. Should you consider the node at intersection while calculating X and Y?</p>
<p>If that is the case then C3 = X + Y &#8211; 1;<br />
else C3 = X + Y + 1;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1597">
        <div id="dsq-comment-header-1597" class="dsq-comment-header">
            <cite id="dsq-cite-1597">
                <span id="dsq-author-user-1597">shantanu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1597" class="dsq-comment-body">
            <div id="dsq-comment-message-1597" class="dsq-comment-message"><p>hi!<br />
i think method3 is the most preferrable method..<br />
so, i m going to use that only&#8230;&#8230;..<br />
i also do&#8217;nt understood the method 4 and 2..<br />
so please would you eloborate&#8230;&#8230;&#8230;&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-sambasiva odd alt thread-odd thread-alt depth-1" id="dsq-comment-1569">
        <div id="dsq-comment-header-1569" class="dsq-comment-header">
            <cite id="dsq-cite-1569">
http://effprog.blogspot.com                <span id="dsq-author-user-1569">Sambasiva</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1569" class="dsq-comment-body">
            <div id="dsq-comment-message-1569" class="dsq-comment-message"><pre> <code language="C">

typedef struct node node;

node**  listtoarray(node *h)
{
        node* *tmp = NULL;
        int count = 0;
        while(h)
        {
                count++;
                h = h-&gt;next;
        }
        if(count)
                tmp = malloc(sizeof(node *) * count);

        int i = 0;
        while(h)
        {
                tmp[i++] = h;
                h = h-&gt;next;
        }

        return tmp;
}

node *intersectNode(node **a, node **b, int m, int n)
{
        while(a[m--] == b[n--])
        return a[m+1];
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1485">
        <div id="dsq-comment-header-1485" class="dsq-comment-header">
            <cite id="dsq-cite-1485">
                <span id="dsq-author-user-1485">Viv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1485" class="dsq-comment-body">
            <div id="dsq-comment-message-1485" class="dsq-comment-message"><p>A simple problem but tons of confusing solutions !!!! <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" /></p>
<p>&#8216;Einstein once said things should be kept as simple as possible but not simpler&#8217;&#8230; </p>
<p>On this remark; I would say why should we be altering the underlying data structure ? Changing the internal generalised structure of the abstract data type just to solve the underlying problem is an extremely bad usage of OOPs concept(where you model your objects according to there behavior rather than going the other way around).</p>
<p>My views on above implementations:</p>
<p>a). Method 5 is a big NO !!!! I would not alter the structure at all because of above reasons. Moreover, how have you come up with the estimation of O(M+N) ? Did you neglect the fact that if your linked list is an exceptionally long chain of nodes; your list reversal time will dominate your actual problem solving time ?</p>
<p>b). Method 4 is again an extraneous approach of solving this simple problem. Why do you need to traverse the entire list to get a count ? &#8216;Remember you already have a linked list in hand which is an ADT &#8211; and has a size method defined within its interface; so why not to use that&#8217; ?<br />
If you have taken the assumption that you dont have any helper methods even in that case creation of a circular linked list would consume your time in situations of long linked lists.</p>
<p>c). Method 2 also alters the underlying structure. So, out for me.</p>
<p>d). Method 1 is simple and does not change the data struture but would be defeated due to the O(mn) time complexity.</p>
<p>As per me;<br />
Method 3 being the most simple and practical approach. Beautifully designed. You are not changing the LinkedList implementation rather using its features to solve the problem. Moreover, does have a good time complexity of O(m+n); should have no bottlenecks even if a long linked list chain is passed.</p>
<p>Let me know your views guys !!!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-2361">
        <div id="dsq-comment-header-2361" class="dsq-comment-header">
            <cite id="dsq-cite-2361">
                <span id="dsq-author-user-2361">lalit mohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2361" class="dsq-comment-body">
            <div id="dsq-comment-message-2361" class="dsq-comment-message"><p>a) Time complexity is measured correctly in method 5, reverse is linear operation<br />
b) It is assumed that you don&#8217;t have the count. In C++ std library std::list::size() method, the complexity is &#8220;Constant (recommended). Linear in some implementations.&#8221;<br />
c) Agree that the best methods are the non-intrusive ones.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-586">
        <div id="dsq-comment-header-586" class="dsq-comment-header">
            <cite id="dsq-cite-586">
                <span id="dsq-author-user-586">Sembium Varun</span>
            </cite>
        </div>
        <div id="dsq-comment-body-586" class="dsq-comment-body">
            <div id="dsq-comment-message-586" class="dsq-comment-message"><p>Hey Hari,</p>
<p>Your method can be used only to detect if the 2 linked lists intersect. It can&#8217;t be used for finding the intersection point.</p>
<p>If only detection is needed, we could have traversed both the linked lists to reach their last node &amp; check if it is same or not. There is no need to modify (reverse) a linked list.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-2360">
        <div id="dsq-comment-header-2360" class="dsq-comment-header">
            <cite id="dsq-cite-2360">
                <span id="dsq-author-user-2360">lalit mohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2360" class="dsq-comment-body">
            <div id="dsq-comment-message-2360" class="dsq-comment-message"><p>correct</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-579">
        <div id="dsq-comment-header-579" class="dsq-comment-header">
            <cite id="dsq-cite-579">
                <span id="dsq-author-user-579">Baskaran</span>
            </cite>
        </div>
        <div id="dsq-comment-body-579" class="dsq-comment-body">
            <div id="dsq-comment-message-579" class="dsq-comment-message"><p>Addresses are boundary aligned. Set the last bit for all next field in list 1.<br />
Traverse the second list, checking next-&gt;next &amp;0x1. If it is set next is the intersection node.<br />
Reset the last bit for next field in list1.<br />
Time complexity: O(m+n). Twice of list 1 + uncommon number of nodes in list2. Space Complexity: O(1)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-odd thread-alt depth-1" id="dsq-comment-270">
        <div id="dsq-comment-header-270" class="dsq-comment-header">
            <cite id="dsq-cite-270">
                <span id="dsq-author-user-270">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-270" class="dsq-comment-body">
            <div id="dsq-comment-message-270" class="dsq-comment-message"><p>@Saravanan Mani: Thanks again for providing the nice solution. We sincerely appreciate your contribution to the portal. Keep writing to us!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-266">
        <div id="dsq-comment-header-266" class="dsq-comment-header">
            <cite id="dsq-cite-266">
                <span id="dsq-author-user-266">Saravanan Mani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-266" class="dsq-comment-body">
            <div id="dsq-comment-message-266" class="dsq-comment-message"><p>1) Let X be the length of the first linked list until intersection point.<br />
   Let Y be the length of the second linked list until the intersection point.<br />
   Let Z be the length of the linked list from intersection point to End of linked list.</p>
<p>We Have X + Z = C1;<br />
        Y + Z = C2;</p>
<p>2) Reverse first linked list.</p>
<p>3) Traverse Second linked list.</p>
<p>Now we have X + Y = C3;</p>
<p>We have 3 linear equations. By solving them,<br />
we get</p>
<p>X = (C1 + C3 &#8211; C2)/2;<br />
Y = (C2 + C3 &#8211; C1)/2;<br />
Z = (C1 + C2 &#8211; C3)/2;</p>
<p>WE GOT THE INTERSECTION POINT.</p>
<p>4) Reverse first linked list.</p>
<p>Advantage: No Comparison of pointers.<br />
Disadvantage : Modifying linked list(Reversing list).</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-odd thread-alt depth-1" id="dsq-comment-265">
        <div id="dsq-comment-header-265" class="dsq-comment-header">
            <cite id="dsq-cite-265">
                <span id="dsq-author-user-265">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-265" class="dsq-comment-body">
            <div id="dsq-comment-message-265" class="dsq-comment-message"><p>@Saravanan Mani: Superb!! We have included this approach in our post</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-264">
        <div id="dsq-comment-header-264" class="dsq-comment-header">
            <cite id="dsq-cite-264">
                <span id="dsq-author-user-264">Saravanan Mani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-264" class="dsq-comment-body">
            <div id="dsq-comment-message-264" class="dsq-comment-message"><p>1. Traverse the first linked list(count the elements) and make a circular linked list. (Remember last node so that we can break the circle later on).</p>
<p>2. Now view the problem as find the loop in the second linked list. So the problem is solved.</p>
<p>3. Since we already know the length of the loop(size of first linked list) we can traverse those many number of nodes in second list, and then start another pointer from the beginning of second list. we have to traverse until they are equal, and that is the required intersection point.</p>
<p>4. remove the circle from the linked list.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-907">
        <div id="dsq-comment-header-907" class="dsq-comment-header">
            <cite id="dsq-cite-907">
                <span id="dsq-author-user-907">sathiyan k</span>
            </cite>
        </div>
        <div id="dsq-comment-body-907" class="dsq-comment-body">
            <div id="dsq-comment-message-907" class="dsq-comment-message"><p>Hi, i can&#8217;t understand the point we have to traverse until they are equal. can u explain me it in above linklist diagram</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-212">
        <div id="dsq-comment-header-212" class="dsq-comment-header">
            <cite id="dsq-cite-212">
                <span id="dsq-author-user-212">sudheer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-212" class="dsq-comment-body">
            <div id="dsq-comment-message-212" class="dsq-comment-message"><p>Thanks Hari for your good solution.Good work</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-even depth-1" id="dsq-comment-197">
        <div id="dsq-comment-header-197" class="dsq-comment-header">
            <cite id="dsq-cite-197">
                <span id="dsq-author-user-197">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-197" class="dsq-comment-body">
            <div id="dsq-comment-message-197" class="dsq-comment-message"><p>@Hari Prasad Perabattula: We have added the solution to the original post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even thread-odd thread-alt depth-1" id="dsq-comment-183">
        <div id="dsq-comment-header-183" class="dsq-comment-header">
            <cite id="dsq-cite-183">
                <span id="dsq-author-user-183">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-183" class="dsq-comment-body">
            <div id="dsq-comment-message-183" class="dsq-comment-message"><p>@Hari Prasad Perabattula: Thanks for writing a new method.  This method can be used to check if there is an intersection or not, but can we use this to get the intersection point also?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-180">
        <div id="dsq-comment-header-180" class="dsq-comment-header">
            <cite id="dsq-cite-180">
                <span id="dsq-author-user-180">Hari Prasad Perabattula</span>
            </cite>
        </div>
        <div id="dsq-comment-body-180" class="dsq-comment-body">
            <div id="dsq-comment-message-180" class="dsq-comment-message"><p>1). Store the header node of list l1.<br />
2). Reverse the first list l1.<br />
3). Traverse the second list until reaches NULL.<br />
4). Check if the node just before NULL is the same as the header in step (1).<br />
5). Reverse the list l1 to make it restore the original list.</p>
<p>(I was asked this question in an interview. Btw, I was selected and still working for the same company..:-) )</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-1147">
        <div id="dsq-comment-header-1147" class="dsq-comment-header">
            <cite id="dsq-cite-1147">
                <span id="dsq-author-user-1147">ctwy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1147" class="dsq-comment-body">
            <div id="dsq-comment-message-1147" class="dsq-comment-message"><p>My problem with this method is how to determine if the node just before NULL is the same as the header in step (1). For example, the last element, called B, in list 2 happens to be the same as the first one, called A, in the original list 1. If it is the case, we could not say if B is A unless we check their addresses.</p>
<p>Any comments?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-7307">
        <div id="dsq-comment-header-7307" class="dsq-comment-header">
            <cite id="dsq-cite-7307">
                <span id="dsq-author-user-7307">ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7307" class="dsq-comment-body">
            <div id="dsq-comment-message-7307" class="dsq-comment-message"><p>i think step 2 should come first then step 1.<br />
 trace the above example the linked list in &#8216;Y&#8217; shape.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-14308">
        <div id="dsq-comment-header-14308" class="dsq-comment-header">
            <cite id="dsq-cite-14308">
                <span id="dsq-author-user-14308">Patil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14308" class="dsq-comment-body">
            <div id="dsq-comment-message-14308" class="dsq-comment-message"><p>l1 = 3-&gt;6-&gt;9-&gt;15-&gt;30-&gt;NULL<br />
l2 = 10-&gt;15-&gt;30-&gt;NULL</p>
<p>as per u r algo. if we reverse the 1st list<br />
then list becomes 30-&gt;15-&gt;9-&gt;6-&gt;3-&gt;NULL then l2 becomes<br />
10-&gt;15-&gt;9-&gt;6-&gt;3-&gt;NULL right.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/';
var disqus_identifier = '2405 http://geeksforgeeks.org/?p=2405';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Write a function to get the intersection point of two Linked Lists.";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.255 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:25:33 -->

<!-- Compression = gzip -->
<!-- super cache -->