<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Foldable Binary Trees - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/foldable-binary-trees/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Foldable Binary Trees - GeeksforGeeks" />
<meta property="og:description" content="Question: Given a binary tree, find out if the tree can be folded or not. A tree can be folded if left and right subtrees of the tree are structure wise mirror image of each other. An empty tree is considered as foldable. Consider the below trees: (a) and (b) can be folded. (c) and &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/foldable-binary-trees/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2010-06-16T11:03:21+00:00" />
<meta property="article:modified_time" content="2011-12-14T11:05:13+00:00" />
<meta property="og:updated_time" content="2011-12-14T11:05:13+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.509 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111179 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Foldable Binary Trees</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Question: Given a binary tree, find out if the tree can be folded or not.</p>
<p>A tree can be folded if left and right subtrees of the tree are structure wise mirror image of each other.  An empty tree is considered as foldable. <span id="more-7956"></span></p>
<pre>
Consider the below trees:
(a) and (b) can be folded.
(c) and (d) cannot be folded.

(a)
       10
     /    \
    7      15
     \    /
      9  11

(b)
        10
       /  \
      7    15
     /      \
    9       11

(c)
        10
       /  \
      7   15
     /    /
    5   11

(d)

         10
       /   \
      7     15
    /  \    /
   9   10  12
</pre>
<p><strong>Method 1 (Change Left subtree to its Mirror and compare it with Right subtree)</strong><br />
Algorithm: isFoldable(root)</p>
<pre>1) If tree is empty, then return true.
2) Convert the left subtree to its mirror image
    mirror(root->left); /* See <a href="http://geeksforgeeks.org/?p=662">this </a>post */
3) Check if the structure of left subtree and right subtree is same
   and store the result.
    res = isStructSame(root->left, root->right); /*isStructSame()
        recursively compares structures of two subtrees and returns
        true if structures are same */
4) Revert the changes made in step (2) to get the original tree.
    mirror(root->left);
5) Return result res stored in step 2.
</pre>
<p>Thanks to <a href="http://geeksforgeeks.org/forum/topic/amazon-interview-question-for-software-engineerdeveloper-about-trees-9#post-2457">ajaym </a>for suggesting this approach.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

/* You would want to remove below 3 lines if your compiler
   supports bool, true and false */
#define bool int
#define true 1
#define false 0

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
  int data;
  struct node* left;
  struct node* right;
};

/* converts a tree to its mrror image */
void mirror(struct node* node);

/* returns true if structure of two trees a and b is same
   Only structure is considered for comparison, not data! */
bool isStructSame(struct node *a, struct node *b);

/* Returns true if the given tree is foldable */
bool isFoldable(struct node *root)
{
  bool res;

  /* base case */
  if(root == NULL)
    return true;

  /* convert left subtree to its mirror */
  mirror(root-&gt;left);

  /* Compare the structures of the right subtree and mirrored
    left subtree */
  res = isStructSame(root-&gt;left, root-&gt;right);

  /* Get the originial tree back */
  mirror(root-&gt;left);

  return res;
}


bool isStructSame(struct node *a, struct node *b)
{
  if (a == NULL &amp;&amp; b == NULL)
  {  return true; }
  if ( a != NULL &amp;&amp; b != NULL &amp;&amp;
       isStructSame(a-&gt;left, b-&gt;left) &amp;&amp;
       isStructSame(a-&gt;right, b-&gt;right)
     )
  {  return true; }

  return false;
}


/* UTILITY FUNCTIONS */
/* Change a tree so that the roles of the  left and
    right pointers are swapped at every node.
    See http://geeksforgeeks.org/?p=662 for details */
void mirror(struct node* node)
{
  if (node==NULL)
    return;
  else
  {
    struct node* temp;

    /* do the subtrees */
    mirror(node-&gt;left);
    mirror(node-&gt;right);

    /* swap the pointers in this node */
    temp        = node-&gt;left;
    node-&gt;left  = node-&gt;right;
    node-&gt;right = temp;
  }
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}

/* Driver program to test mirror() */
int main(void)
{
  /* The constructed binary tree is
         1
       /   \
      2     3
      \    /
       4  5
  */
  struct node *root = newNode(1);
  root-&gt;left        = newNode(2);
  root-&gt;right       = newNode(3);
  root-&gt;right-&gt;left  = newNode(4);
  root-&gt;left-&gt;right = newNode(5);

  if(isFoldable(root) == 1)
  { printf(&quot;\n tree is foldable&quot;); }
  else
  { printf(&quot;\n tree is not foldable&quot;); }

  getchar();
  return 0;
}
</pre>
<p>Time complexity: O(n)</p>
<p><strong>Method 2 (Check if Left and Right subtrees are Mirror)</strong><br />
There are mainly two functions:</p>
<p>// Checks if tree can be folded or not</p>
<pre>
IsFoldable(root)
1) If tree is empty then return true
2) Else check if left and right subtrees are structure wise mirrors of
    each other. Use utility function IsFoldableUtil(root->left,
    root->right) for this.
</pre>
<p>// Checks if n1 and n2 are mirror of each other.</p>
<pre>
IsFoldableUtil(n1, n2)
1) If both trees are empty then return true.
2) If one of them is empty and other is not then return false.
3) Return true if following conditions are met
   a) n1->left is mirror of n2->right
   b) n1->right is mirror of n2->left
</pre>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

/* You would want to remove below 3 lines if your compiler
   supports bool, true and false */
#define bool int
#define true 1
#define false 0

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
  int data;
  struct node* left;
  struct node* right;
};

/* A utility function that checks if trees with roots as n1 and n2
  are mirror of each other */
bool IsFoldableUtil(struct node *n1, struct node *n2);

/* Returns true if the given tree can be folded */
bool IsFoldable(struct node *root)
{
     if (root == NULL)
     {	return true;  }

     return IsFoldableUtil(root-&gt;left, root-&gt;right);
}

/* A utility function that checks if trees with roots as n1 and n2
  are mirror of each other */
bool IsFoldableUtil(struct node *n1, struct node *n2)
{
    /* If both left and right subtrees are NULL,
      then return true */
    if (n1 == NULL &amp;&amp; n2 == NULL)
    {  return true;  }

    /* If one of the trees is NULL and other is not,
      then return false */
	if (n1 == NULL || n2 == NULL)
    {  return false; }

    /* Otherwise check if left and right subtrees are mirrors of
       their counterparts */
	return IsFoldableUtil(n1-&gt;left, n2-&gt;right) &amp;&amp;
           IsFoldableUtil(n1-&gt;right, n2-&gt;left);
}

/*UTILITY FUNCTIONS */
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}

/* Driver program to test mirror() */
int main(void)
{
  /* The constructed binary tree is
         1
       /   \
      2     3
      \    /
       4  5
  */
  struct node *root = newNode(1);
  root-&gt;left        = newNode(2);
  root-&gt;right       = newNode(3);
  root-&gt;left-&gt;right  = newNode(4);
  root-&gt;right-&gt;left = newNode(5);

  if(IsFoldable(root) == true)
  { printf(&quot;\n tree is foldable&quot;); }
  else
  { printf(&quot;\n tree is not foldable&quot;); }

  getchar();
  return 0;
}
</pre>
<p>Thanks to <a href="http://www.geeksforgeeks.org/archives/7956/comment-page-1#comment-1353">Dzmitry Huba </a> for suggesting this approach.</p>
<p>Please write comments if you find the above code/algorithm incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li><li><a href="http://www.geeksforgeeks.org/convert-binary-tree-threaded-binary-tree/" title="Convert a Binary Tree to Threaded binary tree">Convert a Binary Tree to Threaded binary tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-n-ary-tree/" title="Serialize and Deserialize an N-ary Tree">Serialize and Deserialize an N-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/" title="Serialize and Deserialize a Binary Tree">Serialize and Deserialize a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/" title="Print nodes between two given level numbers of a binary tree">Print nodes between two given level numbers of a binary tree</a></li><li><a href="http://www.geeksforgeeks.org/find-height-binary-tree-represented-parent-array/" title="Find Height of Binary Tree represented by Parent array">Find Height of Binary Tree represented by Parent array</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Ffoldable-binary-trees%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/foldable-binary-trees/" data-text="Foldable Binary Trees" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/foldable-binary-trees/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-32840">
        <div id="dsq-comment-header-32840" class="dsq-comment-header">
            <cite id="dsq-cite-32840">
                <span id="dsq-author-user-32840">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32840" class="dsq-comment-body">
            <div id="dsq-comment-message-32840" class="dsq-comment-message"><p>bool isStructSame(struct node *a, struct node *b)<br />
{<br />
  if (a == NULL &amp;&amp; b == NULL)<br />
    return true;<br />
  if ( !(a &amp;&amp; b))<br />
      return false;<br />
  return (true &amp;&amp; isStructSame(a-&gt;left, b-&gt;left) &amp;&amp; isStructSame(a-&gt;right,b-&gt;right));<br />
  }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-aspire odd alt thread-odd thread-alt depth-1" id="dsq-comment-22564">
        <div id="dsq-comment-header-22564" class="dsq-comment-header">
            <cite id="dsq-cite-22564">
                <span id="dsq-author-user-22564">aspire</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22564" class="dsq-comment-body">
            <div id="dsq-comment-message-22564" class="dsq-comment-message"><p>We can solve this problem by putting the left and right trees in queue in preorder fashion. And then comparing their structure while popping them from the queue.</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;queue&gt;
using namespace std;
typedef struct tree
{
    int data;
    struct tree *left,*right;
} *Node;

Node newNode(int data)
{
    Node temp = (Node)malloc(sizeof(struct tree));
    temp-&gt;left=temp-&gt;right=NULL;
    temp-&gt;data=data;
    return temp;
}

/**Recursive**/
void preorder(Node root)
{
    if(root==NULL)
        return;

    printf(&quot;%d &quot;,root-&gt;data);
    preorder(root-&gt;left);
    preorder(root-&gt;right);
}

void inorder(Node root)
{
    if(root==NULL)
        return;

    preorder(root-&gt;left);
    printf(&quot;%d &quot;,root-&gt;data);
    preorder(root-&gt;right);
}

void postorder(Node root)
{
    if(root==NULL)
        return;

    preorder(root-&gt;left);
    preorder(root-&gt;right);
    printf(&quot;%d &quot;,root-&gt;data);
}


Node insertTree(Node root,int data)
{
    if(root==NULL)
        return newNode(data);
    else if(root-&gt;data&gt;=data)
        root-&gt;left = insertTree(root-&gt;left,data);
    else
        root-&gt;right = insertTree(root-&gt;right,data);
    return root;
}

void fillQueue(queue&lt;Node&gt; &amp;s,Node root)
{
    if(!root)
        return;

    s.push(root);
    fillQueue(s,root-&gt;left);
    fillQueue(s,root-&gt;right);
}

bool isFoldable(Node root)
{
    if(!root||(!(root-&gt;left)&amp;&amp;!(root-&gt;right)))
        return true;

    queue&lt;Node&gt; left,right;
    fillQueue(left,root-&gt;left);
    fillQueue(right,root-&gt;right);
    Node a,b;
    while(!left.empty()||!right.empty())
    {
        a=left.front();
        left.pop();
        b=right.front();
        right.pop();

        printf(&quot;a = %d b = %d\n&quot;,a-&gt;data,b-&gt;data);
        if(!(a-&gt;left)&amp;&amp;a-&gt;right&amp;&amp;!(b-&gt;right)&amp;&amp;b-&gt;left)
            continue;

        else if(a-&gt;left&amp;&amp;!(a-&gt;right)&amp;&amp;a-&gt;right&amp;&amp;!(b-&gt;left))
            continue;

        else if(a-&gt;left&amp;&amp;a-&gt;right&amp;&amp;a-&gt;right&amp;&amp;b-&gt;left)
            continue;

        else if(!(a-&gt;left)&amp;&amp;!(a-&gt;right)&amp;&amp;!(a-&gt;right)&amp;&amp;!(b-&gt;left))
            continue;
        else
            return false;
    }

    if(left.empty()&amp;&amp;right.empty())
        return true;
    return false;
}

int main()
{
    Node root = newNode(1);
    root-&gt;left        = newNode(2);
    root-&gt;right       = newNode(3);
    root-&gt;left-&gt;right  = newNode(4);
    root-&gt;right-&gt;left = newNode(5);

    if(isFoldable(root))
        printf(&quot;Is foldable\n&quot;);
    else
        printf(&quot;Is NOT foldable\n&quot;);
    preorder(root);
    return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-19789">
        <div id="dsq-comment-header-19789" class="dsq-comment-header">
            <cite id="dsq-cite-19789">
                <span id="dsq-author-user-19789">logic_bomber</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19789" class="dsq-comment-body">
            <div id="dsq-comment-message-19789" class="dsq-comment-message"><p>Hope this can be done more easily as follows &#8230; Do drop here if i am wrong</p>
<pre> <code language="C">
    bool isFoldableUtil(TreeNode *root1,TreeNode *root2)
    {
        if(root1==NULL &amp;&amp; root2==NULL)
            return true;
        if(root1==NULL || root2==NULL)    
            return false;
        return ((root1-&gt;val == root2-&gt;val)&amp;&amp;          (isFoldableUtil(root1-&gt;left,root2-&gt;right))&amp;&amp;(isFoldableUtil(root1-&gt;right,root2-&gt;left)));
    }
    bool isFoldable(TreeNode *root) {
        
        if(root==NULL)
            return true;
        return isFoldableUtil(root-&gt;left,root-&gt;right);    
    }
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-19190">
        <div id="dsq-comment-header-19190" class="dsq-comment-header">
            <cite id="dsq-cite-19190">
                <span id="dsq-author-user-19190">Prashant Agarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19190" class="dsq-comment-body">
            <div id="dsq-comment-message-19190" class="dsq-comment-message"><p>We can find the inorder and postorder traversals of the tree and compare both the arrays&#8230;.<br />
Thats i think easiest way&#8230;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-shek8034 even depth-2" id="dsq-comment-19886">
        <div id="dsq-comment-header-19886" class="dsq-comment-header">
            <cite id="dsq-cite-19886">
                <span id="dsq-author-user-19886">shek8034</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19886" class="dsq-comment-body">
            <div id="dsq-comment-message-19886" class="dsq-comment-message"><p>This wont work because you have to consider their structure, not their values. If you store the traversals in arrays, then finally you end up with comparing the two arrays, which is wrong since you have to check if the left structure is mirror of right structure or not, not their values. (See the definition of Folded trees).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-even depth-1" id="dsq-comment-18117">
        <div id="dsq-comment-header-18117" class="dsq-comment-header">
            <cite id="dsq-cite-18117">
                <span id="dsq-author-user-18117">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18117" class="dsq-comment-body">
            <div id="dsq-comment-message-18117" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15031">
        <div id="dsq-comment-header-15031" class="dsq-comment-header">
            <cite id="dsq-cite-15031">
                <span id="dsq-author-user-15031">mrn</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15031" class="dsq-comment-body">
            <div id="dsq-comment-message-15031" class="dsq-comment-message"><p>@geeksforgeeks : I think only one of them is sufficient to check.why both?<br />
   a) n1-&gt;left is mirror of n2-&gt;right<br />
   b) n1-&gt;right is mirror of n2-&gt;left<br />
Here is my code.Plz let me know for what input this code breaks.</p>
<pre> <code language="C">
bool isfoldable(Node *n1,Node *n2)
{
	if(n1==NULL &amp;&amp; n2==NULL) return true;
	if(((!n1-&gt;l &amp;&amp; !n2-&gt;r) || (n1-&gt;l &amp;&amp; n2-&gt;r))  &amp;&amp; 
	   ((!n1-&gt;r &amp;&amp; !n2-&gt;l) || (n1-&gt;r &amp;&amp; n2-&gt;l)) &amp;&amp; 
	   isfoldable(n1-&gt;l,n2-&gt;r) &amp;&amp; isfoldable(n1-&gt;r,n2-&gt;l)
	   )
	{
		return true;
	}
	return false;
}

In main() : calling isfoldable(root-&gt;l,root-&gt;r);
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10426">
        <div id="dsq-comment-header-10426" class="dsq-comment-header">
            <cite id="dsq-cite-10426">
                <span id="dsq-author-user-10426">Sarvasva Sawhney</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10426" class="dsq-comment-body">
            <div id="dsq-comment-message-10426" class="dsq-comment-message"><p>u not using double pointers so there will be no change original tree so no need to correct tree to original tree</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10160">
        <div id="dsq-comment-header-10160" class="dsq-comment-header">
            <cite id="dsq-cite-10160">
                <span id="dsq-author-user-10160">seabird</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10160" class="dsq-comment-body">
            <div id="dsq-comment-message-10160" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

typedef struct node{
    int data;
    struct node *left;
    struct node *right;
} node;

int foldable(node *rootl,node *rootr) {
    if(rootl==NULL &amp;&amp; rootr==NULL)return 1;
    if(rootl-&gt;left==NULL &amp;&amp; rootr-&gt;right==NULL &amp;&amp;rootr-&gt;left==NULL&amp;&amp;rootl-&gt;right==NULL) return 1;
    if(rootl-&gt;left==NULL &amp;&amp; rootr-&gt;right==NULL &amp;&amp;rootr-&gt;left!=NULL&amp;&amp;rootl-&gt;right!=NULL) return foldable(rootl-&gt;right,rootr-&gt;left);
    else if(rootl-&gt;left!=NULL &amp;&amp; rootr-&gt;right!=NULL &amp;&amp;rootr-&gt;left==NULL&amp;&amp;rootl-&gt;right==NULL) return foldable(rootl-&gt;left,rootr-&gt;right);
    else if(rootl-&gt;left!=NULL &amp;&amp; rootr-&gt;right!=NULL &amp;&amp;rootr-&gt;left!=NULL&amp;&amp;rootl-&gt;right!=NULL) {
        foldable(rootl-&gt;left,rootr-&gt;right);
        foldable(rootl-&gt;right,rootr-&gt;left);
    }
    else return 0;
}

node *make_tree(node *root,int num)
{
    if(root==NULL) {
        node *newnode=malloc(sizeof(node));
        newnode-&gt;data=num;
        newnode-&gt;left=NULL;
        newnode-&gt;right=NULL;
        root=newnode;
    } else {
        if((root-&gt;data) &lt;= num ) {
            root-&gt;right=make_tree(root-&gt;right,num);
        } else {
            root-&gt;left=make_tree(root-&gt;left,num);
        }
    }
    return root;
}

int main()
{
    int n;
    scanf(&quot;%d&quot;,&amp;n);
    int i;
    node *root=NULL;
    int num;
    for(i=0;i&lt;n;i++) {
        scanf(&quot;%d&quot;,&amp;num);
        root=make_tree(root,num);
    }
    if(root &amp;&amp; root-&gt;left &amp;&amp; root-&gt;right) {
        int flag=foldable(root-&gt;left,root-&gt;right);
        if(flag)
            printf(&quot;YES\n&quot;);
        else printf(&quot;NO\n&quot;);
    } else if(root) {
        printf(&quot;NO\n&quot;);
    } else printf(&quot;YES\n&quot;);
    return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9627">
        <div id="dsq-comment-header-9627" class="dsq-comment-header">
            <cite id="dsq-cite-9627">
                <span id="dsq-author-user-9627">Sourabh Goyal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9627" class="dsq-comment-body">
            <div id="dsq-comment-message-9627" class="dsq-comment-message"><p>I think in the first method, in the function isstructsame() there should be </p>
<pre> <code language="C">
if ( a != NULL &amp;&amp; b != NULL &amp;&amp;
       isStructSame(a-&gt;left, b-&gt;right) &amp;&amp;
       isStructSame(a-&gt;right, b-&gt;left)
     ) /*b-&gt;right and b-&gt;left are interchanged*/
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-9338">
        <div id="dsq-comment-header-9338" class="dsq-comment-header">
            <cite id="dsq-cite-9338">
                <span id="dsq-author-user-9338">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9338" class="dsq-comment-body">
            <div id="dsq-comment-message-9338" class="dsq-comment-message"><p>check if right subtree  and left subtree calls are equal in number</p>
<p>void foldable(struct node* root, int L, int R )<br />
{<br />
    if(root == NULL)<br />
    return;</p>
<p>    foldable(root-&gt;left,L+1,R);<br />
     foldable_left+= L;<br />
     foldable_right+= R;<br />
    foldable(root-&gt;right,L,R+1);<br />
}</p>
<p>void main()<br />
{<br />
foldable(root,0,0);</p>
<p>if(foldable_left == foldable_right)<br />
printf(&#8220;BST is a foldable BST\n&#8221;);<br />
else<br />
printf(&#8220;BST is not a foldable BST\n&#8221;);</p>
<p>return;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-9339">
        <div id="dsq-comment-header-9339" class="dsq-comment-header">
            <cite id="dsq-cite-9339">
                <span id="dsq-author-user-9339">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9339" class="dsq-comment-body">
            <div id="dsq-comment-message-9339" class="dsq-comment-message"><p>in the code above:<br />
foldable_left and foldable_right are global variables intitialised to 0</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-2379">
        <div id="dsq-comment-header-2379" class="dsq-comment-header">
            <cite id="dsq-cite-2379">
                <span id="dsq-author-user-2379">lekhooo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2379" class="dsq-comment-body">
            <div id="dsq-comment-message-2379" class="dsq-comment-message"><pre> <code language="C">#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;alloc.h&gt;
int isfoldable(struct node *,struct node*);
struct node* newNode(int );
struct node
{int info;
struct node* left;
struct node* right;
};
void main()
{
struct node * root;
root=NULL;
root = newNode(1);
root-&gt;left        = newNode(2);
 root-&gt;right       = newNode(3);
  root-&gt;right-&gt;left  = newNode(4);
  root-&gt;left-&gt;right = newNode(5);

  if(isfoldable(root,root) == 1)
  { printf(&quot;\n tree is foldable&quot;); }
  else
  { printf(&quot;\n tree is not foldable&quot;); }

  getch();


}
int isfoldable(struct node* x,struct node* y)
{
static int l=1,r=1;
if(l==1&amp;&amp;r==1)
{
if(x!=NULL&amp;&amp;y==NULL)return 0;
else if(x==NULL&amp;&amp;y!=NULL)return 0;
else if(x!=NULL&amp;&amp;y!=NULL)
{
l=isfoldable(x-&gt;right,y-&gt;left);
r=isfoldable(x-&gt;left,y-&gt;right);
return 1;
}
}
else
return 0;
}
struct node* newNode(int data)
{
  struct node* node = (struct node*)malloc(sizeof(struct node));
  node-&gt;info = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}
</code> </pre>
<p>plz correct me</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-2390">
        <div id="dsq-comment-header-2390" class="dsq-comment-header">
            <cite id="dsq-cite-2390">
                <span id="dsq-author-user-2390">donbosio</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2390" class="dsq-comment-body">
            <div id="dsq-comment-message-2390" class="dsq-comment-message"><p>good..!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-shekhu even thread-odd thread-alt depth-1" id="dsq-comment-1354">
        <div id="dsq-comment-header-1354" class="dsq-comment-header">
            <cite id="dsq-cite-1354">
                <span id="dsq-author-user-1354">Shekhu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1354" class="dsq-comment-body">
            <div id="dsq-comment-message-1354" class="dsq-comment-message"><p>Your approach would print &#8220;Not foldable&#8221; for below tree, but it is foldable.</p>
<pre>
        10
     /     \
    7      15
    \      /
     9   11
</pre>
<p>When the pointer comes to node with value 7, it sees that right is not NULL and left is NULL, so returns false. Same is the case with node of value 5. Correct me if I am wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-1355">
        <div id="dsq-comment-header-1355" class="dsq-comment-header">
            <cite id="dsq-cite-1355">
http://dzmitryhuba.blogspot.com                <span id="dsq-author-user-1355">Dzmitry Huba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1355" class="dsq-comment-body">
            <div id="dsq-comment-message-1355" class="dsq-comment-message"><p>Nope, it correctly detects that it is a foldable tree as it won&#8217;t work with 7th left and  right subtrees at the same time but rather 7th left and 15th right.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geek4u even depth-3" id="dsq-comment-1361">
        <div id="dsq-comment-header-1361" class="dsq-comment-header">
            <cite id="dsq-cite-1361">
                <span id="dsq-author-user-1361">geek4u</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1361" class="dsq-comment-body">
            <div id="dsq-comment-message-1361" class="dsq-comment-message"><p>I concur with @Dzmitry Huba, his solution works fine, and is efficient.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-3" id="dsq-comment-1364">
        <div id="dsq-comment-header-1364" class="dsq-comment-header">
            <cite id="dsq-cite-1364">
                <span id="dsq-author-user-1364">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1364" class="dsq-comment-body">
            <div id="dsq-comment-message-1364" class="dsq-comment-message"><p>@Dzmitry Huba: Thanks for suggesting a mew method. We have included it to the original post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-1375">
        <div id="dsq-comment-header-1375" class="dsq-comment-header">
            <cite id="dsq-cite-1375">
                <span id="dsq-author-user-1375">smilinglyqing</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1375" class="dsq-comment-body">
            <div id="dsq-comment-message-1375" class="dsq-comment-message"><p>as long as change the following part: </p>
<pre> <code language="C">
if (n1 == NULL &amp;&amp; n2 == NULL)  
    {  return true;  }    

 /* If one of the trees is NULL and other is not,  
      then return false */ 
if (n1 == NULL || n2 == NULL)  
    {  return false; }  
</code> </pre>
<p>to be </p>
<pre> <code language="C">
if (n1 == NULL &amp;&amp; n2 == NULL)  
    {  return true;  }  

/* If one of the trees is NULL and other is not,  
      then return false */ 
else 
  if (n1 == NULL || n2 == NULL)  
    {  return false; }
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-3" id="dsq-comment-1376">
        <div id="dsq-comment-header-1376" class="dsq-comment-header">
            <cite id="dsq-cite-1376">
                <span id="dsq-author-user-1376">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1376" class="dsq-comment-body">
            <div id="dsq-comment-message-1376" class="dsq-comment-message"><p>@smilinglyqing,</p>
<p>They both are same.  Presence of &#8220;return&#8221; statement inside &#8220;if&#8221; makes &#8220;else&#8221; optional <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-2267">
        <div id="dsq-comment-header-2267" class="dsq-comment-header">
            <cite id="dsq-cite-2267">
                <span id="dsq-author-user-2267">dev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2267" class="dsq-comment-body">
            <div id="dsq-comment-message-2267" class="dsq-comment-message"><p>I think we can eliminate the steps of mirroring the left subtree and than resetting it back. We can just rite the condition like this inside the isStructureSame():<br />
if ( a != NULL &amp;&amp; b != NULL &amp;&amp;<br />
       isStructSame(a-&gt;left, b-&gt;right) &amp;&amp;<br />
       isStructSame(a-&gt;right, b-&gt;left)<br />
     )</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-1353">
        <div id="dsq-comment-header-1353" class="dsq-comment-header">
            <cite id="dsq-cite-1353">
http://dzmitryhuba.blogspot.com/                <span id="dsq-author-user-1353">Dzmitry Huba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1353" class="dsq-comment-body">
            <div id="dsq-comment-message-1353" class="dsq-comment-message"><p>We can avoid tree modification costs by making the following recursive algorithm. Suppose we have two trees (L1, N1, R1) and (L2, N2, R2) where L and R denote left and right subtrees respectively and N is a root. In order to check if they have mirror structure we need to recursively check whether pairs (L1, R2) and (R1, L2) are foldable. You can find code in C# below:</p>
<p>static bool IsFoldable&lt;T&gt;(TreeNode&lt;T&gt; root)<br />
	where T:IComparable&lt;T&gt;<br />
{<br />
	if (root == null)<br />
		return true;<br />
	return IsFoldable(root.Left, root.Right);<br />
}</p>
<p>static bool IsFoldable&lt;T&gt;(TreeNode&lt;T&gt; n1, TreeNode&lt;T&gt; n2)<br />
	where T : IComparable&lt;T&gt;<br />
{<br />
	if (n1 == null &amp;&amp; n2 == null)<br />
		return true;</p>
<p>	if (n1 == null || n2 == null)<br />
		return false;</p>
<p>	return IsFoldable(n1.Left, n2.Right) &amp;&amp; IsFoldable(n1.Right, n2.Left);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/foldable-binary-trees/';
var disqus_identifier = '7956 http://geeksforgeeks.org/?p=7956';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Foldable Binary Trees";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.197 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:29:39 -->

<!-- Compression = gzip -->
<!-- super cache -->