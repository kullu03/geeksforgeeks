<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Connect nodes at same level - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/connect-nodes-at-same-level/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Connect nodes at same level - GeeksforGeeks" />
<meta property="og:description" content="Write a function to connect all the adjacent nodes at the same level in a binary tree. Structure of the given Binary Tree node is like following. Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node. Example Input Tree A / \ &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/connect-nodes-at-same-level/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2012-01-11T15:58:01+00:00" />
<meta property="article:modified_time" content="2014-01-01T19:45:02+00:00" />
<meta property="og:updated_time" content="2014-01-01T19:45:02+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.560 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111191 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Connect nodes at same level</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Write a function to connect all the adjacent nodes at the same level in a binary tree. Structure of the given Binary Tree node is like following. <span id="more-8631"></span></p>
<pre class="brush: cpp; title: ; notranslate" title="">
struct node{
  int data;
  struct node* left;
  struct node* right;
  struct node* nextRight;  
}
</pre>
<p>Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node.</p>
<p>Example</p>
<pre>
Input Tree
       A
      / \
     B   C
    / \   \
   D   E   F


Output Tree
       A--->NULL
      / \
     B-->C-->NULL
    / \   \
   D-->E-->F-->NULL
</pre>
<p><strong>Method 1 (Extend Level Order Traversal or BFS)</strong><br />
Consider the method 2 of <a href="http://www.geeksforgeeks.org/archives/2686">Level Order Traversal</a>. The method 2 can easily be extended to connect nodes of same level.  We can augment queue entries to contain level of nodes also which is 0 for root, 1 for root&#8217;s children and so on.  So a queue node will now contain a pointer to a tree node and an integer level. When we enqueue a node, we make sure that correct level value for node is being set in queue.  To set nextRight, for every node N, we dequeue the next node from queue, if the level number of next node is same, we set the nextRight of N as address of the dequeued node, otherwise we set nextRight of N as NULL.  </p>
<p>Time Complexity:  O(n)</p>
<pre></pre>
<p><strong>Method 2 (Extend Pre Order Traversal)</strong><br />
This approach works only for <a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees">Complete Binary Trees</a>. In this method we set nextRight in Pre Order fashion to make sure that the nextRight of parent is set before its children.  When we are at node p, we set the nextRight of its left and right children.  Since the tree is complete tree, nextRight of p&#8217;s left child (p->left->nextRight) will always be p&#8217;s right child, and nextRight of p&#8217;s right child (p->right->nextRight) will always be left child of p&#8217;s nextRight (if p is not the rightmost node at its level). If p is the rightmost node, then nextRight of p&#8217;s right child will be NULL.</p>
<pre class="brush: cpp; highlight: [14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

struct node
{
  int data;
  struct node *left;
  struct node *right;
  struct node *nextRight;
};

void connectRecur(struct node* p);

// Sets the nextRight of root and calls connectRecur() for other nodes
void connect (struct node *p)
{
    // Set the nextRight for root
    p-&gt;nextRight = NULL;

    // Set the next right for rest of the nodes (other than root)
    connectRecur(p);
}

/* Set next right of all descendents of p.
   Assumption:  p is a compete binary tree */
void connectRecur(struct node* p)
{
  // Base case
  if (!p)
    return;

  // Set the nextRight pointer for p's left child
  if (p-&gt;left)
    p-&gt;left-&gt;nextRight = p-&gt;right;

  // Set the nextRight pointer for p's right child
  // p-&gt;nextRight will be NULL if p is the right most child at its level
  if (p-&gt;right)
    p-&gt;right-&gt;nextRight = (p-&gt;nextRight)? p-&gt;nextRight-&gt;left: NULL;

  // Set nextRight for other nodes in pre order fashion
  connectRecur(p-&gt;left);
  connectRecur(p-&gt;right);
}

/* UTILITY FUNCTIONS */
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newnode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;
  node-&gt;nextRight = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{

  /* Constructed binary tree is
            10
          /   \
        8      2
      /
    3
  */
  struct node *root = newnode(10);
  root-&gt;left        = newnode(8);
  root-&gt;right       = newnode(2);
  root-&gt;left-&gt;left  = newnode(3);

  // Populates nextRight pointer in all nodes
  connect(root);

  // Let us check the values of nextRight pointers
  printf(&quot;Following are populated nextRight pointers in the tree &quot;
          &quot;(-1 is printed if there is no nextRight) \n&quot;);
  printf(&quot;nextRight of %d is %d \n&quot;, root-&gt;data,
         root-&gt;nextRight? root-&gt;nextRight-&gt;data: -1);
  printf(&quot;nextRight of %d is %d \n&quot;, root-&gt;left-&gt;data,
        root-&gt;left-&gt;nextRight? root-&gt;left-&gt;nextRight-&gt;data: -1);
  printf(&quot;nextRight of %d is %d \n&quot;, root-&gt;right-&gt;data,
        root-&gt;right-&gt;nextRight? root-&gt;right-&gt;nextRight-&gt;data: -1);
  printf(&quot;nextRight of %d is %d \n&quot;, root-&gt;left-&gt;left-&gt;data,
        root-&gt;left-&gt;left-&gt;nextRight? root-&gt;left-&gt;left-&gt;nextRight-&gt;data: -1);

  getchar();
  return 0;
}
</pre>
<p>Thanks to Dhanya for suggesting this approach.</p>
<p>Time Complexity:  O(n)</p>
<p><strong><em>Why doesn&#8217;t method 2 work for trees which are not Complete Binary Trees?</em></strong><br />
Let us consider following tree as an example.  In Method 2, we set the nextRight pointer in pre order fashion.  When we are at node 4, we set the nextRight of its children which are 8 and 9 (the nextRight of 4 is already set as node 5). nextRight of 8 will simply be set as 9, but nextRight of 9 will be set as NULL which is incorrect.  We can&#8217;t set the correct nextRight, because when we set nextRight of 9, we only have nextRight of node 4 and ancestors of node 4, we don&#8217;t have nextRight of nodes in right subtree of root.</p>
<pre>
            1
          /    \
        2        3
       / \      /  \
      4   5    6    7
     / \           / \  
    8   9        10   11
</pre>
<p>See <a href="http://www.geeksforgeeks.org/archives/16952">next post </a>for more solutions.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li><li><a href="http://www.geeksforgeeks.org/convert-binary-tree-threaded-binary-tree/" title="Convert a Binary Tree to Threaded binary tree">Convert a Binary Tree to Threaded binary tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-n-ary-tree/" title="Serialize and Deserialize an N-ary Tree">Serialize and Deserialize an N-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/" title="Serialize and Deserialize a Binary Tree">Serialize and Deserialize a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/" title="Print nodes between two given level numbers of a binary tree">Print nodes between two given level numbers of a binary tree</a></li><li><a href="http://www.geeksforgeeks.org/find-height-binary-tree-represented-parent-array/" title="Find Height of Binary Tree represented by Parent array">Find Height of Binary Tree represented by Parent array</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fconnect-nodes-at-same-level%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/connect-nodes-at-same-level/" data-text="Connect nodes at same level" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/connect-nodes-at-same-level/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-32801">
        <div id="dsq-comment-header-32801" class="dsq-comment-header">
            <cite id="dsq-cite-32801">
                <span id="dsq-author-user-32801">Pradeep H N</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32801" class="dsq-comment-body">
            <div id="dsq-comment-message-32801" class="dsq-comment-message"><p>Below code works for a binary tree </p>
<p>void *reform(struct node *f)<br />
{</p>
<p>  if (f == NULL) {<br />
       return NULL;<br />
  }</p>
<p>  if (f-&gt;left != NULL) {<br />
       f-&gt;left-&gt;nextRight = f-&gt;rlink;<br />
  }<br />
  reform(f-&gt;left);<br />
  reform(f-&gt;right);</p>
<p>  if(f-&gt;right != NULL &amp;&amp; f-&gt;nextRight != NULL) {<br />
       if (f-&gt;nextRight-&gt;left != NULL) {<br />
             f-&gt;right-&gt;nextRight = f-&gt;nextRight-&gt;left;<br />
       } else  {<br />
             f-&gt;right-&gt;nextRight = f-&gt;nextRight-&gt;right;<br />
       }<br />
  } else if (f-&gt;right == NULL &amp;&amp; f-&gt;nextRight != NULL  &amp;&amp; f-&gt;left != NULL) {<br />
       if (f-&gt;nextRight-&gt;left != NULL) {<br />
           f-&gt;left-&gt;nextRight = f-&gt;nextRight-&gt;left;<br />
       } else {<br />
           f-&gt;left-&gt;nextRight = f-&gt;nextRight-&gt;right;<br />
       }<br />
  }</p>
<p>}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-32802">
        <div id="dsq-comment-header-32802" class="dsq-comment-header">
            <cite id="dsq-cite-32802">
                <span id="dsq-author-user-32802">Pradeep H N</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32802" class="dsq-comment-body">
            <div id="dsq-comment-message-32802" class="dsq-comment-message"><p>return; instead of return NULL</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-32807">
        <div id="dsq-comment-header-32807" class="dsq-comment-header">
            <cite id="dsq-cite-32807">
                <span id="dsq-author-user-32807">Pradeep H N</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32807" class="dsq-comment-body">
            <div id="dsq-comment-message-32807" class="dsq-comment-message"><p>f-&gt;left-&gt;nextRight = f-&gt;right instead of<br />
f-&gt;left-&gt;nextRight = f-&gt;rlink;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32061">
        <div id="dsq-comment-header-32061" class="dsq-comment-header">
            <cite id="dsq-cite-32061">
                <span id="dsq-author-user-32061">Meenal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32061" class="dsq-comment-body">
            <div id="dsq-comment-message-32061" class="dsq-comment-message"><p>Can you please give an idea as to how to check whether one level is complete in level order travel using queue. i.e how to store level info in method 1.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-31722">
        <div id="dsq-comment-header-31722" class="dsq-comment-header">
            <cite id="dsq-cite-31722">
                <span id="dsq-author-user-31722">newalgolearner</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31722" class="dsq-comment-body">
            <div id="dsq-comment-message-31722" class="dsq-comment-message"><p>hi geeks for geeks this is my recursive solution that is valid for all trees.</p>
<p>void connect_same_level(node **tree)<br />
{<br />
connect(tree, NULL, 0);<br />
}</p>
<p>void connect(node **tree, node *parent, bool l)<br />
{<br />
if(*tree == NULL) return;</p>
<p>if(parent == NULL) (*tree)-&gt;nextRight = NULL;<br />
else {<br />
if(l == 0) {<br />
if(parent-&gt;left != NULL) (*tree)-&gt;nextRight = parent-&gt;left;<br />
else connect(tree, parent, 1);<br />
} else if(l == 1) {<br />
if(parent-&gt;right != NULL) (*tree)-&gt;nextRight = parent-&gt;right;<br />
else connect(tree, parent-&gt;nextRight, 0);<br />
}<br />
connect(&amp;((*tree)-&gt;left), *tree, 1);<br />
connect(&amp;((*tree)-&gt;left), (*tree)-&gt;nextRight, 0);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30465">
        <div id="dsq-comment-header-30465" class="dsq-comment-header">
            <cite id="dsq-cite-30465">
                <span id="dsq-author-user-30465">Sri Krishna V</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30465" class="dsq-comment-body">
            <div id="dsq-comment-message-30465" class="dsq-comment-message"><p>{<br />
            Map map = new HashMap();<br />
//To save the height as key, and nodes as values. Run a loop for all the keys and traverse each node to print the data.</p>
<p>        if (temp != null)<br />
                     connectNextRight(temp, 0, map);<br />
}</p>
<p>public void connectNextRight(Node node, int h, Map map)<br />
    {<br />
        if (node == null)<br />
            return;</p>
<p>        Node temp = map.get(h);<br />
        if (temp == null)<br />
        {<br />
            map.put(h, node);<br />
        }<br />
        else<br />
        {<br />
            while (temp.getNextRight() != null)<br />
                temp = temp.getNextRight();</p>
<p>            temp.setNextRight(node);<br />
        }</p>
<p>        connectNextRight(node.getleft(), h + 1, map);<br />
        connectNextRight(node.getRight(), h + 1, map);<br />
    }</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30466">
        <div id="dsq-comment-header-30466" class="dsq-comment-header">
            <cite id="dsq-cite-30466">
                <span id="dsq-author-user-30466">Chetan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30466" class="dsq-comment-body">
            <div id="dsq-comment-message-30466" class="dsq-comment-message"><p>Perfect <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28630">
        <div id="dsq-comment-header-28630" class="dsq-comment-header">
            <cite id="dsq-cite-28630">
                <span id="dsq-author-user-28630">Vivek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28630" class="dsq-comment-body">
            <div id="dsq-comment-message-28630" class="dsq-comment-message"><p><code></p>
<p>#include </p>
<p>#include </p>
<p>struct node</p>
<p>{</p>
<p>	int data;</p>
<p>	struct node *left;</p>
<p>	struct node *right;</p>
<p>	struct node *nextRight;</p>
<p>};</p>
<p>int max(int a, int b)</p>
<p>{</p>
<p>	return a&gt;b?a:b;</p>
<p>}</p>
<p>int find_height(struct node *root)</p>
<p>{</p>
<p>	if(root)</p>
<p>	{</p>
<p>		return 1+max(find_height(root-&gt;left),find_height(root-&gt;right));</p>
<p>	}</p>
<p>	else</p>
<p>	return 0;</p>
<p>}</p>
<p>void connect_nodesUtil(struct node *root, int l, struct node **arr)</p>
<p>{</p>
<p>    if(root)</p>
<p>    {</p>
<p>    	if(!arr[l])</p>
<p>    	{</p>
<p>    		root-&gt;nextRight=NULL;</p>
<p>    		arr[l]=root;</p>
<p>    	}</p>
<p>    	else</p>
<p>    	{</p>
<p>    		root-&gt;nextRight=NULL;</p>
<p>    		(arr[l])-&gt;nextRight=root;</p>
<p>    		arr[l]=root;</p>
<p>    	}</p>
<p>    	connect_nodesUtil(root-&gt;left, l+1, arr);</p>
<p>    	connect_nodesUtil(root-&gt;right, l+1, arr);</p>
<p>    }</p>
<p>}</p>
<p>void connect_nodes(struct node *root)</p>
<p>{</p>
<p>	struct node **arr= (struct node **)malloc(sizeof(struct node *)*find_height(root));</p>
<p>	connect_nodesUtil(root,0,arr);</p>
<p>}</p>
<p>struct node* newnode(int data)</p>
<p>{</p>
<p>  struct node* node = (struct node*)</p>
<p>                       malloc(sizeof(struct node));</p>
<p>  node-&gt;data = data;</p>
<p>  node-&gt;left = NULL;</p>
<p>  node-&gt;right = NULL;</p>
<p>  node-&gt;nextRight = NULL;</p>
<p>  return(node);</p>
<p>}</p>
<p>/* Driver program to test above functions*/</p>
<p>int main()</p>
<p>{</p>
<p>  /* Constructed binary tree is</p>
<p>            10</p>
<p>          /   </p>
<p>        8      2</p>
<p>      /</p>
<p>    3</p>
<p>  */</p>
<p>  struct node *root = newnode(10);</p>
<p>  root-&gt;left        = newnode(8);</p>
<p>  root-&gt;right       = newnode(2);</p>
<p>  root-&gt;left-&gt;left  = newnode(3);</p>
<p>  // Populates nextRight pointer in all nodes</p>
<p>  connect_nodes(root);</p>
<p>  // Let us check the values of nextRight pointers</p>
<p>  printf("Following are populated nextRight pointers in the tree "</p>
<p>          "(-1 is printed if there is no nextRight) n");</p>
<p>  printf("nextRight of %d is %d n", root-&gt;data,</p>
<p>         root-&gt;nextRight? root-&gt;nextRight-&gt;data: -1);</p>
<p>  printf("nextRight of %d is %d n", root-&gt;left-&gt;data,</p>
<p>        root-&gt;left-&gt;nextRight? root-&gt;left-&gt;nextRight-&gt;data: -1);</p>
<p>  printf("nextRight of %d is %d n", root-&gt;right-&gt;data,</p>
<p>        root-&gt;right-&gt;nextRight? root-&gt;right-&gt;nextRight-&gt;data: -1);</p>
<p>  printf("nextRight of %d is %d n", root-&gt;left-&gt;left-&gt;data,</p>
<p>        root-&gt;left-&gt;left-&gt;nextRight? root-&gt;left-&gt;left-&gt;nextRight-&gt;data: -1);</p>
<p>  getchar();</p>
<p>  return 0;</p>
<p>}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28629">
        <div id="dsq-comment-header-28629" class="dsq-comment-header">
            <cite id="dsq-cite-28629">
                <span id="dsq-author-user-28629">Vivek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28629" class="dsq-comment-body">
            <div id="dsq-comment-message-28629" class="dsq-comment-message"><p>hi geeks for geeks&#8230;<br />
i have implemented this using preorder traversal. It would work for any given tree. In this i have used an array which keeps track of the last node traversed in any particular level. As soon as i come across a node in the  level(suppose l) nextRight pointer of the node in the array(arr[l]) (last traversed node in level &#8220;l&#8221;) is set to point to the current node at the level &#8216;l&#8217;</p>
<p>.i.e.(arr[l]-&gt;nextRight = current) .</p>
<p>next  store the &#8220;cuurent &#8221; node as the last traversed node in level &#8220;l&#8221;.</p>
<p>  i.e arr[l] = current.</p>
<p>here&#8217;s my solution above</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28439">
        <div id="dsq-comment-header-28439" class="dsq-comment-header">
            <cite id="dsq-cite-28439">
                <span id="dsq-author-user-28439">pavan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28439" class="dsq-comment-body">
            <div id="dsq-comment-message-28439" class="dsq-comment-message"><p>code in java  &#8230;.pls validate me&#8230;i used level order traversal &#8230;.<br />
<code><br />
void fillRight(){<br />
        Node temp = root;<br />
        Queue q = new LinkedList();<br />
        q.add(temp);<br />
        q.add(null);</p>
<p>        while (!q.isEmpty()) {<br />
            temp = q.remove();<br />
            if(temp == null){<br />
                if(!q.isEmpty()){<br />
                    q.add(null);<br />
                }<br />
            }</p>
<p>            else{<br />
                    temp.rightSibling = q.peek();<br />
                if (temp.leftChild != null) {<br />
                    q.add(temp.leftChild);<br />
                }</p>
<p>                if (temp.rightChild != null) {<br />
                    q.add(temp.rightChild);<br />
                }<br />
            }<br />
    }</p>
<p>    }</code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27261">
        <div id="dsq-comment-header-27261" class="dsq-comment-header">
            <cite id="dsq-cite-27261">
                <span id="dsq-author-user-27261">Jake</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27261" class="dsq-comment-body">
            <div id="dsq-comment-message-27261" class="dsq-comment-message"><p>Here is a very simple solution for full binary tree, please verify this-</p>
<p>void connectAdj(tNode* l, tNode* r)<br />
{<br />
       if( l==NULL || r==NULL)<br />
                return;</p>
<p>        l-&gt;nextRight = r;<br />
       r-&gt;nextRight = NULL;</p>
<p>       connectAdj(l-&gt;left,l-&gt;right);<br />
       connectAdj(l-&gt;right,r-&gt;left);<br />
       connectAdj(r-&gt;left,r-&gt;right);</p>
<p>}</p>
<p>void connect(tNode* root)<br />
{</p>
<p>          root-&gt;nextRight = NULL;<br />
       connectAdj(root-&gt;left, root-&gt;right);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-vinodhinic odd alt thread-even depth-1" id="dsq-comment-25011">
        <div id="dsq-comment-header-25011" class="dsq-comment-header">
            <cite id="dsq-cite-25011">
                <span id="dsq-author-user-25011">vinodhinic</span>
            </cite>
        </div>
        <div id="dsq-comment-body-25011" class="dsq-comment-body">
            <div id="dsq-comment-message-25011" class="dsq-comment-message"><p>Hi,<br />
I have been trying to solve the method 1 using Level order traversal, without storing the level for each node. My idea is to have a delimiter (let us say NULL) between each levels. The Pseudocode is below. Please check if it is correct.</p>
<pre> <code language="C">
queue.enqueue(root)
queue.enqueue(DELIMITER)

while(queue is not Empty AND queue.front()!=DELIMITER){
       NODE temp=queue.dequeue()
       if(temp-&gt;left){ queue.enqueue(temp-&gt;left) }
       if(temp-&gt;right){ queue.enqueue(temp-&gt;right) }
       NODE top=q.front()
       if(top==DELIMITER){
              temp-&gt;nextRight = NULL;
              queue.dequeue()
              queue.enqueue(DELIMITER)
       }
       else{
              temp-&gt;nextRight=top
       }
}
</code> </pre>
<p>Thanks in advance</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-28441">
        <div id="dsq-comment-header-28441" class="dsq-comment-header">
            <cite id="dsq-cite-28441">
                <span id="dsq-author-user-28441">pavan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28441" class="dsq-comment-body">
            <div id="dsq-comment-message-28441" class="dsq-comment-message"><p>are we doing the same? pls validate me&#8230;i used level order traversal &#8230;.</p>
<p>void fillRight(){<br />
        Node temp = root;<br />
        Queue q = new LinkedList();<br />
        q.add(temp);<br />
        q.add(null);</p>
<p>        while (!q.isEmpty()) {<br />
            temp = q.remove();<br />
            if(temp == null){<br />
                if(!q.isEmpty()){<br />
                    q.add(null);<br />
                }<br />
            }</p>
<p>            else{<br />
                    temp.rightSibling = q.peek();<br />
                if (temp.leftChild != null) {<br />
                    q.add(temp.leftChild);<br />
                }</p>
<p>                if (temp.rightChild != null) {<br />
                    q.add(temp.rightChild);<br />
                }<br />
            }<br />
    }</p>
<p>    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-33363">
        <div id="dsq-comment-header-33363" class="dsq-comment-header">
            <cite id="dsq-cite-33363">
                <span id="dsq-author-user-33363">Ameet Chhatwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33363" class="dsq-comment-body">
            <div id="dsq-comment-message-33363" class="dsq-comment-message"><p>Beautiful solution thanks for sharing!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-21826">
        <div id="dsq-comment-header-21826" class="dsq-comment-header">
            <cite id="dsq-cite-21826">
                <span id="dsq-author-user-21826">Pavan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21826" class="dsq-comment-body">
            <div id="dsq-comment-message-21826" class="dsq-comment-message"><pre> <code language="C">
// code for method 1

void connect (struct node *root)
{
struct node *prev, *next;
queue&lt;struct node*&gt;q;
prev=NULL;
q.push(root);
q.push(NULL);
while(1)
{
    if(prev==NULL)
    {
    prev=q.front();
    q.pop();
    }
    if(prev!=NULL)
    {
        if(prev-&gt;left) q.push(prev-&gt;left);
        if(prev-&gt;right) q.push(prev-&gt;right);
    }
    if(q.empty()) break;
    next=q.front();
    q.pop();
    if(prev!=NULL)
    {
        prev-&gt;nextRight=next;
        prev=next;
    }
    if(prev==NULL)
    q.push(NULL);
}
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-denial odd alt depth-2" id="dsq-comment-21827">
        <div id="dsq-comment-header-21827" class="dsq-comment-header">
            <cite id="dsq-cite-21827">
                <span id="dsq-author-user-21827">denial</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21827" class="dsq-comment-body">
            <div id="dsq-comment-message-21827" class="dsq-comment-message"><p>@Pavan(Google), Nice&#8230;&#8230;..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-sakekuma even thread-even depth-1" id="dsq-comment-19633">
        <div id="dsq-comment-header-19633" class="dsq-comment-header">
            <cite id="dsq-cite-19633">
                <span id="dsq-author-user-19633">sakekuma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19633" class="dsq-comment-body">
            <div id="dsq-comment-message-19633" class="dsq-comment-message"><p>//Java Code to connect Siblings to any type of binary tree</p>
<p> public void connectSiblings(){<br />
	  connectSiblings(root);<br />
	  printSiblings(root);<br />
  }</p>
<p>  private void connectSiblings(Node node){<br />
	  LinkedList&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();<br />
	  if(node!=null)<br />
		  queue.addLast(node);<br />
	  queue.addLast(null);<br />
	  Node prev=null;<br />
	  while(!queue.isEmpty()){<br />
		  Node temp = queue.removeFirst();<br />
		  if(prev!=null)<br />
			  prev.sibling=temp;<br />
		  if(temp==null ){<br />
			  if(queue.peekFirst()==null)<br />
				  return;<br />
			  queue.addLast(null);<br />
		  }<br />
		  else {<br />
			  if(temp.left!=null)<br />
				  queue.addLast(temp.left);<br />
			  if(temp.right!=null)<br />
				  queue.addLast(temp.right);<br />
			}<br />
		  prev = temp;</p>
<p>	  }<br />
  }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-codinggeek16 odd alt thread-odd thread-alt depth-1" id="dsq-comment-18642">
        <div id="dsq-comment-header-18642" class="dsq-comment-header">
            <cite id="dsq-cite-18642">
                <span id="dsq-author-user-18642">codinggeek16</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18642" class="dsq-comment-body">
            <div id="dsq-comment-message-18642" class="dsq-comment-message"><p>We can use two queues instead of storing the level in our queue node in method one.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug even thread-even depth-1" id="dsq-comment-18373">
        <div id="dsq-comment-header-18373" class="dsq-comment-header">
            <cite id="dsq-cite-18373">
                <span id="dsq-author-user-18373">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18373" class="dsq-comment-body">
            <div id="dsq-comment-message-18373" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-13311">
        <div id="dsq-comment-header-13311" class="dsq-comment-header">
            <cite id="dsq-cite-13311">
                <span id="dsq-author-user-13311">Jinu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13311" class="dsq-comment-body">
            <div id="dsq-comment-message-13311" class="dsq-comment-message"><p>void connect(TreeLinkNode *root) {<br />
        // Start typing your C/C++ solution below<br />
        // DO NOT write int main() function<br />
        int i,j;<br />
        TreeLinkNode *temp=NULL;<br />
        int h=height(root);<br />
        for(i=1;inext=root;<br />
                 *temp=root;</p>
<p>             }<br />
          }<br />
          else<br />
          {<br />
              levelorder(root-&gt;left,i,n+1,temp);<br />
              levelorder(root-&gt;right,i,n+1,temp);<br />
          }</p>
<p>      }</p>
<p>    }<br />
    int height(TreeLinkNode * root)<br />
    {<br />
        if(root==NULL)<br />
        return 0;<br />
        else<br />
        return 1+max(height(root-&gt;left),height(root-&gt;right));</p>
<p>    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10940">
        <div id="dsq-comment-header-10940" class="dsq-comment-header">
            <cite id="dsq-cite-10940">
                <span id="dsq-author-user-10940">CODED</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10940" class="dsq-comment-body">
            <div id="dsq-comment-message-10940" class="dsq-comment-message"><p>We can do this by using an array of pointers, of size at least as the level of the tree, which stores the rightmost element visited in that level or NULL if that level is not visited yet. I am using size 100 for simplicity sake.</p>
<p>#define MAX 100</p>
<p>/* Using a global array of pointer to simplify the algo<br />
Note that all the elements in arr are set to NULL and not garbage<br />
*/<br />
struct node* arr[MAX];</p>
<p>connectRight(struct node *root, int level)<br />
{<br />
    if(!root)<br />
    {<br />
        return;<br />
    }<br />
    if( !arr[level]) // first element of that level<br />
    {<br />
        arr[level] = root;<br />
    }<br />
    else  // point the nextRight of the rightmost element<br />
          // visited in that level to the current node<br />
    {<br />
        arr[level]-&gt;nextRight = root;<br />
        arr[level] = root;<br />
    }<br />
    connectRight(root-&gt;left, level+1);<br />
    connectRight(root-&gt;right, level+1);<br />
    return;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9333">
        <div id="dsq-comment-header-9333" class="dsq-comment-header">
            <cite id="dsq-cite-9333">
                <span id="dsq-author-user-9333">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9333" class="dsq-comment-body">
            <div id="dsq-comment-message-9333" class="dsq-comment-message"><p>Here is another logic that may work.<br />
Perform a reverse order BFS and connect the previously visited nodes with the present visited nodes</p>
<p>/*&#8212;&#8211;connect nodes at same level&#8212;&#8212;-*/<br />
void connect_nodes_at_same_level_Utility(struct node* root)<br />
{</p>
<p>    int num;<br />
    num= height(root);<br />
    struct node* prev= NULL;<br />
    int i;<br />
    if(root == NULL)<br />
    return;<br />
    //printf(&#8220;%d\n&#8221;,root-&gt;data);//print root data before moving further to any level<br />
    if(root-&gt;left == NULL &amp;&amp; root-&gt;right== NULL)<br />
    return;<br />
    root-&gt;next= NULL;<br />
    for(i=1; iright,n+1,k,prev);</p>
<p>         if( n== k)<br />
        {<br />
            root-&gt;next= *prev;<br />
            *prev= root;<br />
        }</p>
<p>       connect_nodes_at_same_level(root-&gt;left,n+1,k,prev);</p>
<p>      }</p>
<p>     else<br />
    return 0;</p>
<p>}<br />
/*&#8212;&#8211;connect nodes at same level&#8212;&#8212;-*/</p>
<p>void main()<br />
{<br />
connect_nodes_at_same_level_Utility(root);<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-9334">
        <div id="dsq-comment-header-9334" class="dsq-comment-header">
            <cite id="dsq-cite-9334">
                <span id="dsq-author-user-9334">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9334" class="dsq-comment-body">
            <div id="dsq-comment-message-9334" class="dsq-comment-message"><p>seems it will not let me paste the complete code&#8230;&#8230;&#8230;</p>
<p>i will paste the missing code</p>
<p>{<br />
        connect_nodes_at_same_level(root,0,i,&amp;prev);//keep printing elements at a particular level from the root<br />
         prev= NULL;</p>
<p>    }</p>
<p>}</p>
<p>void connect_nodes_at_same_level(struct node* root, int n , int k, struct node** prev)<br />
{</p>
<p>    if(root != NULL)<br />
    {</p>
<p>      connect_nodes_at_same_level(root-&gt;right,n+1,k,prev);</p>
<p>         if( n== k)<br />
        {<br />
            root-&gt;next= *prev;<br />
            *prev= root;<br />
        }</p>
<p>       connect_nodes_at_same_level(root-&gt;left,n+1,k,prev);</p>
<p>      }</p>
<p>     else<br />
    return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9331">
        <div id="dsq-comment-header-9331" class="dsq-comment-header">
            <cite id="dsq-cite-9331">
                <span id="dsq-author-user-9331">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9331" class="dsq-comment-body">
            <div id="dsq-comment-message-9331" class="dsq-comment-message"><p>Perform a reverse order BFS and connect the previously visited nodes with the present visited nodes</p>
<p>/*&#8212;&#8211;connect nodes at same level&#8212;&#8212;-*/<br />
void connect_nodes_at_same_level_Utility(struct node* root)<br />
{</p>
<p>    int num;<br />
    num= height(root);<br />
    struct node* prev= NULL;<br />
    int i;<br />
    if(root == NULL)<br />
    return;<br />
    //printf(&#8220;%d\n&#8221;,root-&gt;data);//print root data before moving further to any level<br />
    if(root-&gt;left == NULL &amp;&amp; root-&gt;right== NULL)<br />
    return;<br />
    root-&gt;next= NULL;<br />
    for(i=1; iright,n+1,k,prev);</p>
<p>         if( n== k)<br />
        {<br />
            root-&gt;next= *prev;<br />
            *prev= root;<br />
        }</p>
<p>       connect_nodes_at_same_level(root-&gt;left,n+1,k,prev);</p>
<p>      }</p>
<p>     else<br />
    return 0;</p>
<p>}<br />
/*&#8212;&#8211;connect nodes at same level&#8212;&#8212;-*/</p>
<p>void main()<br />
{<br />
connect_nodes_at_same_level_Utility(root);<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-9332">
        <div id="dsq-comment-header-9332" class="dsq-comment-header">
            <cite id="dsq-cite-9332">
                <span id="dsq-author-user-9332">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9332" class="dsq-comment-body">
            <div id="dsq-comment-message-9332" class="dsq-comment-message"><p>i will re paste the code&#8230;.<br />
it is incomplete</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9330">
        <div id="dsq-comment-header-9330" class="dsq-comment-header">
            <cite id="dsq-cite-9330">
                <span id="dsq-author-user-9330">hemant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9330" class="dsq-comment-body">
            <div id="dsq-comment-message-9330" class="dsq-comment-message"><p>Perform a reverse order BFS and keep connecting the previously visited nodes at a particular level to the present visited.<br />
Here is the code for the same:</p>
<p>/*&#8212;&#8211;connect nodes at same level&#8212;&#8212;-*/<br />
void connect_nodes_at_same_level_Utility(struct node* root)<br />
{</p>
<p>    int num;<br />
    num= height(root);<br />
    struct node* prev= NULL;<br />
    int i;<br />
    if(root == NULL)<br />
    return;<br />
    //printf(&#8220;%d\n&#8221;,root-&gt;data);//print root data before moving further to any level<br />
    if(root-&gt;left == NULL &amp;&amp; root-&gt;right== NULL)<br />
    return;<br />
    root-&gt;next= NULL;<br />
    for(i=1; iright,n+1,k,prev);</p>
<p>         if( n== k)<br />
        {<br />
            root-&gt;next= *prev;<br />
            *prev= root;<br />
        }</p>
<p>       connect_nodes_at_same_level(root-&gt;left,n+1,k,prev);</p>
<p>      }</p>
<p>     else<br />
    return 0;</p>
<p>}<br />
/*&#8212;&#8211;connect nodes at same level&#8212;&#8212;-*/</p>
<p>void main()<br />
{<br />
connect_nodes_at_same_level_Utility(root);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8457">
        <div id="dsq-comment-header-8457" class="dsq-comment-header">
            <cite id="dsq-cite-8457">
                <span id="dsq-author-user-8457">SK</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8457" class="dsq-comment-body">
            <div id="dsq-comment-message-8457" class="dsq-comment-message"><p>The logic is to BFS while inserting a delimeter (NULL) into the queue of node pointers while chaning levels.</p>
<p>The code follows :</p>
<p>f(Node * T)<br />
{<br />
  if (!T) return;<br />
  enqueue(T);<br />
  enqueue(NULL);</p>
<p>  /* BFS commences &#8230; */</p>
<p>  Node *last = NULL;<br />
  while (queue_is_not_empty()) {<br />
    Node *p = dequeue();<br />
    if (last) last-&gt;next = p;<br />
    if (p) {<br />
      enqueue(p-&gt;left);<br />
      enqueue(p-&gt;right);<br />
    }<br />
    else {<br />
      enqueue(NULL);<br />
    }<br />
    last = p;<br />
  }<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8456">
        <div id="dsq-comment-header-8456" class="dsq-comment-header">
            <cite id="dsq-cite-8456">
                <span id="dsq-author-user-8456">SK</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8456" class="dsq-comment-body">
            <div id="dsq-comment-message-8456" class="dsq-comment-message"><p>Here&#8217;s an alternative I figured, which pushes a NULL into the queue when we are changing level. Rest is the BFS algorithm. Let me know if there are any errors in the logic.</p>
<pre> <code language="C">
f(Node * T)
{
  if (!T) return;
  enqueue(T);
  enqueue(NULL);

  Node* last = NULL;
  while (!queue.empty()) {
    Node *p = dequeue();
    if (last) last-&gt;next = p;
    if (p) {
      enqueue(T-&gt;left);
      enqueue(T-&gt;right);
    }
    else {
      enqueue(NULL);
    }
    last = p;
  }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-psychocoder even thread-even depth-1" id="dsq-comment-7412">
        <div id="dsq-comment-header-7412" class="dsq-comment-header">
            <cite id="dsq-cite-7412">
                <span id="dsq-author-user-7412">PsychoCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7412" class="dsq-comment-body">
            <div id="dsq-comment-message-7412" class="dsq-comment-message"><p>BFS Implementation.</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;limits.h&gt;

typedef struct node {
  int data ;
  struct node *left ;
  struct node *right ;
  struct node* nextRight;
}node;

typedef struct list {
  node *data ;
  struct list *next;
}list;

typedef struct queue {
  int count ;
  struct list *front ;
  struct list *rear;
}queue ;

void createQueue (queue **head) {
  *head = (queue *) malloc (sizeof(queue)) ;
  (*head)-&gt;count = 0 ;
  (*head)-&gt;front = NULL ;
  (*head)-&gt;rear = NULL ;
}

list* newList (node* data) {
  list *head ;
  head = (list *) malloc (sizeof(list)) ;
  head-&gt;next = NULL ;
  head-&gt;data = data ;
  return head ;
}

queue* enqueue (queue *head, node* data) {
  list *temp = newList (data) ;
  if (head-&gt;front == NULL) {
    head-&gt;front = temp ;
    head-&gt;rear = temp ;
    head-&gt;count ++ ;
  }
  else {
    head-&gt;rear-&gt;next = temp ;
    head-&gt;rear = head-&gt;rear-&gt;next ;
    head-&gt;count ++ ;
  }
  return head;
}

list* dequeue (queue **head) {
  list *temp ;
  if ((*head)-&gt;count == 0)
    return NULL ;
  if ((*head)-&gt;front != NULL) {
    temp = (*head)-&gt;front ;
    if ( (*head)-&gt;front == (*head)-&gt;rear ) {
      (*head)-&gt;front = NULL ;
      (*head)-&gt;rear = NULL ;
      (*head)-&gt;count -- ;
    }
    else 
      (*head)-&gt;front = (*head)-&gt;front-&gt;next ;
      (*head)-&gt;count -- ;
  } 
  return temp ;
}

int isEmpty (queue *q) {
  return (q-&gt;count == 0);
}

node* newnode (int data) {
  node *head ;
  head = (node *) malloc (sizeof(node)) ;
  head-&gt;data = data ;
  head-&gt;left = NULL ;
  head-&gt;right = NULL ;
  head-&gt;nextRight = NULL ;
  return head ;
}

void printLevelBFS (node *tree) {
  queue *q ;
  list *temp ;
  node *prev = NULL, *cur = NULL;

  /* Initialize the queue */
  createQueue (&amp;q) ;

  enqueue (q,tree) ;
  /* Use INT_MAX as delimiter */
  enqueue (q,newnode(INT_MAX)) ;

  while ( !isEmpty (q) ) {
    temp = dequeue (&amp;q) ;
  
    /* Check whether it is a delimiter or not */
    if ( temp-&gt;data-&gt;data != INT_MAX ) {
      /* If not then extreme right of this level
         is not reached till now. Enqueue its
         child */
      printf ( &quot;%d &quot;, temp-&gt;data-&gt;data ) ;
      prev = cur ;
      cur = temp-&gt;data ;

      if ( prev )
        prev-&gt;nextRight = cur ;

      if (temp-&gt;data-&gt;left)
        q = enqueue (q, temp-&gt;data-&gt;left) ;

      if (temp-&gt;data-&gt;right)
        q = enqueue (q, temp-&gt;data-&gt;right) ;
    } else {
      printf ( &quot;\n&quot; ) ;
      /* If a delimiter is reached, then set the 
         delimiter of the next level. Because 
         extreme right is reached for this level */
      if ( !isEmpty(q) ) {
        prev = cur ;
        prev-&gt;nextRight = NULL ;
        prev = NULL ;
        cur = NULL ;
        enqueue (q,newnode(INT_MAX)) ;
      }
    }
  }

  while (!isEmpty (q))
    dequeue (&amp;q) ;
  free (q) ;
}

int main() {

  node *root 	    = newnode(10);
  root-&gt;left        = newnode(8);
  root-&gt;right       = newnode(2);
  root-&gt;left-&gt;left  = newnode(3);
  root-&gt;right-&gt;left = newnode(6) ;
  root-&gt;right-&gt;right = newnode(7) ;

  connectLevelBFS (root ) ;
  free (root);
  return 1 ;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-psychocoder odd alt depth-2" id="dsq-comment-7414">
        <div id="dsq-comment-header-7414" class="dsq-comment-header">
            <cite id="dsq-cite-7414">
                <span id="dsq-author-user-7414">PsychoCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7414" class="dsq-comment-body">
            <div id="dsq-comment-message-7414" class="dsq-comment-message"><p>Sorry Here also I have done a same mistake  !!!</p>
<pre> <code language="C">
list* dequeue (queue **head) {
  list *temp ;
  if ((*head)-&gt;count == 0)
    return NULL ;
  if ((*head)-&gt;front != NULL) {
    temp = (*head)-&gt;front ;
    if ( (*head)-&gt;front == (*head)-&gt;rear ) {
      (*head)-&gt;front = NULL ;
      (*head)-&gt;rear = NULL ;
      (*head)-&gt;count -- ;
    }
    else{
      (*head)-&gt;front = (*head)-&gt;front-&gt;next ;
      (*head)-&gt;count -- ;
    }
  }
  return temp ;
}</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-psychocoder even depth-3" id="dsq-comment-7416">
        <div id="dsq-comment-header-7416" class="dsq-comment-header">
            <cite id="dsq-cite-7416">
                <span id="dsq-author-user-7416">PsychoCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7416" class="dsq-comment-body">
            <div id="dsq-comment-message-7416" class="dsq-comment-message"><p>Another mistake function name : This code actually Last tym I forget to modify it:</p>
<p>Function name should be connectLevelBFS instead of printLevelBFS</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-psychocoder odd alt depth-2" id="dsq-comment-7415">
        <div id="dsq-comment-header-7415" class="dsq-comment-header">
            <cite id="dsq-cite-7415">
                <span id="dsq-author-user-7415">PsychoCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7415" class="dsq-comment-body">
            <div id="dsq-comment-message-7415" class="dsq-comment-message"><p>Another mistake function name : This code actually Last tym I forget to modify it:</p>
<p>Function name should be &#8220;connectLevelBFS&#8221; instead of &#8220;printLevelBFS&#8221;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7148">
        <div id="dsq-comment-header-7148" class="dsq-comment-header">
            <cite id="dsq-cite-7148">
                <span id="dsq-author-user-7148">nitin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7148" class="dsq-comment-body">
            <div id="dsq-comment-message-7148" class="dsq-comment-message"><p>struct node<br />
{<br />
int data;<br />
struct node *left ;<br />
struct node *right;<br />
struct node *nextRight;<br />
};</p>
<p>sir can you plss explain me the meaning of line 3 or 4. how does does this work in computer memory&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7140">
        <div id="dsq-comment-header-7140" class="dsq-comment-header">
            <cite id="dsq-cite-7140">
                <span id="dsq-author-user-7140">Karthick</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7140" class="dsq-comment-body">
            <div id="dsq-comment-message-7140" class="dsq-comment-message"><p>In method-2, the post says that we do a post-order traversal. But, the code actually visits the root, then the left child and then the right child. So, I think it is pre-order traversal. Am I right?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7141">
        <div id="dsq-comment-header-7141" class="dsq-comment-header">
            <cite id="dsq-cite-7141">
                <span id="dsq-author-user-7141">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7141" class="dsq-comment-body">
            <div id="dsq-comment-message-7141" class="dsq-comment-message"><p>@Karthick:  Thanks for pointing this out.  We have updated the post.  Keep it up!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7062">
        <div id="dsq-comment-header-7062" class="dsq-comment-header">
            <cite id="dsq-cite-7062">
                <span id="dsq-author-user-7062">sidh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7062" class="dsq-comment-body">
            <div id="dsq-comment-message-7062" class="dsq-comment-message"><p>Can we do it without using any extra space, this has been asked in MS interview</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7064">
        <div id="dsq-comment-header-7064" class="dsq-comment-header">
            <cite id="dsq-cite-7064">
                <span id="dsq-author-user-7064">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7064" class="dsq-comment-body">
            <div id="dsq-comment-message-7064" class="dsq-comment-message"><p>@sidh:  It can be done with O(1) extra memory.  We will soon be publishing another post on this.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-7066">
        <div id="dsq-comment-header-7066" class="dsq-comment-header">
            <cite id="dsq-cite-7066">
                <span id="dsq-author-user-7066">ashwani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7066" class="dsq-comment-body">
            <div id="dsq-comment-message-7066" class="dsq-comment-message"><p>I can think of a O(1) space solution but will require O(nlogn) time for a balanced tree. Can you we do it it O(1) space and O(n) time?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-7058">
        <div id="dsq-comment-header-7058" class="dsq-comment-header">
            <cite id="dsq-cite-7058">
                <span id="dsq-author-user-7058">Dheeraj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7058" class="dsq-comment-body">
            <div id="dsq-comment-message-7058" class="dsq-comment-message"><p>i think this post order code will work the above mentioned tree</p>
<p>void connectNode(node *p)<br />
{<br />
   if(p!=NULL)<br />
   {<br />
    p-&gt;nextRight=NULL;<br />
    connectNode(p-&gt;left);<br />
    connectNode(p-&gt;right);</p>
<p>    if(p-&gt;left!=NULL &amp;&amp; p-&gt;right!=NULL)<br />
    p-&gt;left-&gt;nextRight=p-&gt;right;<br />
    }<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-7059">
        <div id="dsq-comment-header-7059" class="dsq-comment-header">
            <cite id="dsq-cite-7059">
                <span id="dsq-author-user-7059">Rahul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7059" class="dsq-comment-body">
            <div id="dsq-comment-message-7059" class="dsq-comment-message"><p>no it wnt wrk as well</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7056">
        <div id="dsq-comment-header-7056" class="dsq-comment-header">
            <cite id="dsq-cite-7056">
                <span id="dsq-author-user-7056">vipul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7056" class="dsq-comment-body">
            <div id="dsq-comment-message-7056" class="dsq-comment-message"><p>Awesome! </p>
<p>what is the time complexity of method 1?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-7057">
        <div id="dsq-comment-header-7057" class="dsq-comment-header">
            <cite id="dsq-cite-7057">
                <span id="dsq-author-user-7057">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7057" class="dsq-comment-body">
            <div id="dsq-comment-message-7057" class="dsq-comment-message"><p>@vipul:  Time complexity of method is also O(n).  We have updated the same in post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/connect-nodes-at-same-level/';
var disqus_identifier = '8631 http://geeksforgeeks.org/?p=8631';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Connect nodes at same level";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.216 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:29:51 -->

<!-- Compression = gzip -->
<!-- super cache -->