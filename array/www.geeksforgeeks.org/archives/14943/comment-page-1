<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Dynamic Programming | Set 6 (Min Cost Path) - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Dynamic Programming | Set 6 (Min Cost Path) - GeeksforGeeks" />
<meta property="og:description" content="Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to reach (m, n) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. Total cost of a path to reach (m, n) is sum of all &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Dynamic Programming" />
<meta property="article:section" content="Misc" />
<meta property="article:published_time" content="2011-10-30T19:50:17+00:00" />
<meta property="article:modified_time" content="2011-10-31T21:42:21+00:00" />
<meta property="og:updated_time" content="2011-10-31T21:42:21+00:00" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/dp.png" />
<meta property="og:image" content="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/dp2.png" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.493 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110945 1.186.162.116';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Dynamic Programming | Set 6 (Min Cost Path)</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to reach (m, n) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. <span id="more-14943"></span>Total cost of a path to reach (m, n) is sum of all the costs on that path (including both source and destination). You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed. You may assume that all costs are positive integers.</p>
<p>For example, in the following figure, what is the minimum cost path to (2, 2)?<br />
<a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/dp.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/dp.png" alt="" title="dp" width="179" height="162" class="aligncenter size-full wp-image-14954" /></a></p>
<p>The path with minimum cost is highlighted in the following figure. The path is (0, 0) &#8211;> (0, 1) &#8211;> (1, 2) &#8211;> (2, 2). The cost of the path is 8 (1 + 2 + 2 + 3).<br />
<a href="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/dp2.png"><img src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/dp2.png" alt="" title="dp2" width="179" height="162" class="aligncenter size-full wp-image-14955" /></a></p>
<p><strong>1) Optimal Substructure</strong><br />
The path to reach (m, n) must be through one of the 3 cells:  (m-1, n-1) or (m-1, n) or (m, n-1). So minimum cost to reach (m, n) can be written as &#8220;minimum of the 3 cells plus cost[m][n]&#8221;.</p>
<p>minCost(m, n) = min (minCost(m-1, n-1), minCost(m-1, n), minCost(m, n-1)) + cost[m][n]</p>
<p><strong>2) Overlapping Subproblems</strong><br />
Following is simple recursive implementation of the MCP (Minimum Cost Path) problem. The implementation simply follows the recursive structure mentioned above.</p>
<pre class="brush: cpp; highlight: [9,10,11,12,13,14,15,16,17,18,19,20]; title: ; notranslate" title="">
/* A Naive recursive implementation of MCP(Minimum Cost Path) problem */
#include&lt;stdio.h&gt;
#include&lt;limits.h&gt;
#define R 3
#define C 3

int min(int x, int y, int z);

/* Returns cost of minimum cost path from (0,0) to (m, n) in mat[R][C]*/
int minCost(int cost[R][C], int m, int n)
{
   if (n &lt; 0 || m &lt; 0)
      return INT_MAX;
   else if (m == 0 &amp;&amp; n == 0)
      return cost[m][n];
   else
      return cost[m][n] + min( minCost(cost, m-1, n-1),
                               minCost(cost, m-1, n), 
                               minCost(cost, m, n-1) );
}

/* A utility function that returns minimum of 3 integers */
int min(int x, int y, int z)
{
   if (x &lt; y)
      return (x &lt; z)? x : z;
   else
      return (y &lt; z)? y : z;
}

/* Driver program to test above functions */
int main()
{
   int cost[R][C] = { {1, 2, 3},
                      {4, 8, 2},
                      {1, 5, 3} };
   printf(&quot; %d &quot;, minCost(cost, 2, 2));
   return 0;
}
</pre>
<p>It should be noted that the above function computes the same subproblems again and again. See the following recursion tree, there are many nodes which apear more than once.  Time complexity of this naive recursive solution is exponential and it is terribly slow. </p>
<pre>
mC refers to minCost()
                                    mC(2, 2)
                          /            |           \
                         /             |            \             
                 mC(1, 1)           mC(1, 2)             mC(2, 1)
              /     |     \       /     |     \           /     |     \ 
             /      |      \     /      |      \         /      |       \
       mC(0,0) mC(0,1) mC(1,0) mC(0,1) mC(0,2) mC(1,1) mC(1,0) mC(1,1) mC(2,0) 
</pre>
<p>So the MCP problem has both properties (see <a href="http://www.geeksforgeeks.org/archives/12635">this </a>and <a href="http://www.geeksforgeeks.org/archives/12819">this</a>) of a dynamic programming problem. Like other typical <a href="http://www.geeksforgeeks.org/archives/tag/dynamic-programming">Dynamic Programming(DP) problems</a>, recomputations of same subproblems can be avoided by constructing a temporary array tc[][] in bottom up manner.</p>
<pre class="brush: cpp; highlight: [9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]; title: ; notranslate" title="">
/* Dynamic Programming implementation of MCP problem */
#include&lt;stdio.h&gt;
#include&lt;limits.h&gt;
#define R 3
#define C 3

int min(int x, int y, int z);

int minCost(int cost[R][C], int m, int n)
{
     int i, j;

     // Instead of following line, we can use int tc[m+1][n+1] or 
     // dynamically allocate memoery to save space. The following line is
     // used to keep te program simple and make it working on all compilers.
     int tc[R][C];  

     tc[0][0] = cost[0][0];

     /* Initialize first column of total cost(tc) array */
     for (i = 1; i &lt;= m; i++)
        tc[i][0] = tc[i-1][0] + cost[i][0];

     /* Initialize first row of tc array */
     for (j = 1; j &lt;= n; j++)
        tc[0][j] = tc[0][j-1] + cost[0][j];

     /* Construct rest of the tc array */
     for (i = 1; i &lt;= m; i++)
        for (j = 1; j &lt;= n; j++)
            tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j];

     return tc[m][n];
}

/* A utility function that returns minimum of 3 integers */
int min(int x, int y, int z)
{
   if (x &lt; y)
      return (x &lt; z)? x : z;
   else
      return (y &lt; z)? y : z;
}

/* Driver program to test above functions */
int main()
{
   int cost[R][C] = { {1, 2, 3},
                      {4, 8, 2},
                      {1, 5, 3} };
   printf(&quot; %d &quot;, minCost(cost, 2, 2));
   return 0;
}
</pre>
<p>Time Complexity of the DP implementation is O(mn) which is much better than Naive Recursive implementation.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/job-sequencing-problem-set-1-greedy-algorithm/" title="Job Sequencing Problem | Set 1 (Greedy Algorithm)">Job Sequencing Problem | Set 1 (Greedy Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/multiply-two-polynomials-2/" title="Multiply two polynomials">Multiply two polynomials</a></li><li><a href="http://www.geeksforgeeks.org/algorithm-practice-question-beginners-set-1/" title="Algorithm Practice Question for Beginners | Set 1">Algorithm Practice Question for Beginners | Set 1</a></li><li><a href="http://www.geeksforgeeks.org/count-distinct-non-negative-pairs-x-y-satisfy-inequality-xx-yy-n-2/" title="Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y &lt; n">Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n</a></li><li><a href="http://www.geeksforgeeks.org/binomial-heap-2/" title="Binomial Heap">Binomial Heap</a></li><li><a href="http://www.geeksforgeeks.org/print-increasing-sequences-length-k-first-n-natural-numbers/" title="Print all increasing sequences of length k from first n natural numbers">Print all increasing sequences of length k from first n natural numbers</a></li><li><a href="http://www.geeksforgeeks.org/find-nth-number-number-system-3-4/" title="Find n&#8217;th number in a number system with only 3 and 4">Find n&#8217;th number in a number system with only 3 and 4</a></li><li><a href="http://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/" title="Minimum Cost Polygon Triangulation">Minimum Cost Polygon Triangulation</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/" rel="tag">Dynamic Programming</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fdynamic-programming-set-6-min-cost-path%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/" data-text="Dynamic Programming | Set 6 (Min Cost Path)" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-33295">
        <div id="dsq-comment-header-33295" class="dsq-comment-header">
            <cite id="dsq-cite-33295">
                <span id="dsq-author-user-33295">Swarup Mallick</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33295" class="dsq-comment-body">
            <div id="dsq-comment-message-33295" class="dsq-comment-message"><p>Here in the naive approach there is a condition like</p>
<p>else if (m == 0 &amp;&amp; n == 0)<br />
      return cost[m][n];</p>
<p>It should be the sum of that row or column.</p>
<p>If I will enter only one row or one column then the mentioned code will return the last element which is wrong.</p>
<p>Please correct me if I am wrong ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31571">
        <div id="dsq-comment-header-31571" class="dsq-comment-header">
            <cite id="dsq-cite-31571">
                <span id="dsq-author-user-31571">dmr</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31571" class="dsq-comment-body">
            <div id="dsq-comment-message-31571" class="dsq-comment-message"><p>If we were allowed to traverse in all possible directions rather than the three allowed here, could we have still used DP ? Personally I think we can as still we would have optimal and overlapping subproblems.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-32907">
        <div id="dsq-comment-header-32907" class="dsq-comment-header">
            <cite id="dsq-cite-32907">
                <span id="dsq-author-user-32907">Paparao Veeragandham</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32907" class="dsq-comment-body">
            <div id="dsq-comment-message-32907" class="dsq-comment-message"><p>DP method does not work If you are allowed to Traverse all possible paths . Because it will be Infinity loop. All DP  problems will be map to Short path from source to Dest. In above case  it was not possible.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-30663">
        <div id="dsq-comment-header-30663" class="dsq-comment-header">
            <cite id="dsq-cite-30663">
                <span id="dsq-author-user-30663">prashant jha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30663" class="dsq-comment-body">
            <div id="dsq-comment-message-30663" class="dsq-comment-message"><p>/*</p>
<p>#include<br />
#define n 4<br />
#define infinity 999999<br />
using namespace std;<br />
int min(int a,int b)<br />
{<br />
    return (a&gt;b)?b:a;<br />
}<br />
int min(int a,int b,int c)<br />
{<br />
    return min(min(a,b),c);<br />
}<br />
int fun(int a[n][n],int b[n][n],int s1,int s2,int v1,int v2)<br />
{<br />
    if((s1==v1)&amp;&amp;(s2==v2))<br />
         return a[s1][s2];<br />
    if((s1&gt;=n)||(s2&gt;=n))<br />
        return infinity;<br />
    if(b[s1][s2]!=-1)<br />
        return b[s1][s2];<br />
    b[s1][s2]=(a[s1][s2]+min(fun(a,b,s1+1,s2,v1,v2),fun(a,b,s1,s2+1,v1,v2),fun(a,b,s1+1,s2+1,v1,v2)));<br />
    return b[s1][s2];<br />
}<br />
int main()<br />
{<br />
    int a[n][n]={{1,2,4,5},<br />
                 {4,8,2,6},<br />
                 {1,5,3,9},<br />
                 {2,7,3,4}};<br />
    int b[n][n];<br />
    for(int i=0;i&lt;n;i++)<br />
    {<br />
        for(int j=0;j&lt;n;j++)<br />
        {<br />
            b[i][j]=-1;<br />
        }<br />
    }<br />
    int v1,v2;<br />
    cout&lt;&gt;v1&gt;&gt;v2;<br />
    cout&lt;&lt;fun(a,b,0,0,v1,v2);<br />
    return 0;<br />
}<br />
*/</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-30459">
        <div id="dsq-comment-header-30459" class="dsq-comment-header">
            <cite id="dsq-cite-30459">
                <span id="dsq-author-user-30459">Tanmay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30459" class="dsq-comment-body">
            <div id="dsq-comment-message-30459" class="dsq-comment-message"><p>@9d60a411da580c8d7ce405a354164530:disqus: your memoization will not work becoz &#8230; look carefully dp[0,0] will store the shortest route to (2,2).. but we would want dp(2,2) to do that.. try running your code and print dp array</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-30102">
        <div id="dsq-comment-header-30102" class="dsq-comment-header">
            <cite id="dsq-cite-30102">
                <span id="dsq-author-user-30102">Animesh Pratap Singh Sikarwar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30102" class="dsq-comment-body">
            <div id="dsq-comment-message-30102" class="dsq-comment-message"><p>I dont find it correct&#8230;. as we copy the 0th row and 0th column, straight away..!!</p>
<p>what if matrix is&#8230;<br />
4 4 4<br />
5 1 1<br />
3 1 1</p>
<p>your t[][] will look like this<br />
4 8 12<br />
9 x  x<br />
12 x x</p>
<p>so this algo will give wrong cost if destination d(m,n) liea in 0th row or 0thcolumn.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30233">
        <div id="dsq-comment-header-30233" class="dsq-comment-header">
            <cite id="dsq-cite-30233">
                <span id="dsq-author-user-30233">giri</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30233" class="dsq-comment-body">
            <div id="dsq-comment-message-30233" class="dsq-comment-message"><p>the code is perfectly fine. check your algo again.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-30862">
        <div id="dsq-comment-header-30862" class="dsq-comment-header">
            <cite id="dsq-cite-30862">
                <span id="dsq-author-user-30862">Mojo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30862" class="dsq-comment-body">
            <div id="dsq-comment-message-30862" class="dsq-comment-message"><p>I think what you are not taking into account is the fact that you are not allowed to move left or upwards. If you want to know the cost[2][0] the answer is and should be 12 and not 8 which you can get if you were allowed to move 4-&gt;1-&gt;3.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-30956">
        <div id="dsq-comment-header-30956" class="dsq-comment-header">
            <cite id="dsq-cite-30956">
                <span id="dsq-author-user-30956">Animesh Pratap Singh Sikarwar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30956" class="dsq-comment-body">
            <div id="dsq-comment-message-30956" class="dsq-comment-message"><p>ohh yes&#8230;.!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29973">
        <div id="dsq-comment-header-29973" class="dsq-comment-header">
            <cite id="dsq-cite-29973">
                <span id="dsq-author-user-29973">pavansrinivas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29973" class="dsq-comment-body">
            <div id="dsq-comment-message-29973" class="dsq-comment-message"><p>I think this can also be solved using greedy technique&#8230;&#8230;.<br />
Correct me if I am wrong..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-29563">
        <div id="dsq-comment-header-29563" class="dsq-comment-header">
            <cite id="dsq-cite-29563">
                <span id="dsq-author-user-29563">Tulsi das khan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29563" class="dsq-comment-body">
            <div id="dsq-comment-message-29563" class="dsq-comment-message"><p><code></p>
<p>#include<br />
#include<br />
#include<br />
using namespace std;</p>
<p>int cost[100][100];<br />
int m, n;<br />
int dp[100][100];<br />
int minSumPath(int i, int j)<br />
{<br />
    if(dp[i][j] != -1)<br />
        return dp[i][j];</p>
<p>    if(i==  m-1 &amp;&amp; j == n-1)<br />
    {<br />
        dp[i][j] = cost[i][j];<br />
        return cost[i][j];<br />
    }</p>
<p>    if(i&gt;=m || j &gt;=n)<br />
        return INT_MAX;</p>
<p>    dp[i][j] = (cost[i][j] + min( minSumPath(i+1, j), min(minSumPath(i, j+1), minSumPath(i+1, j+1))));<br />
    return dp[i][j];</p>
<p>}</p>
<p>int main()<br />
{<br />
    memset(dp, -1, sizeof(dp));<br />
    cout&lt;&lt;&quot;Enter rows and columns: &quot;&lt;&gt;m&gt;&gt;n;</p>
<p>    cout&lt;&lt;&quot;Enter matrix: &quot;&lt;&lt;endl;</p>
<p>    for(int i=0; i&lt;m; i++)<br />
    {<br />
        for(int j=0; j&gt;cost[i][j];<br />
    }</p>
<p>    cout&lt;&lt;&quot;Min cost is: &quot;&lt;&lt;minSumPath(0, 0);</p>
<p>}</p>
<p></code></p>
<p>This is dp solution using memoization technique</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28232">
        <div id="dsq-comment-header-28232" class="dsq-comment-header">
            <cite id="dsq-cite-28232">
                <span id="dsq-author-user-28232">shdas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28232" class="dsq-comment-body">
            <div id="dsq-comment-message-28232" class="dsq-comment-message"><p>Is this a DP soln??</p>
<p>#include </p>
<p>#include </p>
<p>int **dist;</p>
<p>int min(int a, int b, int c){</p>
<p>    if(a&lt;b)</p>
<p>        return (a&lt;c)?a:c;</p>
<p>    else</p>
<p>        return (b0)</p>
<p>        val = cost(mat,row,col,r,c-1)+mat[r];</p>
<p>    else if(r&gt;0 &amp;&amp; c==0)</p>
<p>        val = cost(mat,row,col,r-1,c)+mat[r];</p>
<p>    else if(r==0 &amp;&amp; c==0)</p>
<p>        val = mat[r];</p>
<p>    else</p>
<p>        val = min(cost(mat,row,col,r-1,c), cost(mat,row,col,r,c-1), cost(mat,row,col,r-1,c-1))+mat[r];</p>
<p>   if(dist[r]==-1)</p>
<p>        dist[r] = val;</p>
<p>    printf(&#8220;nCost (%d,%d) calculated&#8221;, r, c);</p>
<p>    return val;</p>
<p>}</p>
<p>int main(){</p>
<p>    int row, col, i, j, r, c, minCost;</p>
<p>    printf(&#8220;Row &amp; column:&#8221;);</p>
<p>    scanf(&#8220;%d %d&#8221;, &amp;row, &amp;col);</p>
<p>    int **mat;</p>
<p>    mat = (int**)malloc(row*sizeof(int*));</p>
<p>    for(i=0;i&lt;row;i++)</p>
<p>        mat[i]=(int*)malloc(col*sizeof(int));</p>
<p>    printf(&quot;nCost values:&quot;);</p>
<p>    for(i=0;i&lt;row;i++)</p>
<p>        for(j=0;j&lt;col;j++)</p>
<p>            scanf(&quot;%d&quot;, &amp;mat[i][j]);</p>
<p>    printf(&quot;nDestination cell:&quot;);</p>
<p>    scanf(&quot;%d %d&quot;, &amp;r, &amp;c);</p>
<p>    dist = (int**)malloc(row*sizeof(int*));</p>
<p>    for(i=0;i&lt;row;i++)</p>
<p>        dist[i]=(int*)malloc(col*sizeof(int));</p>
<p>    for(i=0;i&lt;row;i++)</p>
<p>        for(j=0;j&lt;col;j++)</p>
<p>            dist[i][j]=-1;</p>
<p>    dist[0][0]=mat[0][0];</p>
<p>    minCost = cost(mat, row, col, r, c);</p>
<p>    printf(&quot;nMin cost: %d&quot;, minCost);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-28097">
        <div id="dsq-comment-header-28097" class="dsq-comment-header">
            <cite id="dsq-cite-28097">
                <span id="dsq-author-user-28097">udit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28097" class="dsq-comment-body">
            <div id="dsq-comment-message-28097" class="dsq-comment-message"><p>java solution:</p>
<p>public class Min_Cost_Path {<br />
    static int min(int x,int y,int z)<br />
    {<br />
        if(x&lt;y)<br />
            return (x&lt;z)?x:z;<br />
        else<br />
            return (y&lt;z)?y:z;<br />
    }<br />
    static int mincost(int cost[][],int m,int n)<br />
    {<br />
        int i,j;<br />
        int tc[][]=new int[m+1][n+1];<br />
        tc[0][0]=cost[0][0];<br />
        //initailizsing first column<br />
        for(i=1;i&lt;=m;i++)<br />
            tc[i][0]=tc[i-1][0]+cost[i][0];<br />
        //insitainzg first row<br />
        for(j=1;j&lt;=n;j++)<br />
            tc[0][j]=tc[0][j-1]+cost[0][j];<br />
        //filling all other<br />
        for(i=1;i&lt;=m;i++)<br />
        {<br />
            for(j=1;j&lt;=n;j++)<br />
            {<br />
                    tc[i][j]=min(tc[i-1][j-1],tc[i][j-1],tc[i-1][j])+cost[i][j];<br />
            }<br />
       }<br />
        return tc[m][n];<br />
    }<br />
    public static void main(String[] args) {</p>
<p>        int cost[][]={{1,2,3},{4,8,2},{1,5,3}};<br />
        System.out.println(mincost(cost,1,1));</p>
<p>    }<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27666">
        <div id="dsq-comment-header-27666" class="dsq-comment-header">
            <cite id="dsq-cite-27666">
                <span id="dsq-author-user-27666">Guduru Siva Reddy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27666" class="dsq-comment-body">
            <div id="dsq-comment-message-27666" class="dsq-comment-message"><p>Java Solution :::</p>
<p>public class MinCost {</p>
<p>    public static int min(int a,int b){<br />
        if(a&gt;b) return b;<br />
        else return a;<br />
    }<br />
    public static int mincost(int [][]a){<br />
        int l=a.length;<br />
        int min=0;</p>
<p>    int b[][]=new int[l][l];</p>
<p>    for(int i=0;i&lt;l;i++){<br />
        for(int j=0;j0&amp;&amp;j&gt;0){<br />
            min=min(b[i-1][j-1],b[i][j-1]);<br />
            min=min(min, b[i-1][j]);<br />
            b[i][j]=min+a[i][j];<br />
            }</p>
<p>        }<br />
    }<br />
    return b[l-1][l-1];<br />
    }<br />
    public static void main(String[] args) {<br />
        int [][]a={{1,2,3},{4,8,2},{1,5,3}};<br />
        System.out.println(mincost(a));</p>
<p>    }</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-nahar-abhishek9 even thread-even depth-1" id="dsq-comment-26855">
        <div id="dsq-comment-header-26855" class="dsq-comment-header">
            <cite id="dsq-cite-26855">
                <span id="dsq-author-user-26855">nahar.abhishek9</span>
            </cite>
        </div>
        <div id="dsq-comment-body-26855" class="dsq-comment-body">
            <div id="dsq-comment-message-26855" class="dsq-comment-message"><p>Can you provide a solution if we can travel diagonally upwards as well.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-mani-deepak odd alt thread-odd thread-alt depth-1" id="dsq-comment-21391">
        <div id="dsq-comment-header-21391" class="dsq-comment-header">
            <cite id="dsq-cite-21391">
                <span id="dsq-author-user-21391">mani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21391" class="dsq-comment-body">
            <div id="dsq-comment-message-21391" class="dsq-comment-message"><p>here memoisation works better.correct?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-11545">
        <div id="dsq-comment-header-11545" class="dsq-comment-header">
            <cite id="dsq-cite-11545">
                <span id="dsq-author-user-11545">sandy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11545" class="dsq-comment-body">
            <div id="dsq-comment-message-11545" class="dsq-comment-message"><p>What if the array is as defined below:</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
   int cost[R][C] = { {1, 2, 3},
                      {4, 1, 2},
                      {1, 5, 3} };
</code> </pre>
<p>Then the path cost using the code below for the top row would be wrong as we have a shorter path (1,1,3) not (1,2,3)</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
     /* Initialize first row of tc array */
     for (j = 1; j &lt;= n; j++)
        tc[0][j] = tc[0][j-1] + cost[0][j];
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-12475">
        <div id="dsq-comment-header-12475" class="dsq-comment-header">
            <cite id="dsq-cite-12475">
                <span id="dsq-author-user-12475">bhuvi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12475" class="dsq-comment-body">
            <div id="dsq-comment-message-12475" class="dsq-comment-message"><p>Sandy,<br />
Read this line &#8220;You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed&#8221; . I think now initializing 1st row an d 1st col makes sense</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-15516">
        <div id="dsq-comment-header-15516" class="dsq-comment-header">
            <cite id="dsq-cite-15516">
                <span id="dsq-author-user-15516">nikhil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15516" class="dsq-comment-body">
            <div id="dsq-comment-message-15516" class="dsq-comment-message"><p>What if we can traverse diagonally upper cells..?<br />
What modification can be done in above solution to solve the problem&#8230;</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-21225">
        <div id="dsq-comment-header-21225" class="dsq-comment-header">
            <cite id="dsq-cite-21225">
                <span id="dsq-author-user-21225">Anil Kag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21225" class="dsq-comment-body">
            <div id="dsq-comment-message-21225" class="dsq-comment-message"><p>Will you really like to choose the upper diagonal while finding the min-cost path? Costs are assumed to be positive here. And you need to find path from (0,0) to (m,n), why would you like to go up diagonally?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-5" id="dsq-comment-29508">
        <div id="dsq-comment-header-29508" class="dsq-comment-header">
            <cite id="dsq-cite-29508">
                <span id="dsq-author-user-29508">sneakysnoopy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29508" class="dsq-comment-body">
            <div id="dsq-comment-message-29508" class="dsq-comment-message"><p>it will depend on the cost matrix , right ..imagine a cost matrix like this..<br />
  1 8 9 9 9  9<br />
  1 9 9 9 9 9<br />
   1 9 9 9 9 9<br />
   1 1 1 1 1 1<br />
   1 1 1 1 1 1<br />
In this , the optimal way to reach to a 9 of third row is go down and then come  up , right ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8838">
        <div id="dsq-comment-header-8838" class="dsq-comment-header">
            <cite id="dsq-cite-8838">
                <span id="dsq-author-user-8838">kunal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8838" class="dsq-comment-body">
            <div id="dsq-comment-message-8838" class="dsq-comment-message"><p>This is an straight forward application of : Maximum size square sub-matrix with all 1s .</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-22442">
        <div id="dsq-comment-header-22442" class="dsq-comment-header">
            <cite id="dsq-cite-22442">
                <span id="dsq-author-user-22442">Simple_thinking</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22442" class="dsq-comment-body">
            <div id="dsq-comment-message-22442" class="dsq-comment-message"><p>You don&#8217;t really see the Dynamic programming solution don&#8217;t you ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7715">
        <div id="dsq-comment-header-7715" class="dsq-comment-header">
            <cite id="dsq-cite-7715">
                <span id="dsq-author-user-7715">jedimaster760</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7715" class="dsq-comment-body">
            <div id="dsq-comment-message-7715" class="dsq-comment-message"><p>Provided that we have a 16&#215;16 matrix, would this algorithm work?  I was thinking of using this algorithm on 6 threads and then synchronizing them back which would yield the best path.. Am I wrong?</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7617">
        <div id="dsq-comment-header-7617" class="dsq-comment-header">
            <cite id="dsq-cite-7617">
                <span id="dsq-author-user-7617">kartikaditya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7617" class="dsq-comment-body">
            <div id="dsq-comment-message-7617" class="dsq-comment-message"><p>In the question it is mentioned &#8220;&#8230; You may assume that all costs are positive integers.&#8221;. Do we need this assumption? Don&#8217;t the method work even with negative values since we have no cycles.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6877">
        <div id="dsq-comment-header-6877" class="dsq-comment-header">
            <cite id="dsq-cite-6877">
                <span id="dsq-author-user-6877">Geek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6877" class="dsq-comment-body">
            <div id="dsq-comment-message-6877" class="dsq-comment-message"><p>How  can we print the entire path in addition to the min cost.<br />
plzz help</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6328">
        <div id="dsq-comment-header-6328" class="dsq-comment-header">
            <cite id="dsq-cite-6328">
                <span id="dsq-author-user-6328">anmol</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6328" class="dsq-comment-body">
            <div id="dsq-comment-message-6328" class="dsq-comment-message"><p>You guys rock. provide excellent free content <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> so happy to find your site, many other costly prep books out there don&#8217;t even stand for what you provide free.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-6342">
        <div id="dsq-comment-header-6342" class="dsq-comment-header">
            <cite id="dsq-cite-6342">
                <span id="dsq-author-user-6342">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6342" class="dsq-comment-body">
            <div id="dsq-comment-message-6342" class="dsq-comment-message"><p>@anmol: Thanks for the nice comments.  Keep visiting us and keep contributing.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-6318">
        <div id="dsq-comment-header-6318" class="dsq-comment-header">
            <cite id="dsq-cite-6318">
                <span id="dsq-author-user-6318">simon</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6318" class="dsq-comment-body">
            <div id="dsq-comment-message-6318" class="dsq-comment-message"><p>what if you can also go UP?  What will it change the problem, and what is the time complexity of the naive recursion approach?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-6319">
        <div id="dsq-comment-header-6319" class="dsq-comment-header">
            <cite id="dsq-cite-6319">
                <span id="dsq-author-user-6319">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6319" class="dsq-comment-body">
            <div id="dsq-comment-message-6319" class="dsq-comment-message"><p>See <a href="http://www.geeksforgeeks.org/archives/14943/comment-page-1#comment-6311" rel="nofollow">this</a> comment for time complexity.  Considering that all costs are positive, would we ever go up (or back) if are allowed to?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-6322">
        <div id="dsq-comment-header-6322" class="dsq-comment-header">
            <cite id="dsq-cite-6322">
                <span id="dsq-author-user-6322">simon</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6322" class="dsq-comment-body">
            <div id="dsq-comment-message-6322" class="dsq-comment-message"><p>can you plz also expand to neg cost, and go up is possible?  That will make the problem a lot more interesting.  will the time complexity be exponential?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-4" id="dsq-comment-6324">
        <div id="dsq-comment-header-6324" class="dsq-comment-header">
            <cite id="dsq-cite-6324">
                <span id="dsq-author-user-6324">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6324" class="dsq-comment-body">
            <div id="dsq-comment-message-6324" class="dsq-comment-message"><p>Sure, sounds interesting.  One way to solve is to apply Bellman Ford algorithm.  You can create a thread on <a href="http://www.geeksforgeeks.org/forum/" rel="nofollow">forum</a> (using the <a href="http://www.geeksforgeeks.org/forum/?new=1" rel="nofollow">Ask a Question</a> page) for more inputs from other geeks.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6317">
        <div id="dsq-comment-header-6317" class="dsq-comment-header">
            <cite id="dsq-cite-6317">
                <span id="dsq-author-user-6317">praveen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6317" class="dsq-comment-body">
            <div id="dsq-comment-message-6317" class="dsq-comment-message"><p>This is similar to Dijekstra&#8217;s shortest path algo.  Isn&#8217;t it?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-6320">
        <div id="dsq-comment-header-6320" class="dsq-comment-header">
            <cite id="dsq-cite-6320">
                <span id="dsq-author-user-6320">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6320" class="dsq-comment-body">
            <div id="dsq-comment-message-6320" class="dsq-comment-message"><p>You can say similar as both are DP based and both are for min cost path, but Dijkstra is more complex than this. Dijkstra is for a any graph with non-negative edges.  Let me know your thoughts.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-7616">
        <div id="dsq-comment-header-7616" class="dsq-comment-header">
            <cite id="dsq-cite-7616">
                <span id="dsq-author-user-7616">kartikaditya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7616" class="dsq-comment-body">
            <div id="dsq-comment-message-7616" class="dsq-comment-message"><p>Adding to it, the time complexity if done using Dijkstra based on a Priority Queue would be O(E log V) =&gt; O(3*mn log mn), in the above case.</p>
<p>Correct me if I&#8217;m wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-venki odd alt depth-2" id="dsq-comment-6323">
        <div id="dsq-comment-header-6323" class="dsq-comment-header">
            <cite id="dsq-cite-6323">
http://geeksforgeeks.org/?page_id=2                <span id="dsq-author-user-6323">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6323" class="dsq-comment-body">
            <div id="dsq-comment-message-6323" class="dsq-comment-message"><p>@praveen, It is more analogous to edit distance problem. For complete details review our Dynamic Programming problems list.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-6310">
        <div id="dsq-comment-header-6310" class="dsq-comment-header">
            <cite id="dsq-cite-6310">
                <span id="dsq-author-user-6310">kamal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6310" class="dsq-comment-body">
            <div id="dsq-comment-message-6310" class="dsq-comment-message"><p>Good one.  What is the time complexity of naive recursive solution?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-6311">
        <div id="dsq-comment-header-6311" class="dsq-comment-header">
            <cite id="dsq-cite-6311">
                <span id="dsq-author-user-6311">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6311" class="dsq-comment-body">
            <div id="dsq-comment-message-6311" class="dsq-comment-message"><p>Time complexity is O(3^n).  The recursion tree is a complete ternary tree of height 3.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-6312">
        <div id="dsq-comment-header-6312" class="dsq-comment-header">
            <cite id="dsq-cite-6312">
                <span id="dsq-author-user-6312">kamal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6312" class="dsq-comment-body">
            <div id="dsq-comment-message-6312" class="dsq-comment-message"><p>Thanks Kartik</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/';
var disqus_identifier = '14943 http://www.geeksforgeeks.org/?p=14943';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Dynamic Programming | Set 6 (Min Cost Path)";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.208 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:25:45 -->

<!-- Compression = gzip -->
<!-- super cache -->