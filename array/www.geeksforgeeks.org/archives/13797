<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>When do we use Initializer List in C++? - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="When do we use Initializer List in C++? - GeeksforGeeks" />
<meta property="og:description" content="Initializer List is used to initialize data members of a class. The list of members to be initialized is indicated with constructor as a comma separated list followed by a colon. Following is an example that uses initializer list to initialize x and y of Point class. The above code is just an example for &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="C/C++ Puzzles" />
<meta property="article:published_time" content="2011-08-07T13:10:21+00:00" />
<meta property="article:modified_time" content="2014-01-01T19:12:21+00:00" />
<meta property="og:updated_time" content="2014-01-01T19:12:21+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.471 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111846 199.15.233.164';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">When do we use Initializer List in C++?</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Initializer List is used to initialize data members of a class.  The list of members to be initialized is indicated with constructor as a comma separated list followed by a colon.<span id="more-13797"></span>   Following is an example that uses initializer list to initialize x and y of Point class.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;iostream&gt;
using namespace std;

class Point {
private:
    int x;
    int y;
public:
    Point(int i = 0, int j = 0):x(i), y(j) {} 
    /*  The above use of Initializer list is optional as the 
        constructor can also be written as:
        Point(int i = 0, int j = 0) {
            x = i;
            y = j;
        }
    */    
    
    int getX() const {return x;}
    int getY() const {return y;}
};

int main() {
  Point t1(10, 15);
  cout&lt;&lt;&quot;x = &quot;&lt;&lt;t1.getX()&lt;&lt;&quot;, &quot;;
  cout&lt;&lt;&quot;y = &quot;&lt;&lt;t1.getY();
  return 0;
}

/* OUTPUT:
   x = 10, y = 15
*/
</pre>
<p>The above code is just an example for syntax of Initializer list.   In the above code, x and y can also be easily initialed inside the constructor.  But there are situations where initialization of data members inside constructor doesn&#8217;t work and Initializer List must be used.  Following are such cases:</p>
<p><strong>1) For initialization of non-static const data members:</strong><br />
const data members must be initialized using Initializer List. In the following example, &#8220;t&#8221; is a const data member of Test class and is initialized using Initializer List.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;iostream&gt;
using namespace std;

class Test {
    const int t;
public:
    Test(int t):t(t) {}  //Initializer list must be used
    int getT() { return t; }
};

int main() {
    Test t1(10);
    cout&lt;&lt;t1.getT();
    return 0;
}

/* OUTPUT:
   10 
*/
</pre>
<p><strong>2) For initialization of reference members:</strong><br />
Reference members must be initialized using Initializer List. In the following example, &#8220;t&#8221; is a reference member of Test class and is initialized using Initializer List.</p>
<pre class="brush: cpp; title: ; notranslate" title="">// Initialization of reference data members
#include&lt;iostream&gt;
using namespace std;

class Test {
    int &amp;t;
public:
    Test(int &amp;t):t(t) {}  //Initializer list must be used
    int getT() { return t; }
};

int main() {
    int x = 20;
    Test t1(x);
    cout&lt;&lt;t1.getT()&lt;&lt;endl;
    x = 30;
    cout&lt;&lt;t1.getT()&lt;&lt;endl;
    return 0;
}
/* OUTPUT:
    20
    30
 */
</pre>
<p><strong>3) For initialization of member objects which do not have default constructor:</strong><br />
In the following example, an object &#8220;a&#8221; of class &#8220;A&#8221; is data member of class &#8220;B&#8221;, and &#8220;A&#8221; doesn&#8217;t have default constructor.  Initializer List must be used to initialize &#8220;a&#8221;.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;iostream&gt;
using namespace std;

class A {
    int i;
public:
    A(int );
};

A::A(int arg) {
    i = arg;
    cout &lt;&lt; &quot;A's Constructor called: Value of i: &quot; &lt;&lt; i &lt;&lt; endl;
}

// Class B contains object of A
class B {
    A a;
public:
    B(int );
};

B::B(int x):a(x) {  //Initializer list must be used
    cout &lt;&lt; &quot;B's Constructor called&quot;;
}

int main() {
    B obj(10);
    return 0;
}
/* OUTPUT:
    A's Constructor called: Value of i: 10
    B's Constructor called
*/
</pre>
<p>If class A had both default and parameterized constructors,  then Initializer List is not must if we want to initialize &#8220;a&#8221; using default constructor, but it is must to initialize &#8220;a&#8221; using parameterized constructor. </p>
<p><strong>4) For initialization of base class members :</strong>  Like point 3, parameterized constructor of base class can only be called using Initializer List.</p>
<pre class="brush: cpp; title: ; notranslate" title="">#include &lt;iostream&gt;
using namespace std;

class A {
    int i;
public:
    A(int );
};

A::A(int arg) {
    i = arg;
    cout &lt;&lt; &quot;A's Constructor called: Value of i: &quot; &lt;&lt; i &lt;&lt; endl;
}

// Class B is derived from A
class B: A {
public:
    B(int );
};

B::B(int x):A(x) { //Initializer list must be used
    cout &lt;&lt; &quot;B's Constructor called&quot;;
}

int main() {
    B obj(10);
    return 0;
}
</pre>
<p><strong>5) When constructor&#8217;s parameter name is same as data member</strong><br />
If constructor&#8217;s parameter name is same as data member name then the data member must be initialized either using <a href="http://msdn.microsoft.com/en-us/library/y0dddwwd.aspx">this pointer </a>or Initializer List. In the following example, both member name and parameter name for A() is &#8220;i&#8221;.</p>
<pre class="brush: cpp; title: ; notranslate" title="">#include &lt;iostream&gt;
using namespace std;

class A {
    int i;
public:
    A(int );
    int getI() const { return i; }
};

A::A(int i):i(i) { }  // Either Initializer list or this pointer must be used
/* The above constructor can also be written as 
A::A(int i) { 
    this-&gt;i = i;
}
*/

int main() {
    A a(10);
    cout&lt;&lt;a.getI();
    return 0;
}
/* OUTPUT:
    10
*/</pre>
<p><strong>6) For Performance reasons:</strong><br />
It is better to initialize all class variables in Initializer List instead of assigning values inside body.  Consider the following example: </p>
<pre class="brush: cpp; title: ; notranslate" title="">
// Without Initializer List
class MyClass {
	Type variable;
public:
	MyClass(Type a) {  // Assume that Type is an already
                     // declared class and it has appropriate 
                     // constructors and operators
	  variable = a;
	}
};
</pre>
<p>Here compiler follows following steps to create an object of type MyClass<br />
1. Type&#8217;s constructor is called first for &#8220;a&#8221;.<br />
2. The assignment operator of &#8220;Type&#8221; is called inside body of MyClass() constructor to assign
<pre>	variable = a; </pre>
<p>3. And then finally destructor of &#8220;Type&#8221; is called for &#8220;a&#8221; since it goes out of scope.</p>
<p>Now consider the same code with MyClass() constructor with  Initializer List</p>
<pre class="brush: cpp; title: ; notranslate" title="">
// With Initializer List
class MyClass {
    Type variable;
public:
    MyClass(Type a):variable(a) {   // Assume that Type is an already
                     // declared class and it has appropriate
                     // constructors and operators
    }
};
</pre>
<p>With the Initializer List, following steps are followed by compiler:<br />
1. Copy constructor of &#8220;Type&#8221;  class is called to initialize : variable(a). The arguments in initializer list are used to copy construct &#8220;variable&#8221; directly.<br />
2. Destructor of &#8220;Type&#8221; is called for &#8220;a&#8221; since it goes out of scope.</p>
<p>As we can see from this example if we use assignment inside constructor body there are three function calls: constructor + destructor + one addition assignment operator call.  And if we use Initializer List there are only two function calls:  copy constructor + destructor call. See <a href="http://www.geeksforgeeks.org/archives/23018">this </a>post for a running example on this point.</p>
<p>This assignment penalty will be much more in &#8220;real&#8221; applications where there will be many such variables.  Thanks to <em>ptr </em>for adding this point. </p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/comparison-float-value-c/" title="Comparison of a float with a value in C">Comparison of a float with a value in C</a></li><li><a href="http://www.geeksforgeeks.org/pure-virtual-destructor-c/" title="Pure virtual destructor in C++">Pure virtual destructor in C++</a></li><li><a href="http://www.geeksforgeeks.org/c-mutable-keyword/" title="C++ mutable keyword">C++ mutable keyword</a></li><li><a href="http://www.geeksforgeeks.org/possible-call-constructor-destructor-explicitly/" title="Is it possible to call constructor and destructor explicitly?">Is it possible to call constructor and destructor explicitly?</a></li><li><a href="http://www.geeksforgeeks.org/multithreading-c-2/" title="Multithreading in C">Multithreading in C</a></li><li><a href="http://www.geeksforgeeks.org/c-prgram-print-range-basic-data-types-without-library-function-constant/" title="How to print range of basic data types without any library function and constant in C?">How to print range of basic data types without any library function and constant in C?</a></li><li><a href="http://www.geeksforgeeks.org/c-final-specifier/" title="C++ final specifier">C++ final specifier</a></li><li><a href="http://www.geeksforgeeks.org/print-substring-of-a-given-string-without-using-any-string-function-and-loop-in-c/" title="Print substring of a given string without using any string function and loop in C">Print substring of a given string without using any string function and loop in C</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fwhen-do-we-use-initializer-list-in-c%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/" data-text="When do we use Initializer List in C++?" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-30445">
        <div id="dsq-comment-header-30445" class="dsq-comment-header">
            <cite id="dsq-cite-30445">
                <span id="dsq-author-user-30445">Mani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30445" class="dsq-comment-body">
            <div id="dsq-comment-message-30445" class="dsq-comment-message"><p>I would like to correct the point no.6. The following are the right steps when compiler executes with and without initialization list.</p>
<p>Without Initializer List<br />
1. Type&#8217;s copy constructor called to create &#8216;a&#8217;<br />
2. Type&#8217;s constructor called to create &#8216;variable&#8217;<br />
3. Type&#8217;s assignment operator called to copy &#8216;a&#8217; into &#8216;variable&#8217;<br />
4. Type&#8217;s destructor called to destroy &#8216;a&#8217;</p>
<p>With Initializer List<br />
1. Type&#8217;s copy constructor called to create &#8216;a&#8217;<br />
2. Type&#8217;s copy constructor called to create &#8216;variable&#8217;<br />
3. Type&#8217;s destructor called to destroy &#8216;a&#8217;</p>
<p>Basically without initializer list it takes one more operation to do the work, which is bad. So always use initialization list.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28999">
        <div id="dsq-comment-header-28999" class="dsq-comment-header">
            <cite id="dsq-cite-28999">
                <span id="dsq-author-user-28999">Alexander Korobeynikov</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28999" class="dsq-comment-body">
            <div id="dsq-comment-message-28999" class="dsq-comment-message"><p>What is explained in this article is called &#8220;initialization list&#8221;.<br />
The &#8220;initializer list&#8221; is a relatively new term of C++11. Actually, I&#8217;ve been looking for the latter when stumbled up this in the google search results.</p>
<p>I&#8217;d say the article shall be updated.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug even thread-even depth-1" id="dsq-comment-18917">
        <div id="dsq-comment-header-18917" class="dsq-comment-header">
            <cite id="dsq-cite-18917">
                <span id="dsq-author-user-18917">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18917" class="dsq-comment-body">
            <div id="dsq-comment-message-18917" class="dsq-comment-message"><p>The list of members to be initialized is indicated with constructor as a comma separated list followed by a colon.</p>
<p>Shouldn&#8217;t it be as below?</p>
<pre> <code language="C">
The list of members to be initialized is indicated with constructor as a colon followed by a comma separated list.
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-18071">
        <div id="dsq-comment-header-18071" class="dsq-comment-header">
            <cite id="dsq-cite-18071">
                <span id="dsq-author-user-18071">Anant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18071" class="dsq-comment-body">
            <div id="dsq-comment-message-18071" class="dsq-comment-message"><p>Case 3: you must have default constructor in base class A so class B can inherit it, else code will give compile time error. At least in VS.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-18072">
        <div id="dsq-comment-header-18072" class="dsq-comment-header">
            <cite id="dsq-cite-18072">
                <span id="dsq-author-user-18072">Anant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18072" class="dsq-comment-body">
            <div id="dsq-comment-message-18072" class="dsq-comment-message"><p>Above is case 4 .Even if you do not inherit. Still there will be error for not having default constructor.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7752">
        <div id="dsq-comment-header-7752" class="dsq-comment-header">
            <cite id="dsq-cite-7752">
                <span id="dsq-author-user-7752">daya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7752" class="dsq-comment-body">
            <div id="dsq-comment-message-7752" class="dsq-comment-message"><p>Life will be hell if not using initializer list for initialization.<br />
Initializer list is actually meant to initialize data members n all the stuffs related to initialization.<br />
Ctor body are meant to after data member initialization, if some thing has to de done during object creation.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6439">
        <div id="dsq-comment-header-6439" class="dsq-comment-header">
            <cite id="dsq-cite-6439">
                <span id="dsq-author-user-6439">Abhimanyu Vohra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6439" class="dsq-comment-body">
            <div id="dsq-comment-message-6439" class="dsq-comment-message"><p>Well Explained!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-ptr odd alt thread-even depth-1" id="dsq-comment-4855">
        <div id="dsq-comment-header-4855" class="dsq-comment-header">
            <cite id="dsq-cite-4855">
                <span id="dsq-author-user-4855">ptr</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4855" class="dsq-comment-body">
            <div id="dsq-comment-message-4855" class="dsq-comment-message"><p>2. Also for performance reasons its better to initialize all class variables in initializer list<br />
instead of assigning values inside body.</p>
<p>Consider this example:</p>
<pre> <code language="C">
class MyClass
{
	Type variable;

public:
	MyClass(Type a)
	{
	  variable = a;
	}
};

</code> </pre>
<p>Here when compiler follows these steps:<br />
1. Type() constructor is called first for &#8220;a&#8221;.<br />
2. The assignment operator of &#8220;Type&#8221; is called inside body of MyClass() constructor to assign
<pre>	variable = a; </pre>
<p>3. And then finally destructor of &#8220;Type&#8221; is called for &#8220;a&#8221; since it goes out of scope.</p>
<p>Now consider the same code with MyClass() constructor with  initializer list</p>
<pre> <code language="C">
	MyClass(Type a):variable(a)
	{
	}
</code> </pre>
<p>Now following steps are followed by compiler:<br />
1. Copy constructor of &#8220;Type&#8221;  class is called to initialize : variable(a). The arguments in initializer list are<br />
used to copy construct &#8220;variable&#8221; directly.<br />
2. Destructor of &#8220;Type&#8221; is called for &#8220;a&#8221; since it goes out of scope.</p>
<p>As we can see from this example if we use assignment inside constructor body there are<br />
three function calls: constructor + destructor + one addition assignment operator call<br />
And if we use initializer list there are only two function calls:  copy constructor + destructor call.</p>
<p>This assignment penalty will be much more in &#8220;real&#8221; applications where there will be many such variables.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-4858">
        <div id="dsq-comment-header-4858" class="dsq-comment-header">
            <cite id="dsq-cite-4858">
                <span id="dsq-author-user-4858">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4858" class="dsq-comment-body">
            <div id="dsq-comment-message-4858" class="dsq-comment-message"><p>Well explained.  This can be added to the points mentioned in post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-4862">
        <div id="dsq-comment-header-4862" class="dsq-comment-header">
            <cite id="dsq-cite-4862">
                <span id="dsq-author-user-4862">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4862" class="dsq-comment-body">
            <div id="dsq-comment-message-4862" class="dsq-comment-message"><p>@ptr:  Thanks for adding this point.  We have added the same to the irginal post.  Keep it up!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-20467">
        <div id="dsq-comment-header-20467" class="dsq-comment-header">
            <cite id="dsq-cite-20467">
                <span id="dsq-author-user-20467">Pavi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20467" class="dsq-comment-body">
            <div id="dsq-comment-message-20467" class="dsq-comment-message"><p>There&#8217;s one more thing happening before point# 1 of case:</p>
<pre> <code language="C">
 MyClass(Type a)
 {
     variable = a;
 }
</code> </pre>
<p>That is: the default constructor for variable, i.e.: Type() is called.</p>
<p>Whereas for case:</p>
<pre> <code language="C">
MyClass(Type a):variable(a)
{
}
</code> </pre>
<p>That default constructor call is replaced by Copy-constructor for object: variable.</p>
<p>Please reply if you disagree.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-ptr odd alt thread-odd thread-alt depth-1" id="dsq-comment-4854">
        <div id="dsq-comment-header-4854" class="dsq-comment-header">
            <cite id="dsq-cite-4854">
                <span id="dsq-author-user-4854">ptr</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4854" class="dsq-comment-body">
            <div id="dsq-comment-message-4854" class="dsq-comment-message"><p>Few more points to note with initializer list in C++:</p>
<p>1. Compiler forces order of initialization of variables to be same as in<br />
declaration order of the variables in class.</p>
<pre> <code language="C">
class MyClass
{
	int var2;
	int var1;

public:
	MyClass(int a, int b):var1(a),var2(b)
	{
		//constructor
	}

};

int main()
{
	MyClass instance(10,20);
}
</code> </pre>
<p>So in this example compiler initializes  var2 with b(20) first and then var1 is initialized with a(10).<br />
And not in the user defined order.<br />
This is because var2 is declared first in class A.</p>
<p>This will be a major issue if var2/var1 are dependent on each other.<br />
Developer should be aware of this feature since most of the times the class<br />
will be declared in header file and constructor defined in a separate cpp source file.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-4857">
        <div id="dsq-comment-header-4857" class="dsq-comment-header">
            <cite id="dsq-cite-4857">
                <span id="dsq-author-user-4857">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4857" class="dsq-comment-body">
            <div id="dsq-comment-message-4857" class="dsq-comment-message"><p>@ptr:  Nice point.  <a href="http://geeksforgeeks.org/?p=8635" rel="nofollow">This GFact</a> has one such example.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4841">
        <div id="dsq-comment-header-4841" class="dsq-comment-header">
            <cite id="dsq-cite-4841">
                <span id="dsq-author-user-4841">Rajiv Chandel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4841" class="dsq-comment-body">
            <div id="dsq-comment-message-4841" class="dsq-comment-message"><p>Can you explain me why in point 2 Initializer list must be used cant we initialize member variable with any other way?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-4846">
        <div id="dsq-comment-header-4846" class="dsq-comment-header">
            <cite id="dsq-cite-4846">
                <span id="dsq-author-user-4846">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4846" class="dsq-comment-body">
            <div id="dsq-comment-message-4846" class="dsq-comment-message"><p>Both reference and const variables have this property in common that they both must be initialized with declaration.  So compiler enforces us to put these variables in initializer list so that it can be checked whether reference and const variables have been initialized or not.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-4849">
        <div id="dsq-comment-header-4849" class="dsq-comment-header">
            <cite id="dsq-cite-4849">
                <span id="dsq-author-user-4849">Rajiv Chandel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4849" class="dsq-comment-body">
            <div id="dsq-comment-message-4849" class="dsq-comment-message"><p>Thanks</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-20728">
        <div id="dsq-comment-header-20728" class="dsq-comment-header">
            <cite id="dsq-cite-20728">
                <span id="dsq-author-user-20728">anonymous</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20728" class="dsq-comment-body">
            <div id="dsq-comment-message-20728" class="dsq-comment-message"><p>will constructor of a not be called in this case ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/';
var disqus_identifier = '13797 http://geeksforgeeks.org/?p=13797';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "When do we use Initializer List in C++?";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.194 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:40:46 -->

<!-- Compression = gzip -->
<!-- super cache -->