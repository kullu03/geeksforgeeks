<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Next Greater Element - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/next-greater-element/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Next Greater Element - GeeksforGeeks" />
<meta property="og:description" content="Given an array, print the Next Greater Element (NGE) for every element. The Next greater Element for an element x is the first greater element on the right side of x in array. Elements for which no greater element exist, consider next greater element as -1. Examples: a) For any array, rightmost element always has &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/next-greater-element/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Arrays" />
<meta property="article:published_time" content="2011-03-17T02:13:11+00:00" />
<meta property="article:modified_time" content="2014-06-14T17:12:17+00:00" />
<meta property="og:updated_time" content="2014-06-14T17:12:17+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.521 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110814 121.242.198.2';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Next Greater Element</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given an array, print the Next Greater Element (NGE) for every element. The Next greater Element for an element x is the first greater element on the right side of x in array. <span id="more-8405"></span> Elements for which no greater element exist,  consider next greater element as -1. </p>
<p>Examples:<br />
<strong>a) </strong>For any array, rightmost element always has next greater element as -1.<br />
<strong>b) </strong>For an array which is sorted in decreasing order, all elements have next greater element as -1.<br />
<strong>c) </strong>For the input array [4, 5, 2, 25}, the next greater elements for each element are as follows.</p>
<pre>
Element       NGE
   4      -->   5
   5      -->   25
   2      -->   25
   25     -->   -1
</pre>
<p><strong>d)</strong> For the input array [13, 7, 6, 12}, the next greater elements for each element are as follows.</p>
<pre>
  Element        NGE
   13      -->    -1
   7       -->     12
   6       -->     12
   12     -->     -1
</pre>
<p><strong>Method 1 (Simple)</strong><br />
Use two loops: The outer loop picks all the elements one by one. The inner loop looks for the first greater element for the element picked by outer loop.  If a greater element is found then that element is printed as next, otherwise -1 is printed.</p>
<p>Thanks to <a href="http://geeksforgeeks.org/forum/topic/next-greater-element#post-3068">Sachin </a>for providing following code.</p>
<pre class="brush: cpp; title: ; notranslate" title="">     
#include&lt;stdio.h&gt;
/* prints element and NGE pair for all elements of
arr[] of size n */
void printNGE(int arr[], int n)
{
    int next = -1;
    int i = 0;
    int j = 0;
    for (i=0; i&lt;n; i++)
    {
        next = -1;
        for (j = i+1; j&lt;n; j++)
        {
            if (arr[i] &lt; arr[j])
            {
                next = arr[j];
                break;
            }
        }
        printf(&quot;%d -- %d\n&quot;, arr[i], next);
    }
}

int main()
{
    int arr[]= {11, 13, 21, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    printNGE(arr, n);
    getchar();
    return 0;
}
</pre>
<p>Output:</p>
<pre>
11 -- 13
13 -- 21
21 -- -1
3 -- -1</pre>
<p>Time Complexity: O(n^2). The worst case occurs when all elements are sorted in decreasing order.</p>
<p></br><br />
<strong> Method 2 (Using Stack)</strong><br />
Thanks to <a href="http://geeksforgeeks.org/forum/topic/next-greater-element#post-2686">pchild </a>for suggesting following approach.<br />
1) Push the first element to stack.<br />
2) Pick rest of the elements one by one and follow following steps in loop.<br />
&#8230;.a) Mark the current element as <em>next</em>.<br />
&#8230;.b) If stack is not empty, then pop an element from stack and compare it with <em>next</em>.<br />
&#8230;.c) If next is greater than the popped element, then <em>next </em>is the next greater element fot the popped element.<br />
&#8230;.d) Keep poppoing from the stack while the popped element is smaller than <em>next</em>.  <em>next</em> becomes the next greater element for all such popped elements<br />
&#8230;.g) If <em>next </em>is smaller than the popped element, then push the popped element back.<br />
3) After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define STACKSIZE 100

// stack structure
struct stack
{
    int top;
    int items[STACKSIZE];
};

// Stack Functions to be used by printNGE()
void push(struct stack *ps, int x)
{
    if (ps-&gt;top == STACKSIZE-1)
    {
        printf(&quot;Error: stack overflow\n&quot;);
        getchar();
        exit(0);
    }
    else
    {
        ps-&gt;top += 1;
        int top = ps-&gt;top;
        ps-&gt;items [top] = x;
    }
}

bool isEmpty(struct stack *ps)
{
    return (ps-&gt;top == -1)? true : false;
}

int pop(struct stack *ps)
{
    int temp;
    if (ps-&gt;top == -1)
    {
        printf(&quot;Error: stack underflow \n&quot;);
        getchar();
        exit(0);
    }
    else
    {
        int top = ps-&gt;top;
        temp = ps-&gt;items [top];
        ps-&gt;top -= 1;
        return temp;
    }
}

/* prints element and NGE pair for all elements of
arr[] of size n */
void printNGE(int arr[], int n)
{
    int i = 0;
    struct stack s;
    s.top = -1;
    int element, next;

    /* push the first element to stack */
    push(&amp;s, arr[0]);

    // iterate for rest of the elements
    for (i=1; i&lt;n; i++)
    {
        next = arr[i];

        if (isEmpty(&amp;s) == false)
        {
            // if stack is not empty, then pop an element from stack
            element = pop(&amp;s);

            /* If the popped element is smaller than next, then
                a) print the pair
                b) keep popping while elements are smaller and
                stack is not empty */
            while (element &lt; next)
            {
                printf(&quot;\n %d --&gt; %d&quot;, element, next);
                if(isEmpty(&amp;s) == true)
                   break;
                element = pop(&amp;s);
            }

            /* If element is greater than next, then push
               the element back */
            if (element &gt; next)
                push(&amp;s, element);
        }

        /* push next to stack so that we can find
           next greater for it */
        push(&amp;s, next);
    }

    /* After iterating over the loop, the remaining
       elements in stack do not have the next greater
       element, so print -1 for them */
    while (isEmpty(&amp;s) == false)
    {
        element = pop(&amp;s);
        next = -1;
        printf(&quot;\n %d -- %d&quot;, element, next);
    }
}

/* Driver program to test above functions */
int main()
{
    int arr[]= {11, 13, 21, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    printNGE(arr, n);
    getchar();
    return 0;
}
</pre>
<p>Output:</p>
<pre>
 11 -- 13
 13 -- 21
 3 -- -1
 21 -- -1
</pre>
<p>Time Complexity: O(n). The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times.<br />
a) Initialy pushed to the stack.<br />
b) Popped from the stack when next element is being processed.<br />
c) Pushed back to the stack because next element is smaller.<br />
d) Popped from the stack in step 3 of algo.</p>
<p>Source:<br />
<a href="http://geeksforgeeks.org/forum/topic/next-greater-element#post-60">http://geeksforgeeks.org/forum/topic/next-greater-element#post-60</a></p>
<p>Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/" title="K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)">K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)</a></li><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/" title="K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1">K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1</a></li><li><a href="http://www.geeksforgeeks.org/time-complexity-insertion-sort-inversions/" title="Time complexity of insertion sort when there are O(n) inversions?">Time complexity of insertion sort when there are O(n) inversions?</a></li><li><a href="http://www.geeksforgeeks.org/check-two-given-sets-disjoint/" title="How to check if two given sets are disjoint?">How to check if two given sets are disjoint?</a></li><li><a href="http://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/" title="Minimum Number of Platforms Required for a Railway/Bus Station">Minimum Number of Platforms Required for a Railway/Bus Station</a></li><li><a href="http://www.geeksforgeeks.org/given-two-sorted-arrays-number-x-find-pair-whose-sum-closest-x/" title="Find the closest pair from two sorted arrays">Find the closest pair from two sorted arrays</a></li><li><a href="http://www.geeksforgeeks.org/print-elements-sorted-order-row-column-wise-sorted-matrix/" title="Print all elements in sorted order from row and column wise sorted matrix">Print all elements in sorted order from row and column wise sorted matrix</a></li><li><a href="http://www.geeksforgeeks.org/length-largest-subarray-contiguous-elements-set-1/" title="Length of the largest subarray with contiguous elements | Set 1">Length of the largest subarray with contiguous elements | Set 1</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fnext-greater-element%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/next-greater-element/" data-text="Next Greater Element" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/next-greater-element/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-33565">
        <div id="dsq-comment-header-33565" class="dsq-comment-header">
            <cite id="dsq-cite-33565">
                <span id="dsq-author-user-33565">Saurabh Choudhary</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33565" class="dsq-comment-body">
            <div id="dsq-comment-message-33565" class="dsq-comment-message"><p>public static void FindNextGReatest(Integer a[])<br />
    {<br />
        Stack temStack=new Stack();</p>
<p>        if(a.length&lt;0)<br />
        {<br />
            return;<br />
        }<br />
        else<br />
        {<br />
            temStack.push(a[0]);<br />
            for(int i=1;i<a> temStack.peek())<br />
                {<br />
                    do<br />
                    {<br />
                        System.out.println(temStack.pop()+&#8221;has leader &#8220;+next);<br />
                    } while ((!temStack.isEmpty()) &amp;&amp; next&gt;temStack.peek());</p>
<p>                }<br />
                temStack.push(next);<br />
            }<br />
            while(!temStack.isEmpty())<br />
            {<br />
                System.out.println(temStack.pop()+&#8221;has leader -1&#8243;);<br />
            }<br />
        }<br />
    }</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33298">
        <div id="dsq-comment-header-33298" class="dsq-comment-header">
            <cite id="dsq-cite-33298">
                <span id="dsq-author-user-33298">newCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33298" class="dsq-comment-body">
            <div id="dsq-comment-message-33298" class="dsq-comment-message"><p>Java implementation for method 2 using stack:</p>
<p>public static void printNextGreater(int[] a) {</p>
<p>        Stack stack = new Stack();</p>
<p>        stack.push(a[0]);<br />
        for (int i = 1; i &lt; a.length; i++) {</p>
<p>            while (!stack.isEmpty() &amp;&amp; stack.peek() &lt; a[i]) {<br />
                int element = stack.pop();<br />
                System.out.println(&quot;next greater of element &quot; + element<br />
                        + &quot; is &quot; + a[i]);<br />
            }</p>
<p>            stack.push(a[i]);<br />
        }<br />
        while (!stack.isEmpty()) {<br />
            System.out.println(&quot;No next greater element found for &quot;<br />
                    + stack.pop());<br />
        }<br />
    }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-32348">
        <div id="dsq-comment-header-32348" class="dsq-comment-header">
            <cite id="dsq-cite-32348">
                <span id="dsq-author-user-32348">Krishna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32348" class="dsq-comment-body">
            <div id="dsq-comment-message-32348" class="dsq-comment-message"><p>import java.util.Stack;</p>
<p>public class ToLearn {</p>
<p>    public static void main(String[] args) {<br />
        Stack greaterElements = new Stack();<br />
        int[] input = {4, 2, 3, 5 ,25};//{15,10,12,20};//{0,0,0,0,0,1,0,0,0,0};//{5, 4, 11 , 2 , 8, 10, 4, 12, 6, 2};<br />
        greaterElements.push(input[input.length &#8211; 1]);<br />
        System.out.println(&#8220;-1&#8243;);</p>
<p>        for(int i = input.length &#8211; 2 ; i &gt;= 0 ; i&#8211;)<br />
        {<br />
            while(!greaterElements.isEmpty() &amp;&amp; input[i] &gt;= greaterElements.peek())<br />
            {<br />
                greaterElements.pop();<br />
            }</p>
<p>            if(greaterElements.isEmpty())<br />
            {<br />
                System.out.println(&#8220;-1&#8243;);<br />
                greaterElements.push(input[i]);<br />
                continue;<br />
            }<br />
            else<br />
            {<br />
                System.out.println(greaterElements.peek());<br />
                greaterElements.push(input[i]);<br />
            }<br />
        }<br />
    }</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30142">
        <div id="dsq-comment-header-30142" class="dsq-comment-header">
            <cite id="dsq-cite-30142">
https://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-30142">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30142" class="dsq-comment-body">
            <div id="dsq-comment-message-30142" class="dsq-comment-message"><p>In method 2, In the below line &#8211;<br />
<code><br />
/* If element is greater than next, then push<br />
 the element back */<br />
 if (element &gt; next)<br />
   push(&amp;s, element);<br />
</code><br />
There should be  equality sign<br />
<code><br />
if (element &gt;= next)<br />
</code><br />
try 2nd method with this test case: {0,0,0,0,0,1,0,0,0,0}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-31684">
        <div id="dsq-comment-header-31684" class="dsq-comment-header">
            <cite id="dsq-cite-31684">
                <span id="dsq-author-user-31684">gks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31684" class="dsq-comment-body">
            <div id="dsq-comment-message-31684" class="dsq-comment-message"><p>:O</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-31693">
        <div id="dsq-comment-header-31693" class="dsq-comment-header">
            <cite id="dsq-cite-31693">
                <span id="dsq-author-user-31693">kabhi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31693" class="dsq-comment-body">
            <div id="dsq-comment-message-31693" class="dsq-comment-message"><p>:O</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-29487">
        <div id="dsq-comment-header-29487" class="dsq-comment-header">
            <cite id="dsq-cite-29487">
                <span id="dsq-author-user-29487">anon</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29487" class="dsq-comment-body">
            <div id="dsq-comment-message-29487" class="dsq-comment-message"><p>How is the stack method O(n) if the first element in the array is the highest number? Or less trivial, it&#8217;s one less than the last element in the array/stack?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29167">
        <div id="dsq-comment-header-29167" class="dsq-comment-header">
            <cite id="dsq-cite-29167">
                <span id="dsq-author-user-29167">Neha Garg</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29167" class="dsq-comment-body">
            <div id="dsq-comment-message-29167" class="dsq-comment-message"><p>there is an solution using stack in O(n)<br />
(!)start from right most element and store its nge as -1 and push this elemnt into stack<br />
(2)<br />
for(n-2 to 0)&amp; !isempty()<br />
pop the element from stack until we get number greater then arr[i] , if the elemnt at top greater than arr[i] ,then store it as nge .. and push both  nge and arr[i] element. if stack gets empty then store -1 as nge of that element and push arr[i] only</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-29006">
        <div id="dsq-comment-header-29006" class="dsq-comment-header">
            <cite id="dsq-cite-29006">
                <span id="dsq-author-user-29006">Manoj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29006" class="dsq-comment-body">
            <div id="dsq-comment-message-29006" class="dsq-comment-message"><p>Can anyone help me with the parallel version of the solution?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27216">
        <div id="dsq-comment-header-27216" class="dsq-comment-header">
            <cite id="dsq-cite-27216">
                <span id="dsq-author-user-27216">Abhishek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27216" class="dsq-comment-body">
            <div id="dsq-comment-message-27216" class="dsq-comment-message"><p>One another method to solve the problem : </p>
<p>1.) Keep a separate array to store the indices of the NGE(next greatest element). Update NGE of the right most element as -1.</p>
<p>2.) Iterate the given input array from right to left with i as a counter ( starting from high-1 to 0). Set current = Input[i]; j //j is the index of element we want to compare</p>
<p>        For each of the element, first compare it with adjacent element (j=i+1). Compare (input[i], input[j]). If it is greater, update the NGE for i as j;</p>
<p>        If this is the not the case, compare the element at NGE[j] index with Input[i]. Compare (input[NGE[j]], input[i]); If still we get the current value smaller, keep on traversing the NGE array by updating j = NGE[j]  till we get value at NGE[j] = -1;</p>
<p>        If NGE[j] == -1, we reached the element which is greatest till now. </p>
<p>Working code for above algorithm : </p>
<p>static void Main(string[] args)<br />
{</p>
<p>            int[] input = { 13, 7 , 6 , 18, 5 };<br />
//int[] input = { 1,2,3,4,5,6,7,8,9 };<br />
//int[] input = { 9,8,7,6,5,4,3,2,1 };</p>
<p>            int[] NGE = new int[ input.Length ];</p>
<p>            for (int i = 0; i = 0; i&#8211;)<br />
{<br />
j = i + 1;</p>
<p>//comparing with adjacent variable first<br />
         if (input[i] &lt; input[j])<br />
         {<br />
          NGE[i] = j;<br />
          continue;<br />
         }</p>
<p>                //traversing the NGE array to verify if the elements greater than the neighbor element are also greater than the current element or not</p>
<p>       while (NGE[j] != -1 )<br />
       {<br />
              if (input[i] &lt; input[NGE[j]])<br />
              {<br />
              NGE[i] = NGE[j];<br />
              break;<br />
               }<br />
               else<br />
               j = NGE[j];<br />
        }</p>
<p>       if (NGE[j] == -1)<br />
       {<br />
       NGE[i] = -1;<br />
        }</p>
<p>            }</p>
<p>            for (int i = 0; i &lt; input.Length; i++)<br />
{<br />
Console.WriteLine(&quot; For element {0}, the next big element will be {1}&quot;, input[i], NGE[i]==-1?-1:input[NGE[i]]);<br />
}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-anshul-chauhan even thread-even depth-1" id="dsq-comment-22339">
        <div id="dsq-comment-header-22339" class="dsq-comment-header">
            <cite id="dsq-cite-22339">
                <span id="dsq-author-user-22339">anshul.chauhan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22339" class="dsq-comment-body">
            <div id="dsq-comment-message-22339" class="dsq-comment-message"><p>Instead of making it so complex&#8230;we can start scanning it from right and keep putting the elements in a BST. everytime just replace the number with inorder successor of current element.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-22790">
        <div id="dsq-comment-header-22790" class="dsq-comment-header">
            <cite id="dsq-cite-22790">
                <span id="dsq-author-user-22790">Pandian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22790" class="dsq-comment-body">
            <div id="dsq-comment-message-22790" class="dsq-comment-message"><p>Yeah. You can do this way. But, this takes O(nlogn) time.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-28474">
        <div id="dsq-comment-header-28474" class="dsq-comment-header">
            <cite id="dsq-cite-28474">
                <span id="dsq-author-user-28474">reemachugani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28474" class="dsq-comment-body">
            <div id="dsq-comment-message-28474" class="dsq-comment-message"><p>Using BST is more intuitive though.<br />
Initialise successor as -1. During insertion (starting from the last element) if we branch to a left subtree/node, then make current node as successor.<br />
After insertion, successor is the NGE.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-34554">
        <div id="dsq-comment-header-34554" class="dsq-comment-header">
            <cite id="dsq-cite-34554">
                <span id="dsq-author-user-34554">kesar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34554" class="dsq-comment-body">
            <div id="dsq-comment-message-34554" class="dsq-comment-message"><p>No, I think  you are traversing array elements exactly two times its linear time complexity(one is for loop one is stack).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-jitendra-bits even thread-odd thread-alt depth-1" id="dsq-comment-21140">
        <div id="dsq-comment-header-21140" class="dsq-comment-header">
            <cite id="dsq-cite-21140">
                <span id="dsq-author-user-21140">Jitendra.BITS</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21140" class="dsq-comment-body">
            <div id="dsq-comment-message-21140" class="dsq-comment-message"><p>O(n) time and O(1) space!!</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;

void printNGE(int a[], int n)
{
    int max = -1;
    int i = 0;
    int j = 1;
    for (i=0,j=1; i&lt;n, j&lt;n; i++)
    {
		while (a[i]&gt;a[j]||i==j)
			j++;
		if (i==n-1)
		{
				printf (&quot;%d  -1\n&quot;, a[i]);
				break;
		}
		if (a[i]&lt;a[j]&amp;&amp;a[j]&gt;=max)
		{
			max=a[j];
			printf(&quot;%d  %d\n&quot;, a[i], max);
		}
	}
}
 
int main()
{
    int a[]= {4,2,5,25};
    int n = sizeof(a)/sizeof(a[0]);
    printNGE(a, n);
    return 0;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-22792">
        <div id="dsq-comment-header-22792" class="dsq-comment-header">
            <cite id="dsq-cite-22792">
                <span id="dsq-author-user-22792">Pandian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22792" class="dsq-comment-body">
            <div id="dsq-comment-message-22792" class="dsq-comment-message"><p>This is a wrong approach. Consider the input : </p>
<p>4 2 3 5 25</p>
<p>The output should be<br />
4 5<br />
2 3<br />
3 5<br />
5 25<br />
25 -1</p>
<p>But you get<br />
4 5<br />
2 5<br />
3 5<br />
5 25<br />
25 -1</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-31294">
        <div id="dsq-comment-header-31294" class="dsq-comment-header">
            <cite id="dsq-cite-31294">
                <span id="dsq-author-user-31294">Ankit Chaudhary</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31294" class="dsq-comment-body">
            <div id="dsq-comment-message-31294" class="dsq-comment-message"><p>I think ur approach is wrong.Check for this input : {15,10,12,20}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-20862">
        <div id="dsq-comment-header-20862" class="dsq-comment-header">
            <cite id="dsq-cite-20862">
                <span id="dsq-author-user-20862">Abhinav Aggarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20862" class="dsq-comment-body">
            <div id="dsq-comment-message-20862" class="dsq-comment-message"><p>This can be done in O(n) time and O(1) space complexity.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-20865">
        <div id="dsq-comment-header-20865" class="dsq-comment-header">
            <cite id="dsq-cite-20865">
                <span id="dsq-author-user-20865">Abhinav Aggarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20865" class="dsq-comment-body">
            <div id="dsq-comment-message-20865" class="dsq-comment-message"><p>Oops! My mistake. It cannot be done in O(n).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20273">
        <div id="dsq-comment-header-20273" class="dsq-comment-header">
            <cite id="dsq-cite-20273">
                <span id="dsq-author-user-20273">hunter</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20273" class="dsq-comment-body">
            <div id="dsq-comment-message-20273" class="dsq-comment-message"><p>//my prog with o(n)space complexity and o(n)t.c<br />
void greaterelement(int a[],int n)<br />
{<br />
int *b,i,max;<br />
b=(int *)calloc(n,sizeof(int));<br />
i=n-1;<br />
b[i]=-1;<br />
for(i=n-2;i&gt;=0;i&#8211;)<br />
{<br />
if(a[i]&lt;a[i+1])<br />
{<br />
b[i]=a[i+1];<br />
if(max&lt;b[i])<br />
max=b[i];<br />
}<br />
else<br />
if(a[i]&lt;b[i+1])<br />
{<br />
b[i]=b[i+1];<br />
if(max&lt;b[i])<br />
max=b[i];<br />
}<br />
else<br />
if(a[i]&lt;max)<br />
b[i]=-1;<br />
}<br />
for(i=0;i&lt;n;i++)<br />
printf(&quot;greater value of %d=%d\n&quot;,a[i],b[i]);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-17341">
        <div id="dsq-comment-header-17341" class="dsq-comment-header">
            <cite id="dsq-cite-17341">
                <span id="dsq-author-user-17341">rohit a</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17341" class="dsq-comment-body">
            <div id="dsq-comment-message-17341" class="dsq-comment-message"><p>There were some bugs in the code </p>
<pre> <code language="Java">
/*
import java.util.Stack;
public class NextGreaterElement {
	public void nge(int [] array)
	{
		Stack&lt;Integer&gt;stack=new Stack&lt;Integer&gt;();
        stack.push(array[0]);
        for(int i=1;i&lt;array.length;i++)
        {
            int next=array[i];
            int element = stack.peek();
            if(element &lt; next)
            {
            	System.out.println(element + &quot;  &quot;+ next);
            	stack.pop();
            	while(!stack.isEmpty())
            	{
            		int temp=stack.peek();
            		if(temp &lt; next)
            		{
            			System.out.println(temp+&quot; &quot;+next);
            			stack.pop();
            		}
            		else
            			break;
            	}
            
            }
        	stack.push(next);
            
        }
        for(int i: stack)
        	System.out.println(i+&quot; -1&quot;);
	}

	public static void main(String [] args)
	{
		int [] array={11,13,21,3,19,37,6};
		NextGreaterElement nge=new NextGreaterElement();
		nge.nge(array);
		
	}

}
 
 */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-16470">
        <div id="dsq-comment-header-16470" class="dsq-comment-header">
            <cite id="dsq-cite-16470">
                <span id="dsq-author-user-16470">bhavneet</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16470" class="dsq-comment-body">
            <div id="dsq-comment-message-16470" class="dsq-comment-message"><p>1) push -1 into stack<br />
2) loop i= n-1 to 0<br />
          while ( (a=pop( stack , &amp;top)) &amp;&amp; a&lt;arr[i] &amp;&amp; a!=-1);<br />
          push(stack, &amp;top, a);<br />
          push(stack, &amp;top, arr[i]);<br />
          arr[i]=a;</p>
<p>#include&lt;stdio.h&gt;<br />
#define MAX 10</p>
<p>int push( int stack[], int *top, int n)<br />
{<br />
if (*top==MAX-1)</p>
<p>	printf(&quot;overflow&quot;);<br />
else{<br />
(*top)++;<br />
stack[*top]=n;<br />
return 0;<br />
}<br />
}<br />
int pop(int stack[], int *top)<br />
{<br />
	if (*top==-1)<br />
		{<br />
			return -1;<br />
		}<br />
	(*top)&#8211;;<br />
	return stack[*top+1];<br />
}<br />
void nge( int arr[], int n)<br />
{int i, a;<br />
	int stack[MAX+2];<br />
	int top=-1;<br />
	push( stack, &amp;top, -1);<br />
	for (i=n-1; i&gt;=0; i&#8211;)<br />
	{<br />
		a=pop(stack, &amp;top);<br />
		while ( a&lt; arr[i] &amp;&amp; a!= -1)a=pop(stack, &amp;top);<br />
		push(stack , &amp;top, a);<br />
                push(stack, &amp;top, arr[i]);<br />
		arr[i]=a;<br />
	}</p>
<p>}<br />
int main()<br />
{<br />
	int i;<br />
	int arr[]={4, 5, 2, 25, 20, 11, 13, 21, 3} ;</p>
<p>	nge( arr, 9);</p>
<p>	for (i=0; i&lt;9; i++)<br />
             printf(&quot;%d\t&quot;, arr[i]);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-14819">
        <div id="dsq-comment-header-14819" class="dsq-comment-header">
            <cite id="dsq-cite-14819">
                <span id="dsq-author-user-14819">jai</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14819" class="dsq-comment-body">
            <div id="dsq-comment-message-14819" class="dsq-comment-message"><p>this problem can  be easily solve by using BST.<br />
steps:-&gt;<br />
1)construct BST of the array starting from right to left.<br />
2)for every value its next greater no is its inorder succsesor<br />
  just populate that..simple</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-14908">
        <div id="dsq-comment-header-14908" class="dsq-comment-header">
            <cite id="dsq-cite-14908">
                <span id="dsq-author-user-14908">Tarun Gehlaut</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14908" class="dsq-comment-body">
            <div id="dsq-comment-message-14908" class="dsq-comment-message"><p>But your solution will have complexity nlogn as insertion in bst is logn per element.<br />
So nt the best solution</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-15167">
        <div id="dsq-comment-header-15167" class="dsq-comment-header">
            <cite id="dsq-cite-15167">
                <span id="dsq-author-user-15167">Paparao Veeragandham</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15167" class="dsq-comment-body">
            <div id="dsq-comment-message-15167" class="dsq-comment-message"><p>{10,200,300,100}</p>
<p>By using BST logic :10  -&gt;  100</p>
<p>Correct value is : 10 -&gt;200</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-12311">
        <div id="dsq-comment-header-12311" class="dsq-comment-header">
            <cite id="dsq-cite-12311">
                <span id="dsq-author-user-12311">HLS.Nirma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12311" class="dsq-comment-body">
            <div id="dsq-comment-message-12311" class="dsq-comment-message"><p>Space complexity of the second algorithm in the article is O(n).</p>
<pre> <code language="C">

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-12061">
        <div id="dsq-comment-header-12061" class="dsq-comment-header">
            <cite id="dsq-cite-12061">
                <span id="dsq-author-user-12061">pr6989</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12061" class="dsq-comment-body">
            <div id="dsq-comment-message-12061" class="dsq-comment-message"><pre> <code language="C">
//next greater element
#include&lt;iostream&gt;
using namespace std;
int main()
{
int a[]={3,11,33,62};
int n=sizeof(a)/sizeof(a[0]);
int max_till_now=a[n-1];
int i;
cout&lt;&lt;&quot;NGE for &quot;&lt;&lt;a[n-1]&lt;&lt;&quot; = -1&quot;&lt;&lt;endl;
for(i=n-2;i&gt;=0;i--)
{
    if(a[i+1]&gt;a[i])
    {
        max_till_now=a[i+1];
        cout&lt;&lt;&quot;NGE for &quot;&lt;&lt;a[i]&lt;&lt;&quot; = &quot;&lt;&lt;max_till_now&lt;&lt;endl;
    }
    else if(a[i]&gt;=max_till_now)
    {
        cout&lt;&lt;&quot;NGE for &quot;&lt;&lt;a[i]&lt;&lt;&quot; = -1 &quot;&lt;&lt;endl;
    }
    else
    {
        cout&lt;&lt;&quot;NGE for &quot;&lt;&lt;a[i]&lt;&lt;&quot; = &quot;&lt;&lt;max_till_now&lt;&lt;endl;
    }
}
return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-12292">
        <div id="dsq-comment-header-12292" class="dsq-comment-header">
            <cite id="dsq-cite-12292">
                <span id="dsq-author-user-12292">abc</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12292" class="dsq-comment-body">
            <div id="dsq-comment-message-12292" class="dsq-comment-message"><p>check for this case<br />
6,17,10,15,20,7</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-11903">
        <div id="dsq-comment-header-11903" class="dsq-comment-header">
            <cite id="dsq-cite-11903">
https://www.seas.upenn.edu/~adhruv                <span id="dsq-author-user-11903">Dhruv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11903" class="dsq-comment-body">
            <div id="dsq-comment-message-11903" class="dsq-comment-message"><p>I think this method can work. </p>
<p>1. Start from the rightmost index. Set the next greater as -1.<br />
2. Maintain the current maximum if the element is lower than the maximum set the next greater to this else set to -1. </p>
<p>This method should work in O(n) time</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-12039">
        <div id="dsq-comment-header-12039" class="dsq-comment-header">
            <cite id="dsq-cite-12039">
                <span id="dsq-author-user-12039">Palash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12039" class="dsq-comment-body">
            <div id="dsq-comment-message-12039" class="dsq-comment-message"><p>You need, next greater, not the greatest element on the right.<br />
Your algorithm gives latter.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10299">
        <div id="dsq-comment-header-10299" class="dsq-comment-header">
            <cite id="dsq-cite-10299">
                <span id="dsq-author-user-10299">harit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10299" class="dsq-comment-body">
            <div id="dsq-comment-message-10299" class="dsq-comment-message"><p>@jigg:<br />
consider<br />
20, 5,7,10,11,6,23,19,15<br />
your algo seems to be failing for 20.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10036">
        <div id="dsq-comment-header-10036" class="dsq-comment-header">
            <cite id="dsq-cite-10036">
                <span id="dsq-author-user-10036">appy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10036" class="dsq-comment-body">
            <div id="dsq-comment-message-10036" class="dsq-comment-message"><p>can we implement a sorting on the array first..if the input is the last element then result is -1..else find the element using a linear search, return the index of linear search plus next greater element..Complexity:O(nlgn)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-9287">
        <div id="dsq-comment-header-9287" class="dsq-comment-header">
            <cite id="dsq-cite-9287">
                <span id="dsq-author-user-9287">uzumaki_naruto</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9287" class="dsq-comment-body">
            <div id="dsq-comment-message-9287" class="dsq-comment-message"><pre> <code language="Java">
public static int[] getNextGreaterElementArray(int arr[]){
		if(arr == null ) return null;
		int len = arr.length;
		int nge[] = new int[len];
		nge[len-1] = -1;
		int curr = 1;
		Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();
		stack.push(0);
		while(curr &lt; len){
			while( !stack.isEmpty() &amp;&amp; arr[stack.peek()] &lt; arr[curr] ){
					nge[stack.pop()] = arr[curr];  
				}
				stack.push(curr);
			curr++;
		}
		while(!stack.isEmpty()){
			nge[stack.pop()] = -1;
		}
		return nge;
	}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9075">
        <div id="dsq-comment-header-9075" class="dsq-comment-header">
            <cite id="dsq-cite-9075">
                <span id="dsq-author-user-9075">km</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9075" class="dsq-comment-body">
            <div id="dsq-comment-message-9075" class="dsq-comment-message"><p>Shouldn&#8217;t the method 2 push be ps-&gt;item[top]=x; and not ps-&gt;item=x;?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-9079">
        <div id="dsq-comment-header-9079" class="dsq-comment-header">
            <cite id="dsq-cite-9079">
                <span id="dsq-author-user-9079">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9079" class="dsq-comment-body">
            <div id="dsq-comment-message-9079" class="dsq-comment-message"><p>There seems to be some bug in Syntax Highlighting tool. It removes a particular type of expression from code. For now, we have added an extra variable top in code so that the code is highlighted properly. We will look into the main issue of syntax highlighting.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7232">
        <div id="dsq-comment-header-7232" class="dsq-comment-header">
            <cite id="dsq-cite-7232">
                <span id="dsq-author-user-7232">Bharti</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7232" class="dsq-comment-body">
            <div id="dsq-comment-message-7232" class="dsq-comment-message"><p>Hey algorithm is nice, but the complexity of the algorithm is not O(n) but O(n-square) which is quite visible while evaluating the worst case.</p>
<p>In case of a oppositely sorted array we have,<br />
No. of comparisons for each &#8216;i&#8217; of outer loop = i-1<br />
thus, total cost = 1+2+&#8230;+n-1 = (n-1)(n)/2<br />
which proves its n-square order.</p>
<p>Kindly reply back if you find anything wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-7234">
        <div id="dsq-comment-header-7234" class="dsq-comment-header">
            <cite id="dsq-cite-7234">
                <span id="dsq-author-user-7234">Bharti</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7234" class="dsq-comment-body">
            <div id="dsq-comment-message-7234" class="dsq-comment-message"><p>Okay I got it, kindly ignore the post. We will never have to traverse through the stack for nothing. if we traverse into it, it means we pop elements forever. And as because maximum number of popped elements bounded by &#8216;n&#8217; hence it proves we will never have to compare more than &#8216;2n&#8217; times during the whole outer loop.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5813">
        <div id="dsq-comment-header-5813" class="dsq-comment-header">
            <cite id="dsq-cite-5813">
                <span id="dsq-author-user-5813">radhakrishna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5813" class="dsq-comment-body">
            <div id="dsq-comment-message-5813" class="dsq-comment-message"><p>DPM solution</p>
<p>Array A : 1 to n</p>
<p>NGE(i) :      -1 if i == n<br />
              max(a[i+1], NGE(i+1)) if i&lt;n</p>
<p>NGE[n] = -1<br />
for i = n-1 downto 1<br />
  NGE[i] = max (a[i+1], NGE[i+1]);</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-5841">
        <div id="dsq-comment-header-5841" class="dsq-comment-header">
            <cite id="dsq-cite-5841">
                <span id="dsq-author-user-5841">Julian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5841" class="dsq-comment-body">
            <div id="dsq-comment-message-5841" class="dsq-comment-message"><p>Please check the example [1,4,2,9,7,13,3,8], for 13, your code returns 8, yet, it is actually -1</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-5854">
        <div id="dsq-comment-header-5854" class="dsq-comment-header">
            <cite id="dsq-cite-5854">
                <span id="dsq-author-user-5854">radhakrishna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5854" class="dsq-comment-body">
            <div id="dsq-comment-message-5854" class="dsq-comment-message"><p>Thanks for pointing out. The recurrence should be as follows.</p>
<p>NGE(i) : -1 if i == n<br />
for condition i&lt;n :<br />
let NEXT_MAX is max(a[i+1], NGE(i+1))<br />
-1 if NEXT_MAX &lt; a[i]<br />
NEXT_MAX otherwise</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-akshatkmr even depth-4" id="dsq-comment-7178">
        <div id="dsq-comment-header-7178" class="dsq-comment-header">
            <cite id="dsq-cite-7178">
                <span id="dsq-author-user-7178">Akshat</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7178" class="dsq-comment-body">
            <div id="dsq-comment-message-7178" class="dsq-comment-message"><p>Take this array for example<br />
[1,0,3,4,12,13,-1,14]</p>
<p>Your code will return 14 whereas according to problem statement the code should return 13.</p>
<p>Your code is actually working for finding next GREATEST (another problem).<br />
Kindly point out if I am wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-sambasiva odd alt thread-even depth-1" id="dsq-comment-5798">
        <div id="dsq-comment-header-5798" class="dsq-comment-header">
            <cite id="dsq-cite-5798">
http://effprog.blogspot.com                <span id="dsq-author-user-5798">Sambasiva</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5798" class="dsq-comment-body">
            <div id="dsq-comment-message-5798" class="dsq-comment-message"><p><a href="http://effprog.blogspot.com/2011/10/to-print-immediate-higher-of-all.html" rel="nofollow">http://effprog.blogspot.com/2011/10/to-print-immediate-higher-of-all.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-agniswar even thread-odd thread-alt depth-1" id="dsq-comment-5667">
        <div id="dsq-comment-header-5667" class="dsq-comment-header">
            <cite id="dsq-cite-5667">
                <span id="dsq-author-user-5667">Agniswar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5667" class="dsq-comment-body">
            <div id="dsq-comment-message-5667" class="dsq-comment-message"><p>Hey please check my code once..and tell if the approach is wrong..actually i feel the time complexity is O(n) here..<br />
<a href="http://ideone.com/FdCQi" rel="nofollow">http://ideone.com/FdCQi</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-agniswar odd alt thread-even depth-1" id="dsq-comment-5635">
        <div id="dsq-comment-header-5635" class="dsq-comment-header">
            <cite id="dsq-cite-5635">
                <span id="dsq-author-user-5635">Agniswar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5635" class="dsq-comment-body">
            <div id="dsq-comment-message-5635" class="dsq-comment-message"><p>Hi,i solved this problem this way-</p>
<p>#include<br />
#include</p>
<p>void find_NGE(int *a,int *b,int len)<br />
{<br />
     int i,j=1,k=0;<br />
     int max=a[0],pos=0;<br />
     for(i=1;imax)<br />
                       {<br />
                                   max=a[i];<br />
                                   pos=i;<br />
                       }<br />
     }</p>
<p>     i=0;<br />
     while(i&lt;len-1 &amp;&amp; ja[i])<br />
                       {<br />
                                    b[k++]=a[j];<br />
                                    i++;<br />
                       }<br />
                       else<br />
                           j++;<br />
                   }<br />
     }<br />
     b[k]=-1;<br />
}</p>
<p>void print(int *b,int len)<br />
{<br />
     int i;<br />
     for(i=0;i&lt;len;i++)<br />
                       printf(&quot;%d   \n&quot;,b[i]);<br />
}</p>
<p>int main()<br />
{<br />
    int a[]={13,7,6,12};<br />
    int len=sizeof(a)/sizeof(a[0]);<br />
    int b[len];<br />
    find_NGE(a,b,len);<br />
    print(b,len);<br />
    getch();<br />
}     </p>
<p>Time Complexity-O(n+n)=O(n),Space Complexity-O(1). Pls revert back if my appraoch is wrong..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-5464">
        <div id="dsq-comment-header-5464" class="dsq-comment-header">
            <cite id="dsq-cite-5464">
                <span id="dsq-author-user-5464">Prateek Caire</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5464" class="dsq-comment-body">
            <div id="dsq-comment-message-5464" class="dsq-comment-message"><p>Isnt this code better as it create 2nd array in same order as first array is</p>
<pre> <code language="C">
MA()
	s.Push(a[n-1])
	b[n-1] = -1
	for each i from n-2 to 0
		while(a[i] &gt; s.Top())
			s.Pop()
		if(s.IsNotEmpty())	
			b[i] = s.Top()
		else
			b[i] = -1
			s.Push(a[i])
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhinav08 odd alt thread-even depth-1" id="dsq-comment-5168">
        <div id="dsq-comment-header-5168" class="dsq-comment-header">
            <cite id="dsq-cite-5168">
                <span id="dsq-author-user-5168">Abhinav Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5168" class="dsq-comment-body">
            <div id="dsq-comment-message-5168" class="dsq-comment-message"><p>could any one please review the second method as I think this is wrong.<br />
For ex. Sample input={4,7,5,8,9}<br />
Output shown:4&#8211;&gt;7<br />
             5&#8211;&gt;8<br />
             7&#8211;&gt;8<br />
             8&#8211;&gt;9<br />
             9&#8211;&gt;-1<br />
But the output should be:<br />
4&#8211;&gt;5<br />
7&#8211;&gt;8<br />
5&#8211;&gt;8<br />
8&#8211;&gt;9<br />
9&#8211;&gt;-1</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-5463">
        <div id="dsq-comment-header-5463" class="dsq-comment-header">
            <cite id="dsq-cite-5463">
                <span id="dsq-author-user-5463">AG</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5463" class="dsq-comment-body">
            <div id="dsq-comment-message-5463" class="dsq-comment-message"><p>Read the definition of NGE, &#8220;The Next greater Element for an element x is the first greater element on the right side of x in array&#8221; so first greater element of 4 is 7 ..hence the output is correct. Hope u got it.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5107">
        <div id="dsq-comment-header-5107" class="dsq-comment-header">
            <cite id="dsq-cite-5107">
                <span id="dsq-author-user-5107">Akula Arjun Reddy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5107" class="dsq-comment-body">
            <div id="dsq-comment-message-5107" class="dsq-comment-message"><p>This question can be solved using BST.</p>
<p>1. start from end of array.<br />
2. we have to insert each element in to BST (which also stores output of element in the node).<br />
     &#8211; insert the element in BST.<br />
     &#8211; store the information of how you reach that element using left pointer of its parent (flag = 0) or right pointer of its parent (flag = 1).<br />
     &#8211; if flag = 0, then just check value in its parent and right child.<br />
     &#8211; if flag = 1, then check only its right child</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-5108">
        <div id="dsq-comment-header-5108" class="dsq-comment-header">
            <cite id="dsq-cite-5108">
                <span id="dsq-author-user-5108">Arjun</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5108" class="dsq-comment-body">
            <div id="dsq-comment-message-5108" class="dsq-comment-message"><p>Time Complexity : O(nlogn)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-3" id="dsq-comment-5109">
        <div id="dsq-comment-header-5109" class="dsq-comment-header">
            <cite id="dsq-cite-5109">
                <span id="dsq-author-user-5109">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5109" class="dsq-comment-body">
            <div id="dsq-comment-message-5109" class="dsq-comment-message"><p>@Arjun:  BST has to be selfbalancing to make sure that the time complexity is O(nLogn).  As per my understanding, your approach is following. </p>
<p><em>Take elements from right to left and construct a self balancing BST.  When inserting an element in BST, find the inorder successor of the newly inserted node.</em></p>
<p>Let me know if my understanding is correct.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4430">
        <div id="dsq-comment-header-4430" class="dsq-comment-header">
            <cite id="dsq-cite-4430">
                <span id="dsq-author-user-4430">Prashant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4430" class="dsq-comment-body">
            <div id="dsq-comment-message-4430" class="dsq-comment-message"><p>In case of decreasing order, the number of comparisons would be 2n, which in asymptotic terms would be O(n).</p>
<p>Note (in case of decreasing order) every new element needs to be compared to only the top of the stack. If &#8220;current&#8221; element is not greater than top of stack, it cannot be greater than elements deeper within the stack. </p>
<p>5-&gt;4-&gt;3-&gt;2-&gt;1</p>
<p>If 3 is not greater than 4, it cannot be greater than 5. Similarly, if 1 is not greater than 2, it cannot be greater than the rest of the elements in the stack. At any moment, there can not exist elements out of decreasing order in the stack since we POP those elements in case we ever see a &#8220;Next greater element&#8221;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4394">
        <div id="dsq-comment-header-4394" class="dsq-comment-header">
            <cite id="dsq-cite-4394">
                <span id="dsq-author-user-4394">Munish Goyal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4394" class="dsq-comment-body">
            <div id="dsq-comment-message-4394" class="dsq-comment-message"><p>Stack (or Queue for correct order) implementation will also have worst-case runtime O(n^2) for elements in decreasing order.</p>
<p>Every new element of outer loop needs to compare with every element in Stack (or Queue).</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4380">
        <div id="dsq-comment-header-4380" class="dsq-comment-header">
            <cite id="dsq-cite-4380">
                <span id="dsq-author-user-4380">Julian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4380" class="dsq-comment-body">
            <div id="dsq-comment-message-4380" class="dsq-comment-message"><p>I think the method runs o(n^2) in worse case, then what is the average case analysis?</p>
<p>  Also the output order is not the same as the input order because of the use of stack. Since the stack is only used for storing the elements that don&#8217;t find NGE at current pointer, can we use queue to implement such that the output order is as the same as input order</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4387">
        <div id="dsq-comment-header-4387" class="dsq-comment-header">
            <cite id="dsq-cite-4387">
                <span id="dsq-author-user-4387">Prashant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4387" class="dsq-comment-body">
            <div id="dsq-comment-message-4387" class="dsq-comment-message"><p>Can you elaborate on how you think the method would run in O(n2) ?</p>
<p>There is always O(n) comparisons made, the current element is ONLY compared to top of the stack (not the entire contents of the stack). </p>
<p>Regarding the ordering, we could ensure that in other ways. I did not take that into account as the question did not mention any such requirements. Queue might not allow you to make the comparison between the current element and the previously inserted one because of FIFO.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4241">
        <div id="dsq-comment-header-4241" class="dsq-comment-header">
            <cite id="dsq-cite-4241">
                <span id="dsq-author-user-4241">Prashant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4241" class="dsq-comment-body">
            <div id="dsq-comment-message-4241" class="dsq-comment-message"><p><strong>Stack implementation in Java</strong></p>
<p>import java.util.Stack;</p>
<p>public class Node {<br />
	Node next;<br />
	int data;</p>
<p>	Node(int data) {<br />
		this.data = data;<br />
	}</p>
<p>	public void getNextGreaterElement(Node node) {<br />
		if(node == null)<br />
			throw new IllegalArgumentException(&quot;Null not allowed&quot;);</p>
<p>		Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();</p>
<p>		while( node.next != null ) {<br />
			stack.push(node.data);<br />
			Node current = node.next;</p>
<p>			while(!stack.empty() &amp;&amp; current.data &gt; stack.peek()  ) {<br />
					System.out.println(stack.pop() + &quot;&#8211;&gt;&quot; + current.data );<br />
			}<br />
			node = current;<br />
		}</p>
<p>		if(node.next == null)<br />
			stack.push(node.data);<br />
			while(!stack.empty())<br />
				System.out.println(stack.pop() + &quot;&#8211;&gt; -1&quot;);<br />
	}</p>
<p>	public static void main(String[] args) {<br />
		Node n = new Node(100);<br />
		Node n1 = n.next = new Node(2);<br />
		Node n2 = n1.next = new Node(300);<br />
		Node n3 = n2.next = new Node(4);<br />
		Node n4 = n3.next = new Node(5);</p>
<p>		n.getNextGreaterElement(n);<br />
	}</p>
<p>}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4429">
        <div id="dsq-comment-header-4429" class="dsq-comment-header">
            <cite id="dsq-cite-4429">
                <span id="dsq-author-user-4429">!gk</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4429" class="dsq-comment-body">
            <div id="dsq-comment-message-4429" class="dsq-comment-message"><p>I think using stack to store the NGE is ok.<br />
eg. let input be input[n] and output be output[n]<br />
Process the input from the right to left,</p>
<p>max=input[n-1];</p>
<p>for i=(n-1)-0<br />
{<br />
    if(input[i]&lt;max)<br />
    {<br />
       if(input[i]&lt;input[i+1]) output[i]=input[i+1];<br />
       else<br />
       {<br />
         val=pop(stack);<br />
         while(pop(stack)&lt;input[i])<br />
         {<br />
           val=pop(stack);<br />
         }<br />
      }<br />
      output[i]=val;<br />
      push(stack, output[i]);<br />
  }<br />
  else<br />
  {<br />
     output[i]=-1;<br />
     max=arr[i];<br />
  }<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4075">
        <div id="dsq-comment-header-4075" class="dsq-comment-header">
            <cite id="dsq-cite-4075">
                <span id="dsq-author-user-4075">A*</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4075" class="dsq-comment-body">
            <div id="dsq-comment-message-4075" class="dsq-comment-message"><pre> <code language="C">
void NextHigher(int a[], int size)
{
	int i=size-2;
	int rightmax= a[size-1];
	while(i&gt;0)
	{
		if(a[i]&gt;a[i-1])
		{
			rightmax=a[i];
			printf(&quot;%d  &quot;,a[i]);
		}
		else if(rightmax&gt;a[i])
		{
			printf(&quot;%d  &quot;,a[i]);
		}
		else
		{
			rightmax = a[i];
		}
		i--;
	}
}
</code> </pre>
<p>print Next Greater Element in revers order</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4083">
        <div id="dsq-comment-header-4083" class="dsq-comment-header">
            <cite id="dsq-cite-4083">
                <span id="dsq-author-user-4083">A*</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4083" class="dsq-comment-body">
            <div id="dsq-comment-message-4083" class="dsq-comment-message"><p>void NextHigher(int a[],int size)<br />
{<br />
	int i=size-2;<br />
	int rightmax= a[size-1];<br />
	while(i>=0)<br />
	{<br />
		if(a[i]<a> %d&#8221;,a[i],a[i+1]);<br />
		}<br />
		else if(rightmax>a[i])<br />
		{<br />
			printf(&#8220;\n %d  -> %d&#8221;,a[i],rightmax);<br />
		}<br />
		else<br />
		{<br />
			rightmax = a[i];<br />
		}<br />
		i&#8211;;<br />
	}<br />
	printf(&#8220;\n\n&#8221;);<br />
}</p>
<p> please comment&#8230;.</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4047">
        <div id="dsq-comment-header-4047" class="dsq-comment-header">
            <cite id="dsq-cite-4047">
                <span id="dsq-author-user-4047">abhishek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4047" class="dsq-comment-body">
            <div id="dsq-comment-message-4047" class="dsq-comment-message"><p>I think 2nd algo does not have O(n) but it would be o(n^2) as there is one more loop inside it for popping element from stack.<br />
Please suggest</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4022">
        <div id="dsq-comment-header-4022" class="dsq-comment-header">
            <cite id="dsq-cite-4022">
                <span id="dsq-author-user-4022">anonmous</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4022" class="dsq-comment-body">
            <div id="dsq-comment-message-4022" class="dsq-comment-message"><p>hi guys,<br />
i have tried this ques. without using stack.<br />
and i think worst time complexity will be for this O(N) and space complexity O(N), hav a look a my code.</p>
<pre> <code language="CPP">
#include&lt;iostream&gt;
#define N 4

using namespace std;

int main()
{
  int a[N]={3, 11, 62, 33};
  int maxindex[N];
  maxindex[N-1]=-1;
  for(int i=N-2;i&gt;=0;i--)
  {
    if(a[i]&lt;a[i+1])
    {
        maxindex[i]=i+1;
        continue;
    }
    int j=i+1;
    while(1)
    {
      if(maxindex[j]!=-1)
      {
        if(a[i]&lt;a[maxindex[j]])
        {
          maxindex[i]=maxindex[j];
          break;
        }
        else
           j=maxindex[j];
      }
      else
      {
        maxindex[i]=-1;
        break;
      }
    }
  }
  for(int i=0;i&lt;N;i++)
    if(maxindex[i]==-1)
      cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;&lt;&lt;-1&lt;&lt;&quot;\n&quot;;
    else
      cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;&lt;&lt;a[maxindex[i]]&lt;&lt;&quot;\n&quot;;
  system(&quot;pause&quot;);
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3928">
        <div id="dsq-comment-header-3928" class="dsq-comment-header">
            <cite id="dsq-cite-3928">
                <span id="dsq-author-user-3928">Prozac</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3928" class="dsq-comment-body">
            <div id="dsq-comment-message-3928" class="dsq-comment-message"><p>Interesting question.. Very nice stack implementation</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-3706">
        <div id="dsq-comment-header-3706" class="dsq-comment-header">
            <cite id="dsq-cite-3706">
                <span id="dsq-author-user-3706">Abhi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3706" class="dsq-comment-body">
            <div id="dsq-comment-message-3706" class="dsq-comment-message"><p>Though the stack method used reduces the time complexity from O(n^2) to O(n), but is&#8217;t the space requirement for stack implementation an overhead???</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-3708">
        <div id="dsq-comment-header-3708" class="dsq-comment-header">
            <cite id="dsq-cite-3708">
                <span id="dsq-author-user-3708">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3708" class="dsq-comment-body">
            <div id="dsq-comment-message-3708" class="dsq-comment-message"><p>yes, there is a trade-off between space and time, but time complexity improvement from O(n^n) to O(n) is important for any problem. We use some auxiliary space to improve time complexity in many standard algos also.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-3610">
        <div id="dsq-comment-header-3610" class="dsq-comment-header">
            <cite id="dsq-cite-3610">
                <span id="dsq-author-user-3610">bhaskar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3610" class="dsq-comment-body">
            <div id="dsq-comment-message-3610" class="dsq-comment-message"><p>Hi,</p>
<p>  I did not read through the whole post but it seems a simple right to left traversal keeping track of the prevNGE (max of all visited elements), prevElement and currElement will solve this problem. Please correct me if I am wrong.</p>
<pre> <code language="C">
arr1 /* original array */
arr2 /* for each element contains the NGE */

prevNGE = -1;
arr2[n-1] = prevNGE;
prevElement = arr1[n-1];

for (idx = n-2; idx &gt;=0; idx--)
{  curElement = arr1[idx];
   if (prevElement &gt; curElement)
       arr2[idx] = prevElement;
   else if (prevNGE &gt; curElement)
       arr2[idx] = prevNGE;
   else
       arr2[idx] = -1;

  if (prevElement &gt; prevNGE)
    prevNGE = prevElement;

  prevElement = curElement;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-3611">
        <div id="dsq-comment-header-3611" class="dsq-comment-header">
            <cite id="dsq-cite-3611">
                <span id="dsq-author-user-3611">bhaskar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3611" class="dsq-comment-body">
            <div id="dsq-comment-message-3611" class="dsq-comment-message"><p>ok this simple approach will not work..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-3624">
        <div id="dsq-comment-header-3624" class="dsq-comment-header">
            <cite id="dsq-cite-3624">
                <span id="dsq-author-user-3624">Jing</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3624" class="dsq-comment-body">
            <div id="dsq-comment-message-3624" class="dsq-comment-message"><p>I did the same thing in my reply. Why doesn&#8217;t it work?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3599">
        <div id="dsq-comment-header-3599" class="dsq-comment-header">
            <cite id="dsq-cite-3599">
                <span id="dsq-author-user-3599">slimshady</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3599" class="dsq-comment-body">
            <div id="dsq-comment-message-3599" class="dsq-comment-message"><p>this was a really good problem.. might look easy at first go.. but it is subtly difficult.. thanks for the stack solution.. btw why dont you guys use higher level prog lang like java/C# ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-kapil-bari odd alt thread-odd thread-alt depth-1" id="dsq-comment-3591">
        <div id="dsq-comment-header-3591" class="dsq-comment-header">
            <cite id="dsq-cite-3591">
                <span id="dsq-author-user-3591">Kapil Bari</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3591" class="dsq-comment-body">
            <div id="dsq-comment-message-3591" class="dsq-comment-message"><p>Stack algorithm failing for [3, 11, 62, 33]</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-3592">
        <div id="dsq-comment-header-3592" class="dsq-comment-header">
            <cite id="dsq-cite-3592">
                <span id="dsq-author-user-3592">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3592" class="dsq-comment-body">
            <div id="dsq-comment-message-3592" class="dsq-comment-message"><p>@Kapil Bari: Please take a closer look at the problem statement. It says &#8220;The Next greater Element for an element x is the first greater element on the right side of x in array&#8221;</p>
<p>So following output is correct.</p>
<p>3 &#8211;> 11<br />
11 &#8211;> 62<br />
33 &#8211;> -1<br />
62 &#8211;> -1</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kapil-bari odd alt depth-3" id="dsq-comment-3593">
        <div id="dsq-comment-header-3593" class="dsq-comment-header">
            <cite id="dsq-cite-3593">
                <span id="dsq-author-user-3593">Kapil Bari</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3593" class="dsq-comment-body">
            <div id="dsq-comment-message-3593" class="dsq-comment-message"><p>Oh, I thought NGE as the first greater element in the counting sequence and not the first greater element in the right side array.</p>
<p>The algorithm is correct for &#8216;first greater element in the right side array&#8217;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3590">
        <div id="dsq-comment-header-3590" class="dsq-comment-header">
            <cite id="dsq-cite-3590">
                <span id="dsq-author-user-3590">Kapil Bari</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3590" class="dsq-comment-body">
            <div id="dsq-comment-message-3590" class="dsq-comment-message"><p>For this input [3, 11, 62, 33] the output should be [11,33,-1,-1] but the stack algorithm giving it as </p>
<p> 3 &#8211;&gt; 11<br />
 11 &#8211;&gt; 62<br />
 33 &#8211;&gt; -1<br />
 62 &#8211;&gt; -1</p>
<p>which is wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-3872">
        <div id="dsq-comment-header-3872" class="dsq-comment-header">
            <cite id="dsq-cite-3872">
                <span id="dsq-author-user-3872">anonymous</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3872" class="dsq-comment-body">
            <div id="dsq-comment-message-3872" class="dsq-comment-message"><p>Why this thumbs down? It seems a correct input for which the output is WRONG!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-3" id="dsq-comment-3873">
        <div id="dsq-comment-header-3873" class="dsq-comment-header">
            <cite id="dsq-cite-3873">
                <span id="dsq-author-user-3873">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3873" class="dsq-comment-body">
            <div id="dsq-comment-message-3873" class="dsq-comment-message"><p>See below comments</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-3587">
        <div id="dsq-comment-header-3587" class="dsq-comment-header">
            <cite id="dsq-cite-3587">
                <span id="dsq-author-user-3587">Arunav</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3587" class="dsq-comment-body">
            <div id="dsq-comment-message-3587" class="dsq-comment-message"><p>I think rather than a stack if we put the numbers in a queue while traversing and pop from the front, we get the output in the correct order.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-3600">
        <div id="dsq-comment-header-3600" class="dsq-comment-header">
            <cite id="dsq-cite-3600">
                <span id="dsq-author-user-3600">slimshady</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3600" class="dsq-comment-body">
            <div id="dsq-comment-message-3600" class="dsq-comment-message"><p>that is correct.. i implemented using queue and it works just fine..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep odd alt depth-3" id="dsq-comment-3632">
        <div id="dsq-comment-header-3632" class="dsq-comment-header">
            <cite id="dsq-cite-3632">
                <span id="dsq-author-user-3632">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3632" class="dsq-comment-body">
            <div id="dsq-comment-message-3632" class="dsq-comment-message"><p>@Arunav and @slimshady: Could you please provide code for the same.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-slimshady even depth-4" id="dsq-comment-3634">
        <div id="dsq-comment-header-3634" class="dsq-comment-header">
            <cite id="dsq-cite-3634">
                <span id="dsq-author-user-3634">slimshady</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3634" class="dsq-comment-body">
            <div id="dsq-comment-message-3634" class="dsq-comment-message"><pre> <code language="Java">
{
        private static int[] arr;
        private static int SIZE;

        public static void run()
        {
            arr = new[] {11, 3, 13, 21};
            SIZE = arr.Length;
            printNGE();
        }

        private static void printNGE()
        {
            var queue = new Queue();
            int element;
            int next;

            queue.Enqueue(arr[0]); // to start .. push first element into array

            //stack always holds element data.. the data which we compare with next element

            for (int i = 1; i  0)
                {
                    element = queue.Dequeue();

                    while (element  {1}&quot;, element, next));
                        if (queue.Count == 0)
                            break;
                        element = queue.Dequeue();
                    }

                    if (element &gt; next)
                    {
                        queue.Enqueue(element); // since element was bigger push that into stack for future match
                    }
                }

                queue.Enqueue(next); //push next .. so that next becomes element for next round.
            }

            while (queue.Count &gt; 0) // remaning non matched data elements
            {
                Console.WriteLine(string.Format(&quot;{0} --&gt; {1}&quot;, queue.Dequeue(), -1));
            }
        }
    }
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-5" id="dsq-comment-4014">
        <div id="dsq-comment-header-4014" class="dsq-comment-header">
            <cite id="dsq-cite-4014">
http://www.yahoo.com/                <span id="dsq-author-user-4014">Denisha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4014" class="dsq-comment-body">
            <div id="dsq-comment-message-4014" class="dsq-comment-message"><p>Hey, good to find soenome who agrees with me. GMTA.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-3603">
        <div id="dsq-comment-header-3603" class="dsq-comment-header">
            <cite id="dsq-cite-3603">
                <span id="dsq-author-user-3603">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3603" class="dsq-comment-body">
            <div id="dsq-comment-message-3603" class="dsq-comment-message"><p>@Arunav and @slimshady: Please provide the code or algo to do same using queue.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-3586">
        <div id="dsq-comment-header-3586" class="dsq-comment-header">
            <cite id="dsq-cite-3586">
                <span id="dsq-author-user-3586">Jing</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3586" class="dsq-comment-body">
            <div id="dsq-comment-message-3586" class="dsq-comment-message"><p>I think there is another way to look at the stack approach, which may be more straightforward to some people (like me):</p>
<p>Suppose A is the array, G[i] is the next greater element for A[i].</p>
<pre> <code language="C">
G[n-1]=-1;
for i = n-2 to 0
    if(A[i]&gt;A[i+1])
        if(G[i+1]==-1)
            G[i]=-1;
        else
            G[i]=G[i+1]&gt;A[i]?G[i+1]:-1;
    else if(A[i]==A[i+1])
        G[i]=G[i+1];
    else
        G[i]=A[i+1];</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4599">
        <div id="dsq-comment-header-4599" class="dsq-comment-header">
            <cite id="dsq-cite-4599">
                <span id="dsq-author-user-4599">slimboy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4599" class="dsq-comment-body">
            <div id="dsq-comment-message-4599" class="dsq-comment-message"><p>Hey this is a nice solution. runs in O(n)</p>
<p>It would be great if u wrote down what u did</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-30097">
        <div id="dsq-comment-header-30097" class="dsq-comment-header">
            <cite id="dsq-cite-30097">
                <span id="dsq-author-user-30097">Vinod</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30097" class="dsq-comment-body">
            <div id="dsq-comment-message-30097" class="dsq-comment-message"><p>@Jing.. Check for the array set = {7,5,6,8}. According to your algo outcome would be<br />
G={-1,6,8,-1} and which is incorrect.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3584">
        <div id="dsq-comment-header-3584" class="dsq-comment-header">
            <cite id="dsq-cite-3584">
                <span id="dsq-author-user-3584">ss</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3584" class="dsq-comment-body">
            <div id="dsq-comment-message-3584" class="dsq-comment-message"><p>hey ppl im facing problem understanding the question.According to the second example for the array [13,7,6,12], NGE of 7 and 6 is 12.That means we need to find the next greater element on the right side of an array.Going by this logic in example 1 for an array [4,5,2,25] NGE of 5 should be 25 which is given as -1.so what is the reason for discrepancies.plz help me out.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-3585">
        <div id="dsq-comment-header-3585" class="dsq-comment-header">
            <cite id="dsq-cite-3585">
                <span id="dsq-author-user-3585">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3585" class="dsq-comment-body">
            <div id="dsq-comment-message-3585" class="dsq-comment-message"><p>@ss: There was a typo in the post and it was corrected as pointed by Ravichandra .  Looks like you have an old version of the post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3581">
        <div id="dsq-comment-header-3581" class="dsq-comment-header">
            <cite id="dsq-cite-3581">
                <span id="dsq-author-user-3581">sharat04</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3581" class="dsq-comment-body">
            <div id="dsq-comment-message-3581" class="dsq-comment-message"><p>Hi Geeks,</p>
<p>The stack algo is not clearly explained. For example there is no mention of pushing each new element to the stack after the loop in step 2 . </p>
<p>Hard to understand.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-3582">
        <div id="dsq-comment-header-3582" class="dsq-comment-header">
            <cite id="dsq-cite-3582">
                <span id="dsq-author-user-3582">sharat04</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3582" class="dsq-comment-body">
            <div id="dsq-comment-message-3582" class="dsq-comment-message"><p>comments in the code are much better.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3576">
        <div id="dsq-comment-header-3576" class="dsq-comment-header">
            <cite id="dsq-cite-3576">
                <span id="dsq-author-user-3576">rajesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3576" class="dsq-comment-body">
            <div id="dsq-comment-message-3576" class="dsq-comment-message"><p>11 &#8211;&gt; 13<br />
 13 &#8211;&gt; 21<br />
 3 &#8211;&gt; -1<br />
 21 &#8211;&gt; -1</p>
<p>Can any body Explain this case pls i cant get it </p>
<p>Why 3 &#8211;&gt; -1 while there is 21 which is the greater element</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-3577">
        <div id="dsq-comment-header-3577" class="dsq-comment-header">
            <cite id="dsq-cite-3577">
                <span id="dsq-author-user-3577">Ravichandra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3577" class="dsq-comment-body">
            <div id="dsq-comment-message-3577" class="dsq-comment-message"><p>because in the input array [11,13,21,3] 3 is right most element.<br />
&gt;&gt;For any array, rightmost element always has next greater element as -1.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3569">
        <div id="dsq-comment-header-3569" class="dsq-comment-header">
            <cite id="dsq-cite-3569">
                <span id="dsq-author-user-3569">Ravichandra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3569" class="dsq-comment-body">
            <div id="dsq-comment-message-3569" class="dsq-comment-message"><p>in the first example array [4,5,2,25]</p>
<p>I think the next greater element (NGE) for 5 is 25. in the post it is mentioned -1. correct me if I am wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-3570">
        <div id="dsq-comment-header-3570" class="dsq-comment-header">
            <cite id="dsq-cite-3570">
                <span id="dsq-author-user-3570">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3570" class="dsq-comment-body">
            <div id="dsq-comment-message-3570" class="dsq-comment-message"><p>@Ravichandra: Thanks for pointing this out.  We have corrected it.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3562">
        <div id="dsq-comment-header-3562" class="dsq-comment-header">
            <cite id="dsq-cite-3562">
                <span id="dsq-author-user-3562">masetup</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3562" class="dsq-comment-body">
            <div id="dsq-comment-message-3562" class="dsq-comment-message"><p>We could do this in O(n) time and O(1) space if we don&#8217;t care the output sequence, in fact the sequence of output is messed even for the stack implementation.</p>
<p>	public static void printNextGreater(int[] array) {<br />
		if (array == null || array.length == 0) return;<br />
		System.out.println(array[array.length-1] + &quot; -&gt; &quot; + -1);<br />
		int max = array[array.length &#8211; 1];</p>
<p>		for (int i = array.length &#8211; 2; i &gt;= 0; i&#8211;) {<br />
			if (array[i] &gt;= max) {<br />
				max = array[i];<br />
				System.out.println(array[i] + &quot; -&gt; &quot; + -1);<br />
			} else<br />
				System.out.println(array[i] + &quot; -&gt; &quot; + max);<br />
		}<br />
	}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep odd alt depth-2" id="dsq-comment-3563">
        <div id="dsq-comment-header-3563" class="dsq-comment-header">
            <cite id="dsq-cite-3563">
                <span id="dsq-author-user-3563">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3563" class="dsq-comment-body">
            <div id="dsq-comment-message-3563" class="dsq-comment-message"><p>@masetup: I think, the approach suggested by you prints the maximum greater element on right side of an element, but the question asks for first greater element. For example, following program prints.</p>
<p>3 -> -1<br />
21 -> -1<br />
13 -> 21<br />
11 -> 21</p>
<p>For 11, the next greater element should be 13</p>
<pre> <code language="Java">class Test {
public static void printNextGreater(int[] array) {
    if (array == null || array.length == 0) return;
    System.out.println(array[array.length-1] + &quot; -&gt; &quot; + -1);
    int max = array[array.length - 1];
 
    for (int i = array.length - 2; i &gt;= 0; i--) {
        if (array[i] &gt;= max) {
            max = array[i];
            System.out.println(array[i] + &quot; -&gt; &quot; + -1);
        } else
            System.out.println(array[i] + &quot; -&gt; &quot; + max);
    }
}
 
public static void main(String args[]) {
  int arr[] ={11, 13, 21, 3};
  printNextGreater(arr);
}
}</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-3564">
        <div id="dsq-comment-header-3564" class="dsq-comment-header">
            <cite id="dsq-cite-3564">
                <span id="dsq-author-user-3564">masetup</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3564" class="dsq-comment-body">
            <div id="dsq-comment-message-3564" class="dsq-comment-message"><p>Hi Sandeep,</p>
<p>you are totally correct.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/next-greater-element/';
var disqus_identifier = '8405 http://geeksforgeeks.org/?p=8405';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Next Greater Element";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.257 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:23:34 -->

<!-- Compression = gzip -->
<!-- super cache -->