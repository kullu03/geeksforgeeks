<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Maximum of all subarrays of size k (Added a O(n) method) - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Maximum of all subarrays of size k (Added a O(n) method) - GeeksforGeeks" />
<meta property="og:description" content="Given an array and an integer k, find the maximum for each and every contiguous subarray of size k. Examples: Input : arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6} k = 3 Output : 3 3 4 5 5 5 6 Input : arr[] = {8, 5, 10, 7, 9, 4, &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Queue" />
<meta property="article:tag" content="Stack-Queue" />
<meta property="article:tag" content="StackAndQueue" />
<meta property="article:section" content="Arrays" />
<meta property="article:published_time" content="2011-05-27T12:05:56+00:00" />
<meta property="article:modified_time" content="2014-04-28T12:38:21+00:00" />
<meta property="og:updated_time" content="2014-04-28T12:38:21+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.475 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110853 121.242.198.2';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Maximum of all subarrays of size k (Added a O(n) method)</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given an array and an integer k, find the maximum for each and every contiguous subarray of size k.<span id="more-11306"></span></p>
<p>Examples:</p>
<p>Input :<br />
arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6}<br />
k = 3<br />
Output :<br />
3 3 4 5 5 5 6</p>
<p>Input :<br />
arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13}<br />
k = 4<br />
Output :<br />
10 10 10 15 15 90 90</p>
<p><strong>Method 1 (Simple)</strong><br />
Run two loops. In the outer loop, take all subarrays of size k.  In the inner loop, get the maximum of the current subarray.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;

void printKMax(int arr[], int n, int k)
{
    int j, max;

    for (int i = 0; i &lt;= n-k; i++)
    {
        max = arr[i];

        for (j = 1; j &lt; k; j++)
        {
            if (arr[i+j] &gt; max)
               max = arr[i+j];
        }
        printf(&quot;%d &quot;, max);
    }
}


int main()
{
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 3;
    printKMax(arr, n, k);
    return 0;
}</pre>
<p>Time Complexity: The outer loop runs n-k+1 times and the inner loop runs k times for every iteration of outer loop. So time complexity is O((n-k+1)*k) which can also be written as O(nk).</p>
<p></br><br />
<strong>Method 2 (Use Self-Balancing BST)</strong><br />
1) Pick first k elements and create a Self-Balancing Binary Search Tree (BST) of size k.<br />
2) Run a loop for i = 0 to n &#8211; k<br />
&#8230;..a) Get the maximum element from the BST, and print it.<br />
&#8230;..b) Search for arr[i] in the BST and delete it from the BST.<br />
&#8230;..c) Insert arr[i+k] into the BST.</p>
<p>Time Complexity: Time Complexity of step 1 is O(kLogk). Time Complexity of steps 2(a), 2(b) and 2(c) is O(Logk). Since steps 2(a), 2(b) and 2(c) are in a loop that runs n-k+1 times, time complexity of the complete algorithm is O(kLogk + (n-k+1)*Logk) which can also be written as O(nLogk).</p>
<p></br><br />
<strong>Method 3 (A O(n) method: use Dequeue)</strong><br />
We create a <a href="http://en.wikipedia.org/wiki/Double-ended_queue" target="_blank">Dequeue</a>, <em>Qi </em>of capacity k, that stores only useful elements of current window of k elements. An element is useful if it is in current window and is greater than all other elements on left side of it in current window.  We process all array elements one by one and maintain <em>Qi </em>to contain useful elements of current window and these useful elements are maintained in sorted order. The element at front of the <em>Qi </em>is the largest and element at rear of <em>Qi </em>is the smallest of current window.  Thanks to <a href="http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/#comment-10874">Aashish </a>for suggesting this method.</p>
<p>Following is C++ implementation of this method.</p>
<pre class="brush: cpp; highlight: [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]; title: ; notranslate" title="">
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;

// A Dequeue (Double ended queue) based method for printing maixmum element of
// all subarrays of size k
void printKMax(int arr[], int n, int k)
{
    // Create a Double Ended Queue, Qi that will store indexes of array elements
    // The queue will store indexes of useful elements in every window and it will
    // maintain decreasing order of values from front to rear in Qi, i.e., 
    // arr[Qi.front[]] to arr[Qi.rear()] are sorted in decreasing order
    std::deque&lt;int&gt;  Qi(k);

    /* Process first k (or first window) elements of array */
    int i;
    for (i = 0; i &lt; k; ++i)
    {
        // For very element, the previous smaller elements are useless so
        // remove them from Qi
        while ( (!Qi.empty()) &amp;&amp; arr[i] &gt;= arr[Qi.back()])
            Qi.pop_back();  // Remove from rear

        // Add new element at rear of queue
        Qi.push_back(i);
    }

    // Process rest of the elements, i.e., from arr[k] to arr[n-1]
    for ( ; i &lt; n; ++i)
    {
        // The element at the front of the queue is the largest element of
        // previous window, so print it
        cout &lt;&lt; arr[Qi.front()] &lt;&lt; &quot; &quot;;

        // Remove the elements which are out of this window
        while ( (!Qi.empty()) &amp;&amp; Qi.front() &lt;= i - k)
            Qi.pop_front();  // Remove from front of queue

        // Remove all elements smaller than the currently
        // being added element (remove useless elements)
        while ( (!Qi.empty()) &amp;&amp; arr[i] &gt;= arr[Qi.back()])
            Qi.pop_back();

         // Add current element at the rear of Qi
        Qi.push_back(i);
    }

    // Print the maximum element of last window
    cout &lt;&lt; arr[Qi.front()];
}

// Driver program to test above functions
int main()
{
    int arr[] = {12, 1, 78, 90, 57, 89, 56};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 3;
    printKMax(arr, n, k);
    return 0;
}
</pre>
<p>Output:
<pre>78 90 90 90 89</pre>
<p>Time Complexity: O(n). It seems more than O(n) at first look.  If we take a closer look, we can observe that every element of array is added and removed at most once. So there are total 2n operations.<br />
Auxiliary Space: O(k)</p>
<p>Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/" title="K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)">K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)</a></li><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/" title="K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1">K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1</a></li><li><a href="http://www.geeksforgeeks.org/time-complexity-insertion-sort-inversions/" title="Time complexity of insertion sort when there are O(n) inversions?">Time complexity of insertion sort when there are O(n) inversions?</a></li><li><a href="http://www.geeksforgeeks.org/check-two-given-sets-disjoint/" title="How to check if two given sets are disjoint?">How to check if two given sets are disjoint?</a></li><li><a href="http://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/" title="Minimum Number of Platforms Required for a Railway/Bus Station">Minimum Number of Platforms Required for a Railway/Bus Station</a></li><li><a href="http://www.geeksforgeeks.org/given-two-sorted-arrays-number-x-find-pair-whose-sum-closest-x/" title="Find the closest pair from two sorted arrays">Find the closest pair from two sorted arrays</a></li><li><a href="http://www.geeksforgeeks.org/print-elements-sorted-order-row-column-wise-sorted-matrix/" title="Print all elements in sorted order from row and column wise sorted matrix">Print all elements in sorted order from row and column wise sorted matrix</a></li><li><a href="http://www.geeksforgeeks.org/length-largest-subarray-contiguous-elements-set-1/" title="Length of the largest subarray with contiguous elements | Set 1">Length of the largest subarray with contiguous elements | Set 1</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/queue/" rel="tag">Queue</a>, <a href="http://www.geeksforgeeks.org/tag/stack-queue/" rel="tag">Stack-Queue</a>, <a href="http://www.geeksforgeeks.org/tag/stackandqueue/" rel="tag">StackAndQueue</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fmaximum-of-all-subarrays-of-size-k%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/" data-text="Maximum of all subarrays of size k (Added a O(n) method)" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34482">
        <div id="dsq-comment-header-34482" class="dsq-comment-header">
            <cite id="dsq-cite-34482">
                <span id="dsq-author-user-34482">Rohit Sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34482" class="dsq-comment-body">
            <div id="dsq-comment-message-34482" class="dsq-comment-message"><p>//here is simple program with time complexity-0(n)</p>
<p>#include</p>
<p>void print_k_max(int [],int,int);</p>
<p>int maximum(int,int);</p>
<p>int main()</p>
<p>{</p>
<p>	int a[100],n,k;</p>
<p>	printf(&#8220;nEnter the value of n :&#8221;);</p>
<p>	scanf(&#8220;%d&#8221;,&amp;n);</p>
<p>	printf(&#8220;nEnter the elements :n&#8221;);</p>
<p>	for(int i=0;i&lt;n;i++)</p>
<p>	 scanf(&quot;%d&quot;,&amp;a[i]);</p>
<p>	printf(&quot;nEnter the value of k :&quot;);</p>
<p>	scanf(&quot;%d&quot;,&amp;k);</p>
<p>	print_k_max(a,n,k);</p>
<p>	printf(&quot;nThe maximum of all subarray of k :n&quot;);</p>
<p>	for(int i=0;i&lt;n-k+1;i++)</p>
<p>	 printf(&quot;%d &quot;,a[i]);</p>
<p>	return 0;</p>
<p>}</p>
<p>void print_k_max(int a[],int n,int k)</p>
<p>{</p>
<p>	int max=a[0],l=0;</p>
<p>	for(int i=0;i max)</p>
<p>		 max=a[i];</p>
<p>	}</p>
<p>	a[l++]=max;</p>
<p>	for(int i=k;i y)</p>
<p>	 return x;</p>
<p>	else </p>
<p>	 return y;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34254">
        <div id="dsq-comment-header-34254" class="dsq-comment-header">
            <cite id="dsq-cite-34254">
http://arungupta.co.in/blog                <span id="dsq-author-user-34254">ARUN GUPTA</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34254" class="dsq-comment-body">
            <div id="dsq-comment-message-34254" class="dsq-comment-message"><p>I think we can do this with HEAP too, Self-balancing tree have extra burden, where HEAP don&#8217;t what you suggest?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-34150">
        <div id="dsq-comment-header-34150" class="dsq-comment-header">
            <cite id="dsq-cite-34150">
                <span id="dsq-author-user-34150">Vikrant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34150" class="dsq-comment-body">
            <div id="dsq-comment-message-34150" class="dsq-comment-message"><p>java implementation</p>
<p><a href="http://ideone.com/83yTvU" rel="nofollow">http://ideone.com/83yTvU</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32792">
        <div id="dsq-comment-header-32792" class="dsq-comment-header">
            <cite id="dsq-cite-32792">
http://wadjeravi.wordpress.com                <span id="dsq-author-user-32792">Wadje Ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32792" class="dsq-comment-body">
            <div id="dsq-comment-message-32792" class="dsq-comment-message"><p>// Question:-Find maximum for every window of size k in an array.</p>
<p>/*ALGORITHM</p>
<p>Assumptions SIZE OF ARRAY=n , SUBARRAY SIZE=k , OUTPUT NUMBERS=(n-w+1)</p>
<p>1)Traverse from LEFT TO RIGHT after every k&#8217;th element (k%3==0) do max=0 and save max element in LEFT_TO_RIGHT[] array in each iteration.</p>
<p>2)Do the same in RIGHT TO LEFT Traversal and fill RIGHT_TO_LEFT[] array with max elements.</p>
<p>3)Start a for loop to print output start=0 end=n-k(i. e. the number of outputs to be printed). In this for loop compare as following</p>
<p>if max_val[] is the array to be printed in the for loop compare as following</p>
<p>max_val[index] = max(RL[index], LR[index+k-1]); */</p>
<p>// This algorithm works with any type of array such as ascending,descending or random.</p>
<p>//Time complexity of this algorithm is O(n)</p>
<p>//Extra space used is 2 array used lr[n] and rl[n] </p>
<p>#include </p>
<p>#include </p>
<p>int main()</p>
<p>{</p>
<p>    int arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};</p>
<p>    int n = sizeof(arr)/sizeof(arr[0]);</p>
<p>    int k = 3;</p>
<p>    printKMax(arr, n, k);</p>
<p>    return 0;</p>
<p>}</p>
<p>void printKMax(int arr[], int n, int k)</p>
<p>{</p>
<p>    int i,max,count,lr[n],rl[n];</p>
<p>    //int max1[n-k+1];</p>
<p>    max=0;</p>
<p>    count=0;</p>
<p>    //Traverse from left to right</p>
<p>    for(i=0;imax)</p>
<p>        {</p>
<p>            max=arr[i];</p>
<p>            lr[i]=max;</p>
<p>        }</p>
<p>        else</p>
<p>        {</p>
<p>            lr[i]=max;</p>
<p>        }</p>
<p>    }</p>
<p>    //Traverse from right to left</p>
<p>    for(i=(n-1);i&gt;=0;i&#8211;)</p>
<p>    {</p>
<p>        count++;</p>
<p>        if(count%3==0)</p>
<p>        max=0; // making max=0 after each k size subarray</p>
<p>        if(arr[i]&gt;max)</p>
<p>        {</p>
<p>            max=arr[i];</p>
<p>            rl[i]=max;</p>
<p>        }</p>
<p>        else</p>
<p>        {</p>
<p>            rl[i]=max;</p>
<p>        }</p>
<p>    }</p>
<p>    for(i=0;ilr[i+k-1]) // comparison made easy</p>
<p>        {</p>
<p>            //max1[i]=rl[i];</p>
<p>            printf(&#8220;%d&#8221;,rl[i]);</p>
<p>        }</p>
<p>        else</p>
<p>        {</p>
<p>            //max1[i]=lr[i+k-1];</p>
<p>            printf(&#8220;%d&#8221;,lr[i+k-1]);</p>
<p>        }</p>
<p>    }</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30134">
        <div id="dsq-comment-header-30134" class="dsq-comment-header">
            <cite id="dsq-cite-30134">
                <span id="dsq-author-user-30134">wgpshashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30134" class="dsq-comment-body">
            <div id="dsq-comment-message-30134" class="dsq-comment-message"><p>I believe 2nd method wont work as described but we can modify that as written  below </p>
<p>Create a AVL/RB  Tree of size k . it will take O(klogk) in this every node will have counter associated with it on the basis of which we will decided which element to remove from tree , here we need to decide on the basis of two things ?<br />
for i=1 to n elements<br />
 1. we will always remove the element whose counter value becomes equal to           k , it wont make any sense to keep it for remaining window of size k .<br />
2. else if counter of all elements are equals we will always discard the minimum from tree of window.<br />
and finally insert the new element from array e.g i+kth-1 element in tree<br />
So here we doing two operation deletion and insertion , both takes O(logn) time in balanced binary search tree like RB or AVL Tree. </p>
<p>so complexity will be O(nlogk) which is better then O(nk) . Obliviously some optimization can be done here . let me know if it fail for any case .</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29707">
        <div id="dsq-comment-header-29707" class="dsq-comment-header">
            <cite id="dsq-cite-29707">
                <span id="dsq-author-user-29707">Shashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29707" class="dsq-comment-body">
            <div id="dsq-comment-message-29707" class="dsq-comment-message"><p>Third method is O(n*k) for worst-case time complexity, not O(n). And you don&#8217;t need a queue to do method 3. Using a queue is just wasting space. This site has some false answers so be careful!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-29067">
        <div id="dsq-comment-header-29067" class="dsq-comment-header">
            <cite id="dsq-cite-29067">
                <span id="dsq-author-user-29067">Ajay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29067" class="dsq-comment-body">
            <div id="dsq-comment-message-29067" class="dsq-comment-message"><p>#include</p>
<p>#include</p>
<p>void printkMax(int arr[],int n, int k)<br />
{<br />
int max,i;<br />
for(i=0;i&lt;k;i++)<br />
     {<br />
     max = arr[i];<br />
     if(max&lt;arr[i])<br />
     max = arr[i];<br />
     }<br />
     printf(&quot;%dt&quot;,max);<br />
     for(int j = k;j&lt;n;j++)<br />
     {<br />
     if(max&lt;arr[j])<br />
            {<br />
             max=arr[j];<br />
            printf(&quot;%dt&quot;,max);<br />
          }<br />
         else<br />
         printf(&quot;%dt&quot;,max);<br />
     }<br />
}<br />
int main()<br />
{<br />
int arr[] = {12,1,78,90,57,89,56};<br />
int n = sizeof(arr)/sizeof(arr[0]);<br />
int k = 3;<br />
printkMax(arr,n,k);<br />
getchar();<br />
return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28868">
        <div id="dsq-comment-header-28868" class="dsq-comment-header">
            <cite id="dsq-cite-28868">
                <span id="dsq-author-user-28868">asunel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28868" class="dsq-comment-body">
            <div id="dsq-comment-message-28868" class="dsq-comment-message"><p>It can done in O(n) time and without extra space !!</p>
<p>See <a href="http://ajscodeblog.blogspot.in/2013/10/maximum-of-all-subarrays-of-size-k-in.html" rel="nofollow">http://ajscodeblog.blogspot.in/2013/10/maximum-of-all-subarrays-of-size-k-in.html</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-vanathi even thread-even depth-1" id="dsq-comment-25071">
        <div id="dsq-comment-header-25071" class="dsq-comment-header">
            <cite id="dsq-cite-25071">
                <span id="dsq-author-user-25071">vanathi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-25071" class="dsq-comment-body">
            <div id="dsq-comment-message-25071" class="dsq-comment-message"><p>private void maxSubArray(int[] ar,int k){<br />
		int max = ar[0];<br />
		for(int i=1;i&lt;k;i++)<br />
			 if(max &lt; ar[i])<br />
				 max = ar[i];<br />
		System.out.println(max);<br />
		for(int i= k;i&lt;ar.length;i++){<br />
			if(max &lt; ar[i])<br />
				max = ar[i];<br />
			System.out.println(max);<br />
		}<br />
	}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-apurvkagrawal odd alt thread-odd thread-alt depth-1" id="dsq-comment-24922">
        <div id="dsq-comment-header-24922" class="dsq-comment-header">
            <cite id="dsq-cite-24922">
                <span id="dsq-author-user-24922">Apurvkagrawal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24922" class="dsq-comment-body">
            <div id="dsq-comment-message-24922" class="dsq-comment-message"><p>For method 3 : can you tell me how is it O(n) for an sorted array in decreasing order.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-tithonus49 even thread-even depth-1" id="dsq-comment-22949">
        <div id="dsq-comment-header-22949" class="dsq-comment-header">
            <cite id="dsq-cite-22949">
                <span id="dsq-author-user-22949">tithonus49</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22949" class="dsq-comment-body">
            <div id="dsq-comment-message-22949" class="dsq-comment-message"><pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-tithonus49 odd alt thread-odd thread-alt depth-1" id="dsq-comment-22947">
        <div id="dsq-comment-header-22947" class="dsq-comment-header">
            <cite id="dsq-cite-22947">
                <span id="dsq-author-user-22947">tithonus49</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22947" class="dsq-comment-body">
            <div id="dsq-comment-message-22947" class="dsq-comment-message"><p>An Aproach with STL sets..heres the cpp code,</p>
<pre> <code language="C">
/*
#include&lt;cstdio&gt;
#include&lt;set&gt;
using namespace std;

int arr[1000005];
multiset&lt;int&gt; s;
multiset&lt;int&gt;:: iterator j,h;

int func(int a[],int n,int k)
{
    int i,x;
	for(i=0;i&lt;k;i++)
	{
		x=a[i];
		s.insert(x);
	}
	j=s.end();
	j--;
	printf(&quot;%d &quot;,*j);
	
        for(i=k;i&lt;n;i++)
	{
		s.erase(s.find(a[i-k]));
		s.insert(a[i]);
		h=s.end();
		h--;
		printf(&quot;%d &quot;,*h);
	}
}

int main()
{
	int n,k,i;
	scanf(&quot;%d\n&quot;,&amp;n);
	for(i=0;i&lt;n;i++)
	scanf(&quot;%d&quot;,&amp;arr[i]);
	scanf(&quot;%d&quot;,&amp;k);
	func(arr,n,k);
	return 0;
}

 */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-20721">
        <div id="dsq-comment-header-20721" class="dsq-comment-header">
            <cite id="dsq-cite-20721">
                <span id="dsq-author-user-20721">swagato mondal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20721" class="dsq-comment-body">
            <div id="dsq-comment-message-20721" class="dsq-comment-message"><pre> <code language="C">
#include &lt;stdio.h&gt;

int maxint(int a[],int s,int e)
{
     int i,max=0;
     for (i = s; i &lt; e; i++)
      if (max &lt; a[i])
         max = a[i];
  return max;
}

void findmax(int arr[],int k,int n)
{
     int i;
     
  for (i = 0; i&lt; n; i++)
  {
      if(i+k-1&lt;n)
       printf(&quot;%d &quot;,maxint(arr,i,i+k));
     else 
            break;
  }
  

}
 
int main()
{
  int arr[10] = {8,5,10,7,9,4,15,12,90,13};
  findmax(arr, 4, 10);
  getchar();
  return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20708">
        <div id="dsq-comment-header-20708" class="dsq-comment-header">
            <cite id="dsq-cite-20708">
                <span id="dsq-author-user-20708">redredp</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20708" class="dsq-comment-body">
            <div id="dsq-comment-message-20708" class="dsq-comment-message"><p>Your 3rd method is cool, but you made a little mistake at the line :</p>
<p>std::deque&lt;int&gt;  Qi(k);</p>
<p>When you do that, the constructor &#8220;explicit deque(size_type count );&#8221; is called and allocate k elements. Each element is either default-constructed (if your deque is templated on a class), or filled with uninitialized values (if your dequeue is templated on scalar types, like here).</p>
<p>Use this and it will be good :</p>
<p>std::deque&lt;int&gt;  Qi;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-ronny even thread-even depth-1" id="dsq-comment-20579">
        <div id="dsq-comment-header-20579" class="dsq-comment-header">
            <cite id="dsq-cite-20579">
                <span id="dsq-author-user-20579">Ronny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20579" class="dsq-comment-body">
            <div id="dsq-comment-message-20579" class="dsq-comment-message"><p>C code</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;

int front=-1;
int rear=-1;


int isempty()
{
    if(front==-1)
      return 1;
    else
     return 0;
}

void poprear()
{
    rear--;

    if(rear==-1)
     front=-1;
}

void popfront()
{
    front++;
    if(front==rear)
     {
         front=-1;
         rear=-1;
     }
}

void pushback(int dq[],int x)
{
    dq[++rear]=x;

    if(rear==0)
     front=0;
}

void printmax(int arr[],int n,int k)
{

    if (k&lt;=0 || k&gt;n)
        return;

    int dq[k];
    front=-1;
    rear=-1;

    int i;
    for(i=0;i&lt;k;i++)
     {
         while (!isempty() &amp;&amp; arr[i] &gt;= arr[dq[rear]])
                poprear();

         pushback(dq,i);

     }


    for(;i&lt;n;i++)
     {
        printf(&quot;%d &quot;,arr[dq[front]]);

        while(!isempty() &amp;&amp; dq[front]&lt;= i - k)
           popfront();

        while (front != -1 &amp;&amp; arr[i] &gt;= arr[dq[rear]])
            poprear();

        pushback(dq,i);
     }

     printf(&quot;%d &quot;,arr[dq[front]]);
}

int main()
{
    int arr[]={12,1,78,90,57,89,56};
    int n=sizeof(arr)/sizeof(arr[0]);
    int k=3;

    printmax(arr,n,k);

    return 0;
}


</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ronny odd alt depth-2" id="dsq-comment-20585">
        <div id="dsq-comment-header-20585" class="dsq-comment-header">
            <cite id="dsq-cite-20585">
                <span id="dsq-author-user-20585">Ronny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20585" class="dsq-comment-body">
            <div id="dsq-comment-message-20585" class="dsq-comment-message"><p>@all<br />
what is wrong in the above c code</p>
<p>it produces 78 90 90 90 56 as output<br />
but the output should be 78 90 90 90 89</p>
<p>Please anyone help, I have coded in C (without using STL) according to the C++ version posted above</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ronny even depth-3" id="dsq-comment-20587">
        <div id="dsq-comment-header-20587" class="dsq-comment-header">
            <cite id="dsq-cite-20587">
                <span id="dsq-author-user-20587">Ronny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20587" class="dsq-comment-body">
            <div id="dsq-comment-message-20587" class="dsq-comment-message"><p>Just replace the popfront method by</p>
<p>void popfront()<br />
{<br />
    front++;<br />
    if(front==rear+1)<br />
     {<br />
         front=-1;<br />
         rear=-1;<br />
     }<br />
}</p>
<p>It works fine</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20168">
        <div id="dsq-comment-header-20168" class="dsq-comment-header">
            <cite id="dsq-cite-20168">
                <span id="dsq-author-user-20168">crazy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20168" class="dsq-comment-body">
            <div id="dsq-comment-message-20168" class="dsq-comment-message"><pre> <code language="C">#include&lt;stdio.h&gt;
int main()
{
    int n,k,i,pos=0,max=0,r;
    scanf(&quot;%d&quot;,&amp;n);
    int a[n];
    for(i=0;i&lt;n;i++)
     scanf(&quot;%d&quot;,&amp;a[i]);
    scanf(&quot;%d&quot;,&amp;k);
    for(i=0;i&lt;k;i++)
    {
        if(a[i]&gt;max)
        {
            max=a[i];
            pos=i;
        }
    }
    printf(&quot;%d &quot;,max);
    for(i=1;i&lt;n-k+1;i++)
    {
        if(i==pos+1)
        {
            max=0;
            for(r=i;r&lt;i+k;r++)
            {
                if(a[r]&gt;max)
                {
                    max=a[r];
                    pos=r;
                }
            }
        }
        else
        {
            if(a[i+k-1]&gt;max)
            {
                max=a[i+k-1];
                pos=i+k-1;
            }
        }
        printf(&quot;%d &quot;,max);
    }
    printf(&quot;\n&quot;);
    return 0;
}</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-19719">
        <div id="dsq-comment-header-19719" class="dsq-comment-header">
            <cite id="dsq-cite-19719">
                <span id="dsq-author-user-19719">Priyanshu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19719" class="dsq-comment-body">
            <div id="dsq-comment-message-19719" class="dsq-comment-message"><p>A similar problem for practice is:</p>
<pre> <code language="C">
/* The AC code for the above problem. */


#include&lt;iostream&gt;
#include&lt;deque&gt;
#include&lt;stdio.h&gt;
using namespace std;
int a[1000006];
int main()
{
    int n,k,m,i,j;
    scanf(&quot;%d&quot;,&amp;n);
    for(i=0;i&lt;n;i++)
    scanf(&quot;%d&quot;,&amp;a[i]);
    scanf(&quot;%d&quot;,&amp;k); //window
    deque&lt;int&gt; dq;
    for(i=0;i&lt;k;i++)
    {
       // cout&lt;&lt;&quot;hello\n&quot;;
        while(!dq.empty() &amp;&amp; a[dq.back()]&lt;=a[i])
        dq.pop_back();
        dq.push_back(i);
    }
   // cout&lt;&lt;dq.size()&lt;&lt;&quot; \n&quot;;
    for(i=k;i&lt;n;i++)
    {
       // cout&lt;&lt;&quot;hello &quot;;
        printf(&quot;%d &quot;,a[dq.front()]);
        while(!dq.empty() &amp;&amp; a[dq.back()]&lt;=a[i])
        dq.pop_back();
        dq.push_back(i);
        while(!dq.empty() &amp;&amp; i-dq.front()+1&gt;k )
        dq.pop_front();
    }
    printf(&quot;%d&quot;,a[dq.front()]);
    return 0;
 
}
 
</code> </pre>
<p>Happy Coding <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-19722">
        <div id="dsq-comment-header-19722" class="dsq-comment-header">
            <cite id="dsq-cite-19722">
                <span id="dsq-author-user-19722">Priyanshu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19722" class="dsq-comment-body">
            <div id="dsq-comment-message-19722" class="dsq-comment-message"><p>The link for the problem is here<br />
<a href="http://www.spoj.com/problems/ARRAYSUB/" rel="nofollow">http://www.spoj.com/problems/ARRAYSUB/</a></p>
<p>HC <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-18612">
        <div id="dsq-comment-header-18612" class="dsq-comment-header">
            <cite id="dsq-cite-18612">
                <span id="dsq-author-user-18612">Sreenivas Doosa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18612" class="dsq-comment-body">
            <div id="dsq-comment-message-18612" class="dsq-comment-message"><p>The following code takes O(n) time with no extra space. Please check. This is based on sliding window concept.</p>
<pre> <code language="C">
void printKMax(int arr[], int n, int k)
{
	// first find the max element of first K elements
    int max = INT_MIN;
	for(int i = 0; i &lt; k; i++) // This loops runs k times. Time complexity: O(k)
	{
		if(arr[i] &gt; max)
			max = arr[i];
	}
	printf(&quot;%d &quot;, max); // printing the max of first k elements i.e. for index 0
	
	for(i = 1; i &lt;= n - k; i++) // This loops runs n-k times. Time complexity: O(n-k)
    {
        if(arr[i + k - 1] &gt; max)
		{
			max = arr[i + k - 1]
		}
        
        printf(&quot;%d &quot;, max);
    }
}
</code> </pre>
<p>The overall complexity of the program is O(k) + O(n-k) = O(n)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-19305">
        <div id="dsq-comment-header-19305" class="dsq-comment-header">
            <cite id="dsq-cite-19305">
                <span id="dsq-author-user-19305">Priyanka K</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19305" class="dsq-comment-body">
            <div id="dsq-comment-message-19305" class="dsq-comment-message"><p>incorrect</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-20589">
        <div id="dsq-comment-header-20589" class="dsq-comment-header">
            <cite id="dsq-cite-20589">
                <span id="dsq-author-user-20589">Sreenivas Doosa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20589" class="dsq-comment-body">
            <div id="dsq-comment-message-20589" class="dsq-comment-message"><p>Yes Priyanka, I agree my solution does not work.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15243">
        <div id="dsq-comment-header-15243" class="dsq-comment-header">
            <cite id="dsq-cite-15243">
                <span id="dsq-author-user-15243">Rediff</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15243" class="dsq-comment-body">
            <div id="dsq-comment-message-15243" class="dsq-comment-message"><p>Can be solved with Min Heap in O(nlogk) = O(n).</p>
<p>Simpler implementation.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-15716">
        <div id="dsq-comment-header-15716" class="dsq-comment-header">
            <cite id="dsq-cite-15716">
                <span id="dsq-author-user-15716">Rediff</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15716" class="dsq-comment-body">
            <div id="dsq-comment-message-15716" class="dsq-comment-message"><p>Sorry, my mistake. Cant be done</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-codinggeek16 odd alt depth-3" id="dsq-comment-20449">
        <div id="dsq-comment-header-20449" class="dsq-comment-header">
            <cite id="dsq-cite-20449">
                <span id="dsq-author-user-20449">codinggeek16</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20449" class="dsq-comment-body">
            <div id="dsq-comment-message-20449" class="dsq-comment-message"><p>It can be. Take another array to store the index in max heap. Max heap node will contains the index of elements only. Each time you go out of window, get the index in the heap and use upHeapify or downHeapify accordingly,</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-34255">
        <div id="dsq-comment-header-34255" class="dsq-comment-header">
            <cite id="dsq-cite-34255">
http://arungupta.co.in/blog                <span id="dsq-author-user-34255">ARUN GUPTA</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34255" class="dsq-comment-body">
            <div id="dsq-comment-message-34255" class="dsq-comment-message"><p>Actually there is no need for the Array, you can modify it in the existing array, and it&#8217;s better in the SB-BST</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-14103">
        <div id="dsq-comment-header-14103" class="dsq-comment-header">
            <cite id="dsq-cite-14103">
                <span id="dsq-author-user-14103">Akhil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14103" class="dsq-comment-body">
            <div id="dsq-comment-message-14103" class="dsq-comment-message"><pre> <code language="C">
/* An O(n) approach using queues */
/* Simple, straight-forward and easy */
#include&lt;stdio.h&gt;

void printMaxSub( int a[], int n, int k)
{
    int q[n],f=0,r=0,i;
    q[r]=a[0];
    for(i=0;i&lt;n;i++)
    {
        //delete smaller elements and insert new element in queue such that
        // queue from f to r contains elements in non decreasing order
        if(q[f]&lt;a[i]) {q[r+1]=a[i];f=r=r+1;}
        else if(q[r]&gt;=a[i]){q[++r]=a[i];}
        else
        {
            while(r&gt;f &amp;&amp; q[r]&lt;a[i]) r--;
            q[++r]=a[i];
        }
        if(i&gt;=k-1)
        {
            //delete element not in the subarray
            if(q[f]==a[i-k]) f++;
            //display the largest element
            printf(&quot;%d &quot;,q[f]);
        }
    } 
}
int main()
{
    int a[] = {1,2,3,1,4,5,2,3,6};
    int n = sizeof(a)/sizeof(a[0]);
    int k = 3;
    printMaxSub(a,n,k);
    getchar();
    return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-14106">
        <div id="dsq-comment-header-14106" class="dsq-comment-header">
            <cite id="dsq-cite-14106">
                <span id="dsq-author-user-14106">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14106" class="dsq-comment-body">
            <div id="dsq-comment-message-14106" class="dsq-comment-message"><p>It seems to be printing incorrect result for 6, 5, 4, 3, 2, 1.  </p>
<p>The output of following code is 6 6 6 6, but it should be 6 5 4 3. Please let me know if I missed anything.</p>
<pre> <code language="C">
/* An O(n) approach using queues */
/* Simple, straight-forward and easy */
#include&lt;stdio.h&gt;

void printMaxSub(int a[], int n, int k)
{
    int q[n], f=0, r=0, i;
    q[r] = a[0];
    for (i=0; i&lt;n; i++)
    {
        // delete smaller elements and insert new element in queue such that
        // queue from f to r contains elements in non decreasing order
        if (q[f] &lt; a[i])
        {
            q[r+1] = a[i];
            f = r = r+1;
        }
        else if (q[r] &gt;= a[i])
        {
            q[++r] = a[i];
        }
        else
        {
            while(r&gt;f &amp;&amp; q[r]&lt;a[i])
                r--;
            q[++r]=a[i];
        }
        if (i &gt;= k-1)
        {
            //delete element not in the subarray
            if (q[f]==a[i-k])
                f++;

            //display the largest element
            printf(&quot;%d &quot;,q[f]);
        }
    }
}
int main()
{
    int a[] = {6, 5, 4, 3, 2, 1};
    int n = sizeof(a)/sizeof(a[0]);
    int k = 3;
    printMaxSub(a,n,k);
    getchar();
    return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-12082">
        <div id="dsq-comment-header-12082" class="dsq-comment-header">
            <cite id="dsq-cite-12082">
                <span id="dsq-author-user-12082">amit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12082" class="dsq-comment-body">
            <div id="dsq-comment-message-12082" class="dsq-comment-message"><p>following code just<br />
1) find the max value in first K elements<br />
2) thereafter for all windows it only checks for element greater than max </p>
<pre> <code language="C">
int findMaxinSubArr( int * a,  int size, int k ){



    if(a==NULL){

        return -1;
    }


    printf(&quot; size of the arrray is :%d and value of K : %d \n&quot;,size,k);
    if(k&lt;=0 || k &gt; size )
    {
        printf(&quot; wrong value of K \n&quot;);
        return -1;
    }

    int max = 0 ;

    int i=0;

    for(i=0;i &lt; k ; i++)
    {
        printf(&quot; %d %d\n&quot;,a[i],max);
        if(a[i] &gt; max)
        {
            max = a[i];
        }
    }

    printf(&quot;max value for the first %d elements is %d\n&quot;, k ,max);
    int j=0;
    for(j=1;j&lt;size-2;j++){

        if(a[j+k-1] &gt; max)
        {
            max = a[j+k-1];

        }

        printf(&quot; Max value: %d\t&quot;,max);
        printf(&quot; interval :%d - %d \n&quot;,j, j+k-1);



    }

    return 0;

}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-akki even depth-2" id="dsq-comment-18557">
        <div id="dsq-comment-header-18557" class="dsq-comment-header">
            <cite id="dsq-cite-18557">
                <span id="dsq-author-user-18557">akki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18557" class="dsq-comment-body">
            <div id="dsq-comment-message-18557" class="dsq-comment-message"><p>Your method will not work if array is sorted in decreasing order.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10874">
        <div id="dsq-comment-header-10874" class="dsq-comment-header">
            <cite id="dsq-cite-10874">
                <span id="dsq-author-user-10874">Aashish Barnwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10874" class="dsq-comment-body">
            <div id="dsq-comment-message-10874" class="dsq-comment-message"><p>A O( N ) approach</p>
<pre> <code language="C">
void SlidingWindow( int arr[], int size, int k )
{
        if ( k &lt;= 0 || k &gt; size )
                return;
 
        int Q[ k ], f, r, i;
 
        f = r = -1;
        
        for( i = 0; i &lt; k; ++i )
        {
                while( f != -1 &amp;&amp; arr[i] &gt;= arr[ Q[r] ] )
                {
                        r--;
                        if( r == -1 )
                                f = -1;
                }
 
                Q[ ++r ] = i;
                if( r == 0 )
                        f = 0;
        }
 
        for( ; i &lt; size; ++i )
        {
                printf( &quot;%d &quot;, arr[ Q[f] ] );
 
                while( f != -1 &amp;&amp; Q[f] &lt;= i - k )
                {
                        f++;
                        if( f == r )
                                f = r = -1;
                }
 
                while( f != -1 &amp;&amp; arr[i] &gt;= arr[ Q[r] ] )
                {
                        r--;
                        if( r == -1 )
                                f = -1;
                }       
 
                Q[ ++r ] = i;
                if( r == 0 )
                        f = 0;  
        }
        printf( &quot;%d&quot;, arr[ Q[f] ] );
}
 
int main()
{
        int arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6};//{8, 5, 10, 7, 9, 4, 15, 12, 90, 13};
        int size = sizeof( arr ) / sizeof( *arr );
 
        SlidingWindow( arr, size, 3 );
 
        return 0;
}
</code> </pre>
<p><a href="https://ideone.com/skDPu" rel="nofollow">https://ideone.com/skDPu</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ronny even depth-2" id="dsq-comment-20588">
        <div id="dsq-comment-header-20588" class="dsq-comment-header">
            <cite id="dsq-cite-20588">
                <span id="dsq-author-user-20588">Ronny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20588" class="dsq-comment-body">
            <div id="dsq-comment-message-20588" class="dsq-comment-message"><p>@aashish<br />
Sir<br />
in the following module<br />
while( f != -1 &#038;&#038; Q[f] <= i &#8211; k )<br />
{<br />
          f++;<br />
          if( f == r )<br />
            f = r = -1;<br />
}</p>
<p>by </p>
<p>if(f==r+1)</p>
<p>Then the code produces correct result.<br />
Anyways thanks for a wonderful approach.<br />
Kudos</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10853">
        <div id="dsq-comment-header-10853" class="dsq-comment-header">
            <cite id="dsq-cite-10853">
                <span id="dsq-author-user-10853">bunty</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10853" class="dsq-comment-body">
            <div id="dsq-comment-message-10853" class="dsq-comment-message"><p>@geeks:<br />
In method 2:<br />
What if there are duplicates in the array ?</p>
<p>Ex: If a[0] is very large element and it appears more than once, then while creating the BST, we have to keep the duplicates. This is because, this element&#8217;s appearances in its sub-array can be max element.<br />
&#8211; While deleting a[i], we must delete first appearing element (in array) of value same as a[i].</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-9363">
        <div id="dsq-comment-header-9363" class="dsq-comment-header">
            <cite id="dsq-cite-9363">
                <span id="dsq-author-user-9363">titan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9363" class="dsq-comment-body">
            <div id="dsq-comment-message-9363" class="dsq-comment-message"><p>A very good solution and explanation using deque is given at<br />
<a href="http://www.leetcode.com/2011/01/sliding-window-maximum.html" rel="nofollow">http://www.leetcode.com/2011/01/sliding-window-maximum.html</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-10603">
        <div id="dsq-comment-header-10603" class="dsq-comment-header">
            <cite id="dsq-cite-10603">
                <span id="dsq-author-user-10603">Hong</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10603" class="dsq-comment-body">
            <div id="dsq-comment-message-10603" class="dsq-comment-message"><p>That solution is not O(n).  Consider the case when all elements are sorted in decreasing order.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-apurvkagrawal even depth-3" id="dsq-comment-24923">
        <div id="dsq-comment-header-24923" class="dsq-comment-header">
            <cite id="dsq-cite-24923">
                <span id="dsq-author-user-24923">Apurvkagrawal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-24923" class="dsq-comment-body">
            <div id="dsq-comment-message-24923" class="dsq-comment-message"><p>true that!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9344">
        <div id="dsq-comment-header-9344" class="dsq-comment-header">
            <cite id="dsq-cite-9344">
                <span id="dsq-author-user-9344">Spock</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9344" class="dsq-comment-body">
            <div id="dsq-comment-message-9344" class="dsq-comment-message"><p>Here is the working code for the BST implementation of the problem.</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

struct node {
       int data;
       struct node *left;
       struct node *right;
};

struct node *newnode(int dat) {
       struct node *newone = malloc(sizeof(struct node));
       newone-&gt;left = NULL;
       newone-&gt;right = NULL;
       newone-&gt;data =  dat;
       return newone;
}

struct node *insert(struct node *root, int dat) {
       if(root == NULL) {
               return newnode(dat);
       }
       if(dat &lt;= root-&gt;data) {
              root-&gt;left = insert(root-&gt;left, dat);
       }
       else if(dat &gt; root-&gt;data) {
            root-&gt;right = insert(root-&gt;right,dat);
       }
       return root;
}

struct node *findmin(struct node *root) {
       if(root -&gt; left == NULL || root == NULL) {
               return root;
       }
       return findmin(root-&gt;left);
}

struct node *deletenode(struct node *root, int x) {
       struct node *temp;
       if(x &gt; root-&gt;data) {
            root-&gt;right = deletenode(root-&gt;right, x);
       }
       else if(x &lt; root-&gt;data) {
            root-&gt;left = deletenode(root-&gt;left,x);
       }
       else {
            if(root-&gt;right &amp;&amp; root-&gt;left) {
                           temp = findmin(root-&gt;right);
                           root-&gt;data = temp-&gt;data;
                           root-&gt;right = deletenode(root-&gt;right, root-&gt;data);
            }
            else if(root-&gt;right == NULL) {
                 root = root-&gt;left;
            }
            else {
                root = root-&gt;right;
            }
       }
       return root;
}

int printmax(struct node *root) {
    if(root == NULL || root-&gt;right == NULL) {
            return (root-&gt;data);
    }
    return printmax(root-&gt;right);
}

int main() {
    int i;
    struct node *root = NULL;
    int n,k;
    printf(&quot;Enter the total number of numbers you want to insert in the array\n&quot;);
    scanf(&quot;%d&quot;, &amp;n);
    int a[n];
    printf(&quot;Enter the numbers\n&quot;);
    for(i = 0; i &lt; n; i++) {
          int x;
          scanf(&quot;%d&quot;, &amp;x);
          a[i] = x;
    }
    printf(&quot;Enter the value of k\n&quot;);
    scanf(&quot;%d&quot;, &amp;k);
    for(i = 0; i &lt; k; i++) {
          root = insert(root,a[i]);
    }
    for(i = 0; i &lt; (n-k); i++) {
          printf(&quot;%d &quot;, printmax(root));
          root = deletenode(root, a[i]);
          root = insert(root,a[i+k]);
    }
    printf(&quot;%d &quot;, printmax(root));
    printf(&quot;\n&quot;);
    system(&quot;pause&quot;);
    return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-9136">
        <div id="dsq-comment-header-9136" class="dsq-comment-header">
            <cite id="dsq-cite-9136">
                <span id="dsq-author-user-9136">joker</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9136" class="dsq-comment-body">
            <div id="dsq-comment-message-9136" class="dsq-comment-message"><p>@ admin : BST is an over kill for this problem.<br />
lots of other solutions possible.<br />
1) segment tree can be used<br />
2) this one also nice solution.[plz include it.]<br />
   <a href="http://shashank7s.blogspot.in/2011/06/given-array-and-integer-k-find-maximum.html" rel="nofollow">http://shashank7s.blogspot.in/2011/06/given-array-and-integer-k-find-maximum.html</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-14180">
        <div id="dsq-comment-header-14180" class="dsq-comment-header">
            <cite id="dsq-cite-14180">
                <span id="dsq-author-user-14180">andrew</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14180" class="dsq-comment-body">
            <div id="dsq-comment-message-14180" class="dsq-comment-message"><p>@ Joker , yeah i liked solution given in link you provided from Cracking The Code </p>
<p>Admin , correct the reference !</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8032">
        <div id="dsq-comment-header-8032" class="dsq-comment-header">
            <cite id="dsq-cite-8032">
                <span id="dsq-author-user-8032">Anil Arya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8032" class="dsq-comment-body">
            <div id="dsq-comment-message-8032" class="dsq-comment-message"><p>//here O(n)  solution </p>
<p>#include<br />
#define max 1000001<br />
int f[max];<br />
int arr[max];<br />
int b[max];</p>
<p>int maximum(int *x,int *y)<br />
{<br />
    return (*x&gt;*y)?(*x):(*y);<br />
}<br />
int main()<br />
{<br />
    int n,i,j,k;<br />
        scanf(&#8220;%d&#8221;,&amp;n);<br />
        for(i=1;i&lt;=n;i++)<br />
            scanf(&quot;%d&quot;,&amp;arr[i]);</p>
<p>        scanf(&quot;%d&quot;,&amp;k);<br />
        f[1]=arr[1];</p>
<p>        for(i=2;in-m;i&#8211;)<br />
        {<br />
             b[i]=maximum(&amp;b[i+1],&amp;arr[i]);<br />
        }</p>
<p>        b[n-m]=arr[n-m];<br />
        for(i=n-m-1;i&gt;=1;i&#8211;)<br />
        {</p>
<p>               if(i%k==0)<br />
                  {<br />
                        b[i]=arr[i];</p>
<p>                       // i&#8211;;<br />
                        continue;<br />
                  }<br />
                  b[i]=maximum(&amp;b[i+1],&amp;arr[i]);</p>
<p>        }</p>
<p>        for(i=1;i&lt;=n-k+1;i++)<br />
        {</p>
<p>                printf(&quot;%d &quot;,maximum(&amp;b[i],&amp;f[i+k-1]));<br />
        }</p>
<p>        printf(&quot;\n&quot;);</p>
<p>    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-laddoo odd alt thread-odd thread-alt depth-1" id="dsq-comment-7701">
        <div id="dsq-comment-header-7701" class="dsq-comment-header">
            <cite id="dsq-cite-7701">
                <span id="dsq-author-user-7701">laddoo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7701" class="dsq-comment-body">
            <div id="dsq-comment-message-7701" class="dsq-comment-message"><p>Guyz, I wrote this code..find any bug,if there..</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
 
void findKthMax(int arr[], int n, int k)
{
    int i,j, max=arr[0],index1=0,index2=0,nextmax=arr[0];
 
    for (i = 1; i &lt; k; i++)
    {
        if (arr[i] &gt; max)
        {
	       nextmax=max;
	       index2=index1;
               max = arr[i];
               index1=i;
        }
	else if (arr[i] &gt; nextmax)
        {
               nextmax = arr[i];
               index2=i;
        }
    }
    printf(&quot;%d &quot;, max);
    for (i = k; i &lt;= n-1; i++)
    {
        if(index1!=i-k)
        {
                                if (arr[i] &gt; max)
                                {
                                 nextmax=max;
                                 max = arr[i];
                                 printf(&quot;%d &quot;, max);
                                }
                                else
                                {
                                            printf(&quot;%d &quot;, max);
                                            if (arr[i] &gt; nextmax)
                                            {
                                             nextmax = arr[i];
                                            }
                                            else if(index2==n-k)
                                            {
                                                 nextmax=arr[i];
                                            }
                                }
        }
	    else
        {
				                if (arr[i] &gt; nextmax)
                                {
                                 max = arr[i];
                                 printf(&quot;%d &quot;, max);
                                }
                                else
                                {
                                    max=nextmax;
                                    printf(&quot;%d &quot;, max);
                                    nextmax=arr[i];
                                }
        }
    }
}
 
int main()
{
    int arr[] = {9,10,8,7,6,5,4,3,2,1};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 4;
    findKthMax(arr, n, k);
    getch();
    return 0;
}

</code> </pre>
<p>Time Complexity : O(n)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-laddoo even depth-2" id="dsq-comment-7703">
        <div id="dsq-comment-header-7703" class="dsq-comment-header">
            <cite id="dsq-cite-7703">
                <span id="dsq-author-user-7703">laddoo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7703" class="dsq-comment-body">
            <div id="dsq-comment-message-7703" class="dsq-comment-message"><p>Sry,My mistake..the code isn&#8217;t working properly,<br />
I&#8217;ll update later</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-prabhatlamba odd alt thread-even depth-1" id="dsq-comment-6865">
        <div id="dsq-comment-header-6865" class="dsq-comment-header">
            <cite id="dsq-cite-6865">
                <span id="dsq-author-user-6865">prabhatlamba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6865" class="dsq-comment-body">
            <div id="dsq-comment-message-6865" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#define max 100
void main()
{
	clrscr();
	int arr[max],k,n,maxi,j=0;
	printf(&quot;enter the no. of values of an array: &quot;);
	scanf(&quot;%d&quot;,&amp;n);
	for (int l=0;l&lt;n;l++)
	scanf(&quot;%d&quot;,&amp;arr[l]);

	maxi=arr[0];
	printf(&quot;\nenter the max lenght of array size: &quot;);
	scanf(&quot;%d&quot;,&amp;k);

	for(int i=j;i&lt;k+j,i&lt;n;i++)
	{
		if(arr[i]&gt;maxi)
		maxi=arr[i];

		if(i==k+j-1)
		{
			j++;
			printf(&quot;\nmaximum: %d&quot;,maxi);
		}
	}

getch();
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-deadman_22 even depth-2" id="dsq-comment-7106">
        <div id="dsq-comment-header-7106" class="dsq-comment-header">
            <cite id="dsq-cite-7106">
http://www.rajaagarwal.webs.com                <span id="dsq-author-user-7106">deadman_22</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7106" class="dsq-comment-body">
            <div id="dsq-comment-message-7106" class="dsq-comment-message"><p>what if the maximum for 1st go will be the first element..it will always print the overall max..clearly wrong solution </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-6467">
        <div id="dsq-comment-header-6467" class="dsq-comment-header">
            <cite id="dsq-cite-6467">
                <span id="dsq-author-user-6467">Ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6467" class="dsq-comment-body">
            <div id="dsq-comment-message-6467" class="dsq-comment-message"><p>Modified data structure and heap</p>
<pre> <code language="C">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define PARENT(i) (i - 1) / 2
#define LEFT(i) 2*i + 1
#define RIGHT(i) 2*i + 2
#define SWAP(A,i,j) struct node *p = A[i]; A[i] = A[j]; A[j] = p; A[i]-&gt;heap_index = i; A[j]-&gt;heap_index = j;

struct node {
	int val;
	int heap_index;
	struct node *next;
};

void max_heapify(struct node *heap[],int i, int heapsize)
{
	int l = LEFT(i);
	int r = RIGHT(i);
	int max_index = i;
	if (l &lt; heapsize &amp;&amp; heap[l]-&gt;val &gt; heap[max_index]-&gt;val)
		max_index = l;
		
	if (r &lt; heapsize &amp;&amp; heap[r]-&gt;val &gt; heap[max_index]-&gt;val)
		max_index = r;

	if (max_index == i) 
		return;
	{
		SWAP(heap, i, max_index);
	}
	max_heapify(heap, max_index, heapsize);
}

void build_max_heap(struct node *heap[], int heapsize)
{
	int i;
	for (i = heapsize / 2 - 1; i &gt;= 0; i--)
		max_heapify(heap, i, heapsize);
}

void print(struct node *n[], int len)
{
	int i;
	printf(&quot;[&quot;);

	for (i = 0; i &lt; len; i++) 
		printf((i == len - 1) ? &quot;%d]\n&quot; : &quot;%d, &quot;, n[i]-&gt;val);
}
void insert(struct node *sub_set[], int j)
{
	while (j != 0) {
		if (sub_set[j]-&gt;val &gt; sub_set[PARENT(j)]-&gt;val) {
			SWAP(sub_set, j, PARENT(j));
			j = PARENT(j);
		}
		else
			break;
	}
}


int main()
{
	int set[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13};
	int k = 5;
	struct node *head = (struct node *) malloc(sizeof(struct node));
	int i;
	int temp;
	int j;
	struct node *tail;
	tail = head;
	for (i = 0; i &lt; k; i++) {
		tail-&gt;val = set[i];
		tail-&gt;next = (struct node *)malloc(sizeof(struct node));
		tail = tail-&gt;next;
	}
	struct node *sub_set[k];
	struct node *t = head;
	for (i = 0; i &lt; k; i++) {
		sub_set[i] = t;
		t-&gt;heap_index = i;
		t = t-&gt;next;
	}
	build_max_heap(sub_set, k);
	for (i = k; i &lt;= sizeof(set) / sizeof(int); i++) {
		printf(&quot;%d\n&quot;, sub_set[0]-&gt;val);
		temp = head-&gt;heap_index;
		SWAP(sub_set, temp, k - 1);
		max_heapify(sub_set, temp, k - 1);
		t = head;
		head = head-&gt;next;
		free(t);
		tail-&gt;val = set[i];
		tail-&gt;heap_index = k - 1;
		tail-&gt;next = (struct node *)malloc(sizeof(struct node));
		sub_set[k - 1] = tail;
		tail = tail-&gt;next;
		insert(sub_set, k - 1);
	}
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-6475">
        <div id="dsq-comment-header-6475" class="dsq-comment-header">
            <cite id="dsq-cite-6475">
                <span id="dsq-author-user-6475">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6475" class="dsq-comment-body">
            <div id="dsq-comment-message-6475" class="dsq-comment-message"><p>@Ravi:  Thanks for sharing the code.  Could you please add few word about the logic.  Thanks!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-6476">
        <div id="dsq-comment-header-6476" class="dsq-comment-header">
            <cite id="dsq-cite-6476">
                <span id="dsq-author-user-6476">Ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6476" class="dsq-comment-body">
            <div id="dsq-comment-message-6476" class="dsq-comment-message"><p>Hi, </p>
<p>&#8211;Create a linked list of first k element of input with a pointer of head and tail. Each node will contain a integer values from input, and a index which will tell where this node is at the heap, and a pointer to next node.</p>
<p>&#8211;create a max heap with these nodes, based on value stores in it.</p>
<p>&#8211;For i = k to size of input<br />
     print the first element of heap.<br />
     remove the head of the list, also from the<br />
     heap.<br />
     append the tail with next element in input.<br />
     add this to heap.<br />
end</p>
<p>Time in making heap = O(k), making linked list = O(k), removal takes O(logk), adding takes O(logk). Adding and removing happens O(n) times..<br />
total complexity &#8211; 2*O(k) + 2*n*O(logk), which is<br />
O(nlogk)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-9268">
        <div id="dsq-comment-header-9268" class="dsq-comment-header">
            <cite id="dsq-cite-9268">
                <span id="dsq-author-user-9268">codez</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9268" class="dsq-comment-body">
            <div id="dsq-comment-message-9268" class="dsq-comment-message"><p>@Ravi: i hv a doubt.plz correct me if wrong<br />
suppose we have an array as give:<br />
10 4 8 6 7 1 2 8<br />
k=3;<br />
now according to ur algo<br />
-10,4,8 in heap with first elemnt h[0]=10;<br />
-then prnt,remove 10 ,then heap is 4 8 6, h[0]=8<br />
-prnt/rem 8,so next heap will be 4,6,7<br />
but it shuld be 8,6,7. since subarrys are contiguous</p>
<p>plz correct me , if m considering it wrong way</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-5563">
        <div id="dsq-comment-header-5563" class="dsq-comment-header">
            <cite id="dsq-cite-5563">
                <span id="dsq-author-user-5563">Andrew Moor</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5563" class="dsq-comment-body">
            <div id="dsq-comment-message-5563" class="dsq-comment-message"><p>@Imran, this can be easely solved,  we just watch two maximum values, and if the largest one dissapear, we compare next value with the second one</p>
<p>internal static string MaxOfAllSubbarraysOfSizeK(int[] a, int k)<br />
        {<br />
            if(a == null || a.Length &lt; 1)<br />
                throw new Exception(&quot;Array is empty&quot;);<br />
            if(k &lt; 1 || k &gt; a.Length)<br />
                throw new Exception(&quot;SubArray size is out of range&quot;);<br />
            if (a.Length == 1)<br />
                return string.Format(&quot;{0} &quot;, a[0]);</p>
<p>            var output = new StringBuilder();<br />
            const string format = &quot;{0} &quot;;<br />
            var maxFirst = a[0] &gt; a[1] ? a[0] : a[1];<br />
            var maxSecond = a[0] &gt; a[1] ? a[1] : a[0];</p>
<p>            //Search for two maximum values<br />
            for (var i = 2; i &lt; k; i++)<br />
            {<br />
                if (a[i] &gt; maxFirst)<br />
                {<br />
                    maxSecond = maxFirst;<br />
                    maxFirst = a[i];<br />
                }<br />
                else<br />
                {<br />
                    if (a[i] &gt; maxSecond)<br />
                    {<br />
                        maxSecond = a[i];<br />
                    }<br />
                }<br />
            }<br />
            output.AppendFormat(format, maxFirst);</p>
<p>            for (var i = k; i &lt; a.Length; i++)<br />
            {<br />
                //If maximum number disappear from subarray we<br />
                //compare next value with second maximum<br />
                if (a[i &#8211; k] == maxFirst)<br />
                {<br />
                    maxFirst = maxSecond;<br />
                }<br />
                if (a[i] &gt; maxFirst)<br />
                {<br />
                    maxFirst = a[i];<br />
                }<br />
                else<br />
                {<br />
                    maxSecond = a[i];<br />
                }<br />
                output.AppendFormat(format, maxFirst);<br />
            }</p>
<p>            return output.ToString();<br />
        }</p>
<p>So, we have O(n) complexity</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-anujbansal even depth-2" id="dsq-comment-6461">
        <div id="dsq-comment-header-6461" class="dsq-comment-header">
            <cite id="dsq-cite-6461">
                <span id="dsq-author-user-6461">Anuj Bansal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6461" class="dsq-comment-body">
            <div id="dsq-comment-message-6461" class="dsq-comment-message"><p>What if both the maximum and second maximum value disappear from the array? With what value will you compare afterwards?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-6568">
        <div id="dsq-comment-header-6568" class="dsq-comment-header">
            <cite id="dsq-cite-6568">
                <span id="dsq-author-user-6568">asahu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6568" class="dsq-comment-body">
            <div id="dsq-comment-message-6568" class="dsq-comment-message"><p>what if the next k elements are less than last and 2nd last max value. e.g.<br />
8,9,10,11,3,1,2,4 </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-8779">
        <div id="dsq-comment-header-8779" class="dsq-comment-header">
            <cite id="dsq-cite-8779">
                <span id="dsq-author-user-8779">bhavesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8779" class="dsq-comment-body">
            <div id="dsq-comment-message-8779" class="dsq-comment-message"><p>and with post of asahu k=3 and try to evaluate that</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5562">
        <div id="dsq-comment-header-5562" class="dsq-comment-header">
            <cite id="dsq-cite-5562">
                <span id="dsq-author-user-5562">Andrew Moor</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5562" class="dsq-comment-body">
            <div id="dsq-comment-message-5562" class="dsq-comment-message"><p>@Imran, this can be easely solved,  we just watch two maximum values, and if the largest one dissapear, we compare next value with the second one</p>
<p>internal static string MaxOfAllSubbarraysOfSizeK(int[] a, int k)<br />
        {<br />
            if(a == null || a.Length &lt; 1)<br />
                throw new Exception(&quot;Array is empty&quot;);<br />
            if(k &lt; 1 || k &gt; a.Length)<br />
                throw new Exception(&quot;SubArray size is out of range&quot;);<br />
            if (a.Length == 1)<br />
                return string.Format(&quot;{0} &quot;, a[0]);</p>
<p>            var output = new StringBuilder();<br />
            const string format = &quot;{0} &quot;;<br />
            var maxFirst = a[0] &gt; a[1] ? a[0] : a[1];<br />
            var maxSecond = a[0] &gt; a[1] ? a[1] : a[0];</p>
<p>            //Search for two maximum values<br />
            for (var i = 2; i &lt; k; i++)<br />
            {<br />
                if (a[i] &gt; maxFirst)<br />
                {<br />
                    maxSecond = maxFirst;<br />
                    maxFirst = a[i];<br />
                }<br />
                else<br />
                {<br />
                    if (a[i] &gt; maxSecond)<br />
                    {<br />
                        maxSecond = a[i];<br />
                    }<br />
                }<br />
            }<br />
            output.AppendFormat(format, maxFirst);</p>
<p>            for (var i = k; i &lt; a.Length; i++)<br />
            {<br />
                //If maximum number disappear from subarray we<br />
                //compare next value with second maximum<br />
                if (a[i &#8211; k] == maxFirst)<br />
                {<br />
                    maxFirst = maxSecond;<br />
                }<br />
                if (a[i] &gt; maxFirst)<br />
                {<br />
                    maxFirst = a[i];<br />
                }<br />
                else<br />
                {<br />
                    maxSecond = a[i];<br />
                }<br />
                output.AppendFormat(format, maxFirst);<br />
            }</p>
<p>            return output.ToString();<br />
        }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-mccarthy even thread-even depth-1" id="dsq-comment-5167">
        <div id="dsq-comment-header-5167" class="dsq-comment-header">
            <cite id="dsq-cite-5167">
http://www.cse.iitk.ac.in/users/chitti                <span id="dsq-author-user-5167">mccarthy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5167" class="dsq-comment-body">
            <div id="dsq-comment-message-5167" class="dsq-comment-message"><p>#include<br />
#define INF 10000<br />
#define max(x,y) x&gt;y?x:y<br />
main()<br />
{<br />
	int a[]={10,-12,13,16,7,21,-10,56,67};<br />
	int sum1=0,sum2=0;<br />
	int i;<br />
	for(i=0;i&lt;9;i++)<br />
	{<br />
		sum1=max((sum1+a[i]),0);<br />
		sum2=max(sum1,sum2);<br />
	}<br />
	printf(&quot;Max sum is: %d&quot;,sum2);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5140">
        <div id="dsq-comment-header-5140" class="dsq-comment-header">
            <cite id="dsq-cite-5140">
                <span id="dsq-author-user-5140">Munmun</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5140" class="dsq-comment-body">
            <div id="dsq-comment-message-5140" class="dsq-comment-message"><p>I would like to suggest an O(n) solution for the same.<br />
Allocate 2 arrays of size n each.<br />
int max[n];<br />
int max_index[n];<br />
int arr[n] = {1,2,3,1,4,5,2,3,6};<br />
int k =3;<br />
int i,maxValue=0;<br />
max[0] =<br />
for(i=1;i ){<br />
      max[i]=arr[i]</p>
<p>}<br />
}</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-5132">
        <div id="dsq-comment-header-5132" class="dsq-comment-header">
            <cite id="dsq-cite-5132">
                <span id="dsq-author-user-5132">Shreyansh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5132" class="dsq-comment-body">
            <div id="dsq-comment-message-5132" class="dsq-comment-message"><pre> <code language="C">#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int main()
{
    int a[]={1,2,3,1,4,5,2,3,6};
    int i,j,k=0,max;
    for(j=0;k&lt;=6&amp;&amp;j&lt;=2;j++)
    {
                 if(j==0)
                 {
                         max=a[k+j];
                 }
                 else if(max&lt;a[k+j])
                 {
                      max=a[k+j];
                 }
                 if(j==2)
                 {
                         printf(&quot;%d&quot;,max);
                         k++;
                         j=-1;
                 }
    }
    getch();
    return 0;
}    
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-nikhil-arora121 odd alt depth-2" id="dsq-comment-5547">
        <div id="dsq-comment-header-5547" class="dsq-comment-header">
            <cite id="dsq-cite-5547">
                <span id="dsq-author-user-5547">nikhil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5547" class="dsq-comment-body">
            <div id="dsq-comment-message-5547" class="dsq-comment-message"><p>complexity is still O(n*k)..what is the improvement?????????</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-5131">
        <div id="dsq-comment-header-5131" class="dsq-comment-header">
            <cite id="dsq-cite-5131">
                <span id="dsq-author-user-5131">Shreyansh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5131" class="dsq-comment-body">
            <div id="dsq-comment-message-5131" class="dsq-comment-message"><p>#include<br />
#include<br />
int main()<br />
{<br />
    int a[]={1,2,3,1,4,5,2,3,6};<br />
    int i,j,k=0,max;<br />
    for(j=0;k&lt;=6&amp;&amp;j&lt;=2;j++)<br />
    {<br />
                 if(j==0)<br />
                 {<br />
                         max=a[k+j];<br />
                 }<br />
                 else if(max&lt;a[k+j])<br />
                 {<br />
                      max=a[k+j];<br />
                 }<br />
                 if(j==2)<br />
                 {<br />
                         printf(&quot;%d&quot;,max);<br />
                         k++;<br />
                         j=-1;<br />
                 }<br />
    }<br />
    getch();<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4694">
        <div id="dsq-comment-header-4694" class="dsq-comment-header">
            <cite id="dsq-cite-4694">
                <span id="dsq-author-user-4694">Ayush</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4694" class="dsq-comment-body">
            <div id="dsq-comment-message-4694" class="dsq-comment-message"><p>In the heap algorithm, rather than deleting a node and adding the new one, we could replace the value of node to be deleted with value of node to be added.Heapify() the heap next in logk. Thus O(k+(n-k+1)logk)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4647">
        <div id="dsq-comment-header-4647" class="dsq-comment-header">
            <cite id="dsq-cite-4647">
                <span id="dsq-author-user-4647">Mohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4647" class="dsq-comment-body">
            <div id="dsq-comment-message-4647" class="dsq-comment-message"><p>Below code work&#8217;s in O(n)</p>
<p>public void printMaxFromSubArray(int[] arr,int k){<br />
		int max = 0;<br />
		if(arr.length &lt; k){<br />
			System.out.println(&quot;Array lenght is less than the sub array size&quot;);<br />
			return;<br />
		}<br />
		for(int i=0;i&lt;arr.length;i++){<br />
			if(max &lt; arr[i]){<br />
				max = arr[i];<br />
			}<br />
			if(i &gt;= k-1){<br />
				System.out.print(max);<br />
			}<br />
		}<br />
	}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4959">
        <div id="dsq-comment-header-4959" class="dsq-comment-header">
            <cite id="dsq-cite-4959">
                <span id="dsq-author-user-4959">Leo</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4959" class="dsq-comment-body">
            <div id="dsq-comment-message-4959" class="dsq-comment-message"><p>@Mohan It does not work. Try it for following array<br />
{6, 2, 3, 1, 4, 5, 2, 3, 6}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4575">
        <div id="dsq-comment-header-4575" class="dsq-comment-header">
            <cite id="dsq-cite-4575">
http://shashank7s.blogspot.com                <span id="dsq-author-user-4575">WgpShashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4575" class="dsq-comment-body">
            <div id="dsq-comment-message-4575" class="dsq-comment-message"><p>@all   Its Nothing But Sliding Window Problem in which we have to find Maximum in each sub-windoww of size K</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-mastermind odd alt thread-odd thread-alt depth-1" id="dsq-comment-4460">
        <div id="dsq-comment-header-4460" class="dsq-comment-header">
            <cite id="dsq-cite-4460">
http://sachin-gupta.tk                <span id="dsq-author-user-4460">mastermind</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4460" class="dsq-comment-body">
            <div id="dsq-comment-message-4460" class="dsq-comment-message"><p>Using Max Heap:<br />
1&gt;create a max heap of size k:max_heap[3]  and insert arr[0],arr[1],arr[2];<br />
2&gt;for(i=0;i&lt;n-k;i++)<br />
{print max_heap[0];<br />
 delete_heap(arr[i];<br />
  insert_heap(arr[i+k])<br />
}</p>
<p>;;;;;;;;;;;;;;;;;;<br />
complexity=O(klgk)+O((n-k)*lg(k))<br />
== O(nlgk)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4568">
        <div id="dsq-comment-header-4568" class="dsq-comment-header">
            <cite id="dsq-cite-4568">
                <span id="dsq-author-user-4568">sankalp</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4568" class="dsq-comment-body">
            <div id="dsq-comment-message-4568" class="dsq-comment-message"><p>The max heap does not support efficient deletion and can be O(n) in worst case . Also , to delete a node .You need to make sure that the heap structure is maintained and the delete procedure will make the heap at the deleted element , call a heapify (making a senitel of infinity i suppose )<br />
Hence , this will take O(n+log n) for every elemenent deleted </p>
<p>Thus , total time complexity : O(n-k*(n+log n)))  which is O(n^2)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4379">
        <div id="dsq-comment-header-4379" class="dsq-comment-header">
            <cite id="dsq-cite-4379">
                <span id="dsq-author-user-4379">Gopal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4379" class="dsq-comment-body">
            <div id="dsq-comment-message-4379" class="dsq-comment-message"><p>O(n) Solution</p>
<pre> <code language="C">
public static void printKMax(int[] array,int k){
	if(array == null || array.length == 0)
		return;
		
	int max = Integer.MIN_VALUE;
		
	for(int i=0;i &lt; k &amp;&amp; i&lt;array.length;i++){
		if(max &lt; array[i]){
			max = array[i];
		}
	}
	System.out.print(max + &quot; &quot;);
	for(int i=k;i &lt; array.length;i++){
		if(max &lt; array[i]){
			max = array[i];
		} 
	        System.out.print(max + &quot; &quot;);
	}
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-nicks-2 even depth-2" id="dsq-comment-4544">
        <div id="dsq-comment-header-4544" class="dsq-comment-header">
            <cite id="dsq-cite-4544">
                <span id="dsq-author-user-4544">nicks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4544" class="dsq-comment-body">
            <div id="dsq-comment-message-4544" class="dsq-comment-message"><p>it won&#8217;t work as discussed earlier solution will not work for a list which is in descending order. 50, 40, 30, 20, 10 k=2</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-nicks-2 odd alt depth-2" id="dsq-comment-4545">
        <div id="dsq-comment-header-4545" class="dsq-comment-header">
            <cite id="dsq-cite-4545">
                <span id="dsq-author-user-4545">nicks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4545" class="dsq-comment-body">
            <div id="dsq-comment-message-4545" class="dsq-comment-message"><p>if anyone has the code of method 2(BST)&#8230;then please share !!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-deadcoder even thread-odd thread-alt depth-1" id="dsq-comment-4348">
        <div id="dsq-comment-header-4348" class="dsq-comment-header">
            <cite id="dsq-cite-4348">
                <span id="dsq-author-user-4348">DeadCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4348" class="dsq-comment-body">
            <div id="dsq-comment-message-4348" class="dsq-comment-message"><pre> <code language="C">
int main()
{
	int a[]={8, 5, 10, 7, 9, 4, 15, 12, 90, 13};
	int n = 10;			//n elements in array
	int k = 4; 			//Size of subarray 
	
	
	int i, j, t, max;
	
	i=0;
	j=k;
	max=0x80000000;
	
	for (t = 0; t &lt; k ; t++ )
	{
		if(max &lt; a[t])
		 max=a[t];	
	}
	printf(&quot;%dt&quot;,max);
	
	//Now i=0, j=k, max= maximum of first k elements
	while(j=max)
		{
			max=a[j];
			i++;
			j++;
		}
		else if(a[i]==max)
		{
			i++;
			j++;
			for( t=i; t&lt;j ; t++)
			{
				if(max &lt; a[t])
				 max=a[t];				
			}
			
		}	
		else
		{
			i++;
			j++;
		}
		
		printf(&quot;%dt&quot;,max);	
	}
	
	return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4308">
        <div id="dsq-comment-header-4308" class="dsq-comment-header">
            <cite id="dsq-cite-4308">
                <span id="dsq-author-user-4308">Praveen raj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4308" class="dsq-comment-body">
            <div id="dsq-comment-message-4308" class="dsq-comment-message"><pre> <code language="C">
//correct code

#include&lt;stdio.h&gt;
void main()
{
  int i, k, n, max=0, previous=0, a[20];
  scanf(&quot;%d%d&quot;,&amp;k,&amp;n);
  for (i=0; i&lt;n; i++)
    scanf(&quot;%d&quot;,&amp;a[i]);
  for (i=0; i&lt;k; i++)
    previous = previous+a[i];
  max = previous;
  for(i=0;i&lt;=n-k-1;i++)
  {
      previous=previous-a[i]+a[i+k];
      if(previous&gt;max)
         max=previous;
  }
  printf(&quot;%d&quot;,max);
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-mastermind even depth-2" id="dsq-comment-4462">
        <div id="dsq-comment-header-4462" class="dsq-comment-header">
            <cite id="dsq-cite-4462">
http://sachinguptacse.blogspot.com/                <span id="dsq-author-user-4462">sachin gupta MNNIT</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4462" class="dsq-comment-body">
            <div id="dsq-comment-message-4462" class="dsq-comment-message"><p>Using Max Heap:<br />
1&gt;create a max heap of size k:max_heap[3] and insert arr[0],arr[1],arr[2];<br />
2&gt;for(i=0;i&lt;n-k;i++)<br />
{print max_heap[0];<br />
delete_heap(arr[i];<br />
insert_heap(arr[i+k])<br />
}</p>
<p>;;;;;;;;;;;;;;;;;;<br />
complexity=O(klgk)+O((n-k)*lg(k))<br />
== O(nlgk)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-4465">
        <div id="dsq-comment-header-4465" class="dsq-comment-header">
            <cite id="dsq-cite-4465">
                <span id="dsq-author-user-4465">shanky</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4465" class="dsq-comment-body">
            <div id="dsq-comment-message-4465" class="dsq-comment-message"><p>in step 1 after creating max heap arr[0]=3 arr[1]=2 arr[2]=1 .now in 2nd statement of for loop u r deleting arr[0] ie 3 bt actually we want to delete 1 ie arr[2].crect me if i am wrng</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4282">
        <div id="dsq-comment-header-4282" class="dsq-comment-header">
            <cite id="dsq-cite-4282">
http://flickr.com/photos/smilesnigam                <span id="dsq-author-user-4282">shrikant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4282" class="dsq-comment-body">
            <div id="dsq-comment-message-4282" class="dsq-comment-message"><p>could we do it like this:</p>
<pre> <code language="C">int max = findMax(array, 0, k-1);
int i=k;
while(i&lt;length)
{
max = max&gt;array[i]?max:array[i];
i++
}
</code> </pre>
<p>the idea is that each time we are shifting the array to right by one, so just comparing the list element to the max of previous array of size k should work.<br />
please let me know if it wont work.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4283">
        <div id="dsq-comment-header-4283" class="dsq-comment-header">
            <cite id="dsq-cite-4283">
http://flickr.com/photos/smilesnigam                <span id="dsq-author-user-4283">shrikant</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4283" class="dsq-comment-body">
            <div id="dsq-comment-message-4283" class="dsq-comment-message"><p>looks like it wont work if the max of the previous subarray was the first element of that subarray. but i think it could be taken care of in the same code.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-4337">
        <div id="dsq-comment-header-4337" class="dsq-comment-header">
            <cite id="dsq-cite-4337">
                <span id="dsq-author-user-4337">Nitish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4337" class="dsq-comment-body">
            <div id="dsq-comment-message-4337" class="dsq-comment-message"><pre> <code language="C">
#include &lt;stdio.h&gt;

void maxk(int *arr,int k,int n);

int main()
{
	int arr[]={8, 5, 10, 7, 9, 4, 15, 12, 90, 13};
	maxk(arr,3,sizeof(arr)/sizeof(int));
}

void maxk(int arr[],int k,int n)
{
	int max,i;
	max= *arr;
	for(i=0;i&lt;n;i++)
	{
		if(max1)
			k--;
		else
			printf(&quot;%d&quot;,max);
	}
}
</code> </pre>
<p>It is absolutely fine.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4172">
        <div id="dsq-comment-header-4172" class="dsq-comment-header">
            <cite id="dsq-cite-4172">
                <span id="dsq-author-user-4172">ella</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4172" class="dsq-comment-body">
            <div id="dsq-comment-message-4172" class="dsq-comment-message"><p>The double-ended queue<br />
 the largest element in the subarray<br />
would always appear in the front of the queue<br />
run time complexity of O(n).</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4175">
        <div id="dsq-comment-header-4175" class="dsq-comment-header">
            <cite id="dsq-cite-4175">
                <span id="dsq-author-user-4175">Dumanshu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4175" class="dsq-comment-body">
            <div id="dsq-comment-message-4175" class="dsq-comment-message"><p>@ella: could you plz elaborate.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4158">
        <div id="dsq-comment-header-4158" class="dsq-comment-header">
            <cite id="dsq-cite-4158">
                <span id="dsq-author-user-4158">Shiraj Pokharel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4158" class="dsq-comment-body">
            <div id="dsq-comment-message-4158" class="dsq-comment-message"><p>how about using a max heap and an auxillary array that stores index of the first element in window(the one to be replaced next).<br />
Heapify after each insertion and the top element is the output per window.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-4159">
        <div id="dsq-comment-header-4159" class="dsq-comment-header">
            <cite id="dsq-cite-4159">
                <span id="dsq-author-user-4159">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4159" class="dsq-comment-body">
            <div id="dsq-comment-message-4159" class="dsq-comment-message"><p>@Shiraj Pokharel:<br />
This looks another good approach.  When we replace a node, we have to make sure that the subtree with replaced node is heapified and its ancestors are also heapified.  We will analyze this further and add it to the original post.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-10857">
        <div id="dsq-comment-header-10857" class="dsq-comment-header">
            <cite id="dsq-cite-10857">
                <span id="dsq-author-user-10857">bunty</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10857" class="dsq-comment-body">
            <div id="dsq-comment-message-10857" class="dsq-comment-message"><p>@geeks, Sandeep:<br />
 &#8211; Max heap can solve the purpose along with a auxiliary variable to save the index of first element of the sub-array.<br />
The algo will be same as METHOD2.<br />
1- Build MaxHeap (O(k)). Keep track of a[first] in int aux.<br />
2- Print Root<br />
3- Delete org a[i] from MaxHeap. This can be done by replacing MaxHeap[aux] by MaxHeap[last].<br />
Now do heapify MaxHeap. Only heapify wrt to children would be required. (I need to check).<br />
3- Now add a[first+k] as last element in MaxHeap and do heapify again.</p>
<p>Perhaps, step 3 can have both heapifyWRTparents() and heapifyWRTchildren() and it should solve the purpose.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-10866">
        <div id="dsq-comment-header-10866" class="dsq-comment-header">
            <cite id="dsq-cite-10866">
                <span id="dsq-author-user-10866">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10866" class="dsq-comment-body">
            <div id="dsq-comment-message-10866" class="dsq-comment-message"><p>@bunty: The idea looks good.  We will take another look at it and add it to the original post.  Thanks!!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-5" id="dsq-comment-10879">
        <div id="dsq-comment-header-10879" class="dsq-comment-header">
            <cite id="dsq-cite-10879">
                <span id="dsq-author-user-10879">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10879" class="dsq-comment-body">
            <div id="dsq-comment-message-10879" class="dsq-comment-message"><p>@bunty: I took another look at your approach and tried to implement it.  The problem is, how to update aux after first deletion.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-rajcools even depth-2" id="dsq-comment-4160">
        <div id="dsq-comment-header-4160" class="dsq-comment-header">
            <cite id="dsq-cite-4160">
                <span id="dsq-author-user-4160">rajcools</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4160" class="dsq-comment-body">
            <div id="dsq-comment-message-4160" class="dsq-comment-message"><p>why do we need auxiliary array , we can do this with given array and a max heap only&#8230;.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rajcools odd alt depth-2" id="dsq-comment-4161">
        <div id="dsq-comment-header-4161" class="dsq-comment-header">
            <cite id="dsq-cite-4161">
                <span id="dsq-author-user-4161">rajcools</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4161" class="dsq-comment-body">
            <div id="dsq-comment-message-4161" class="dsq-comment-message"><p>@someone who has disliked shivraj&#8217;s comment.Reason?&#8230;. what happened cant u tolerate others giving good ideas when u r not able to find one</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-4209">
        <div id="dsq-comment-header-4209" class="dsq-comment-header">
            <cite id="dsq-cite-4209">
                <span id="dsq-author-user-4209">RF</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4209" class="dsq-comment-body">
            <div id="dsq-comment-message-4209" class="dsq-comment-message"><p>max heap will give same complexity (n log(k))&#8230;eg:(let start indexing frm 1)<br />
2341111 window size:3 heaps:(heap/top)(234/4)index:3<br />
then (2341/4) index:3<br />
then (23411/4)index:3<br />
now u will delete 4 since size f window is 3<br />
then (23111/3)wrong output!!!<br />
i want to convey that every time you have to delete elem&#8230;searching and deleting is log(k)and hence n(logk)&#8230;M I wrong??</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-4291">
        <div id="dsq-comment-header-4291" class="dsq-comment-header">
            <cite id="dsq-cite-4291">
                <span id="dsq-author-user-4291">Ankit Mehta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4291" class="dsq-comment-body">
            <div id="dsq-comment-message-4291" class="dsq-comment-message"><p>but easier to implement than self balancing BST <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-4156">
        <div id="dsq-comment-header-4156" class="dsq-comment-header">
            <cite id="dsq-cite-4156">
                <span id="dsq-author-user-4156">Imran Amjad</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4156" class="dsq-comment-body">
            <div id="dsq-comment-message-4156" class="dsq-comment-message"><p>This can be done on O(n) time by finding max in first k elements. Then match max for each index of array after k elements. Here is the code..</p>
<p>public static void printMaxOfSubArray(int[] array, int k)<br />
	{<br />
		if(array == null || array.length &lt;1)<br />
			throw new IllegalArgumentException(&quot;Array is empty&quot;);<br />
		if(k &lt; 1 || k &gt; array.length)<br />
			throw new IllegalArgumentException(&quot;SubArray size is out of range&quot;);</p>
<p>		if(array.length ==1)<br />
			System.out.print(array[0]);</p>
<p>		int max = array[0];<br />
		for(int i=1; i&lt;array.length; i++)<br />
		{<br />
			if(max &lt; array[i])<br />
			{<br />
				max = array[i];<br />
			}<br />
			//only display max when k elements are checked<br />
			if(i+1 &gt;= k) System.out.print(max + &quot;, &quot;);<br />
		}<br />
	}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-4157">
        <div id="dsq-comment-header-4157" class="dsq-comment-header">
            <cite id="dsq-cite-4157">
                <span id="dsq-author-user-4157">Imran Amjad</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4157" class="dsq-comment-body">
            <div id="dsq-comment-message-4157" class="dsq-comment-message"><p>That was quite a hasty work. my solution will not work for a list which is in descending order. 50, 40, 30, 20, 10 k=2</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/';
var disqus_identifier = '11306 http://geeksforgeeks.org/?p=11306';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Maximum of all subarrays of size k (Added a O(n) method)";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.252 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:24:13 -->

<!-- Compression = gzip -->
<!-- super cache -->