<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Given an array A[] and a number x, check for pair in A[] with sum as x - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Given an array A[] and a number x, check for pair in A[] with sum as x - GeeksforGeeks" />
<meta property="og:description" content="Write a C program that, given an array A[] of n numbers and another number x, determines whether or not there exist two elements in S whose sum is exactly x. METHOD 1 (Use Sorting) Algorithm: hasArrayTwoCandidates (A[], ar_size, sum) 1) Sort the array in non-decreasing order. 2) Initialize two index variables to find the &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Hashing" />
<meta property="article:section" content="Arrays" />
<meta property="article:published_time" content="2009-05-30T09:30:29+00:00" />
<meta property="article:modified_time" content="2014-04-02T14:12:28+00:00" />
<meta property="og:updated_time" content="2014-04-02T14:12:28+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.506 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417674712 220.227.97.100';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Given an array A[] and a number x, check for pair in A[] with sum as x</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Write a C program that, given an array A[] of n numbers and another number x, determines whether or not there exist two elements in S whose sum is exactly x. <span id="more-484"></span></p>
<p><strong>METHOD 1 (Use Sorting)</strong></p>
<p>Algorithm:
<pre>
hasArrayTwoCandidates (A[], ar_size, sum)
1) Sort the array in non-decreasing order.
2) Initialize two index variables to find the candidate 
   elements in the sorted array.
       (a) Initialize first to the leftmost index: l = 0
       (b) Initialize second  the rightmost index:  r = ar_size-1
3) Loop while l < r.
       (a) If (A[l] + A[r] == sum)  then return 1
       (b) Else if( A[l] + A[r] <  sum )  then l++
       (c) Else r--    
4) No candidates in whole array - return 0
</pre>
<p>Time Complexity: Depends on what sorting algorithm we use.  If we use Merge Sort or Heap Sort then (-)(nlogn) in worst case.  If we use Quick Sort then O(n^2) in worst case.<br />
Auxiliary Space : Again, depends on sorting algorithm. For example auxiliary space is O(n) for merge sort and O(1) for Heap Sort.</p>
<p>Example:<br />
Let Array be  {1, 4, 45, 6, 10, -8} and sum to find be 16</p>
<p>Sort the array<br />
A = {-8, 1, 4, 6, 10, 45}</p>
<p>Initialize l = 0,  r = 5<br />
A[l] + A[r] ( -8 + 45)  >  16    => decrement r.  Now r = 10<br />
A[l] + A[r] ( -8 + 10)  <  2      =>  increment l.  Now l = 1<br />
A[l] + A[r] ( 1 + 10)   <  16    =>  increment l.  Now l = 2<br />
A[l] + A[r] ( 4 + 10)   <  14    =>  increment l.  Now l = 3<br />
A[l] + A[r] ( 6 + 10)  == 16    =>  Found candidates (return 1)</p>
<p>Note: If there are more than one pair having the given sum then this algorithm reports only one. Can be easily extended for this though.</p>
<p>Implementation:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
# include &lt;stdio.h&gt;
# define bool int

void quickSort(int *, int, int);

bool hasArrayTwoCandidates(int A[], int arr_size, int sum)
{
    int l, r;

    /* Sort the elements */
    quickSort(A, 0, arr_size-1);

    /* Now look for the two candidates in the sorted 
       array*/
    l = 0;
    r = arr_size-1; 
    while(l &lt; r)
    {
         if(A[l] + A[r] == sum)
              return 1; 
         else if(A[l] + A[r] &lt; sum)
              l++;
         else // A[i] + A[j] &gt; sum
              r--;
    }    
    return 0;
}

/* Driver program to test above function */
int main()
{
    int A[] = {1, 4, 45, 6, 10, -8};
    int n = 16;
    int arr_size = 6;
   
    if( hasArrayTwoCandidates(A, arr_size, n))
        printf(&quot;Array has two elements with sum 16&quot;);
    else
        printf(&quot;Array doesn't have two elements with sum 16 &quot;);

    getchar();
    return 0;
}

/* FOLLOWING FUNCTIONS ARE ONLY FOR SORTING 
    PURPOSE */
void exchange(int *a, int *b)
{
    int temp;
    temp = *a;
    *a   = *b;
    *b   = temp;
}

int partition(int A[], int si, int ei)
{
    int x = A[ei];
    int i = (si - 1);
    int j;

    for (j = si; j &lt;= ei - 1; j++)
    {
        if(A[j] &lt;= x)
        {
            i++;
            exchange(&amp;A[i], &amp;A[j]);
        }
    }
    exchange (&amp;A[i + 1], &amp;A[ei]);
    return (i + 1);
}

/* Implementation of Quick Sort
A[] --&gt; Array to be sorted
si  --&gt; Starting index
ei  --&gt; Ending index
*/
void quickSort(int A[], int si, int ei)
{
    int pi;    /* Partitioning index */
    if(si &lt; ei)
    {
        pi = partition(A, si, ei);
        quickSort(A, si, pi - 1);
        quickSort(A, pi + 1, ei);
    }
}
</pre>
<p></br><br />
<strong>METHOD 2 (Use Hash Map)</strong><br />
Thanks to Bindu for suggesting this method and thanks to <a href="http://geeksforgeeks.org/forum/topic/array">Shekhu </a>for providing code.<br />
This method works in O(n) time if range of numbers is known.<br />
Let sum be the given sum and A[] be the array in which we need to find pair.  </p>
<pre>
1) Initialize Binary Hash Map M[] = {0, 0, …}
2) Do following for each element A[i] in A[]
   (a)	If M[x  - A[i]] is set then print the pair (A[i], x – A[i])
   (b)	Set M[A[i]]
</pre>
<p>Implementation:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#define MAX 100000

void printPairs(int arr[], int arr_size, int sum)
{
  int i, temp;
  bool binMap[MAX] = {0}; /*initialize hash map as 0*/

  for(i = 0; i &lt; arr_size; i++)
  {
    temp = sum - arr[i];
    if(temp &gt;= 0 &amp;&amp; binMap[temp] == 1)
    {
      printf(&quot;Pair with given sum %d is (%d, %d) \n&quot;, sum, arr[i], temp);
    }
    binMap[arr[i]] = 1;
  }
}

/* Driver program to test above function */
int main()
{
    int A[] = {1, 4, 45, 6, 10, 8};
    int n = 16;
    int arr_size = 6;

    printPairs(A, arr_size, n);

    getchar();
    return 0;
}
</pre>
<p>Time Complexity:  O(n)<br />
Auxiliary Space: O(R) where R is range of integers.</p>
<p>If range of numbers include negative numbers then also it works. All we have to do for negative numbers is to make everything positive by adding the absolute value of smallest negative integer to all numbers.</p>
<p>Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/" title="K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)">K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)</a></li><li><a href="http://www.geeksforgeeks.org/find-index-0-replaced-1-get-longest-continuous-sequence-1s-binary-array/" title="Find Index of 0 to be replaced with 1 to get longest continuous sequence of 1s in a binary array">Find Index of 0 to be replaced with 1 to get longest continuous sequence of 1s in a binary array</a></li><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/" title="K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)">K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)</a></li><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/" title="K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1">K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1</a></li><li><a href="http://www.geeksforgeeks.org/time-complexity-insertion-sort-inversions/" title="Time complexity of insertion sort when there are O(n) inversions?">Time complexity of insertion sort when there are O(n) inversions?</a></li><li><a href="http://www.geeksforgeeks.org/check-two-given-sets-disjoint/" title="How to check if two given sets are disjoint?">How to check if two given sets are disjoint?</a></li><li><a href="http://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/" title="Minimum Number of Platforms Required for a Railway/Bus Station">Minimum Number of Platforms Required for a Railway/Bus Station</a></li><li><a href="http://www.geeksforgeeks.org/given-two-sorted-arrays-number-x-find-pair-whose-sum-closest-x/" title="Find the closest pair from two sorted arrays">Find the closest pair from two sorted arrays</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/hashing/" rel="tag">Hashing</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fwrite-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/" data-text="Given an array A[] and a number x, check for pair in A[] with sum as x" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34845">
        <div id="dsq-comment-header-34845" class="dsq-comment-header">
            <cite id="dsq-cite-34845">
                <span id="dsq-author-user-34845">Abhinav Choudhury</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34845" class="dsq-comment-body">
            <div id="dsq-comment-message-34845" class="dsq-comment-message"><p>Second method: Can&#8217;t we just use a hash table and say the average time complexity will be O(n)? I mean in this case, we do not need to worry about the range of numbers, if we use a simple modulo hash function. Of course worse case time complexity may well be O(n^2), but auxiliary space will be O(1).</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33994">
        <div id="dsq-comment-header-33994" class="dsq-comment-header">
            <cite id="dsq-cite-33994">
                <span id="dsq-author-user-33994">abhismart92</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33994" class="dsq-comment-body">
            <div id="dsq-comment-message-33994" class="dsq-comment-message"><p>i didn&#8217;t understand why code is depended on range of numbers?????</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-34503">
        <div id="dsq-comment-header-34503" class="dsq-comment-header">
            <cite id="dsq-cite-34503">
                <span id="dsq-author-user-34503">Aishwarya Kr Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34503" class="dsq-comment-body">
            <div id="dsq-comment-message-34503" class="dsq-comment-message"><p>let&#8217;s say n_Max is maximum among all input numbers and let&#8217;s assume all numbers are positive then your are going to put a[n_Max]=1 to notify later that this element is present in the array. Therefore u must need array of size n_Max+1 and hence space complexity will be O(n_Max) or we can say it will depend on range of integers</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-32974">
        <div id="dsq-comment-header-32974" class="dsq-comment-header">
            <cite id="dsq-cite-32974">
                <span id="dsq-author-user-32974">Rachit Chawla</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32974" class="dsq-comment-body">
            <div id="dsq-comment-message-32974" class="dsq-comment-message"><p>I didn&#8217;t understand the second method.. please explain the if condition in the for loop..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33819">
        <div id="dsq-comment-header-33819" class="dsq-comment-header">
            <cite id="dsq-cite-33819">
                <span id="dsq-author-user-33819">Jonathan Chen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33819" class="dsq-comment-body">
            <div id="dsq-comment-message-33819" class="dsq-comment-message"><p>So let&#8217;s say we found a value A. We want a value B such that A+B=Sum. </p>
<p>The if statement is saying look at index B of our HashMap. If the value inside is 1, then we have come across B before (earlier in the looping). Thus, we are done, return A and B. </p>
<p>Otherwise, we haven&#8217;t come across B before. So, instead, we will change the value located at index A of the HashMap from 0 to 1 to indicate we have an A. In case we come across a B in the future.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32846">
        <div id="dsq-comment-header-32846" class="dsq-comment-header">
            <cite id="dsq-cite-32846">
                <span id="dsq-author-user-32846">Sumit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32846" class="dsq-comment-body">
            <div id="dsq-comment-message-32846" class="dsq-comment-message"><p>Method 2 stating that if range of numbers are given,,,<br />
If the range is known then we can sort them in O(n) time using counting or radix sort. Then method 1 itself will run in O(n) time. </p>
<p>Correct me if i m wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33818">
        <div id="dsq-comment-header-33818" class="dsq-comment-header">
            <cite id="dsq-cite-33818">
                <span id="dsq-author-user-33818">Jonathan Chen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33818" class="dsq-comment-body">
            <div id="dsq-comment-message-33818" class="dsq-comment-message"><p>Method 2 doesn&#8217;t use any sorting. </p>
<p>If we know the range of numbers, we can simply create (in this case) a hashmap that covers the entire range of numbers. Each index in the hashmap corresponds to that number. (index 2 corresponds to the number 2 in our problem). </p>
<p>We loop through the given array A.<br />
Do &#8216;Sum&#8217; &#8211; &#8216;A[i]&#8217; = (Sum &#8211; A[i])  (A, 0) into the hashtable. The &#8216;value&#8217; doesn&#8217;t even matter. All that matters is that I have A as a key in the HT. </p>
<p>In the future, if I come across B, I can simple &#8216;containsKey(A)&#8217;, which will return true and I can return the two values. </p>
<p>So, it doesnt seem like I need to know the range of numbers if I were using a language such as Java. Not sure if C though.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31520">
        <div id="dsq-comment-header-31520" class="dsq-comment-header">
            <cite id="dsq-cite-31520">
                <span id="dsq-author-user-31520">joenjoin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31520" class="dsq-comment-body">
            <div id="dsq-comment-message-31520" class="dsq-comment-message"><p>What if the pair is not limited to 2 numbers, but as many numbers as possible? What would be the solution for that? Thanks.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33974">
        <div id="dsq-comment-header-33974" class="dsq-comment-header">
            <cite id="dsq-cite-33974">
                <span id="dsq-author-user-33974">realsteel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33974" class="dsq-comment-body">
            <div id="dsq-comment-message-33974" class="dsq-comment-message"><p>meet in middle algorithm !!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-33975">
        <div id="dsq-comment-header-33975" class="dsq-comment-header">
            <cite id="dsq-cite-33975">
                <span id="dsq-author-user-33975">realsteel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33975" class="dsq-comment-body">
            <div id="dsq-comment-message-33975" class="dsq-comment-message"><p>meet in middle algorithm !!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-30290">
        <div id="dsq-comment-header-30290" class="dsq-comment-header">
            <cite id="dsq-cite-30290">
                <span id="dsq-author-user-30290">deepak</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30290" class="dsq-comment-body">
            <div id="dsq-comment-message-30290" class="dsq-comment-message"><p>a. User input 11.5, 12, -2.5<br />
 and 0.0 (in textarea in 4 lines) b. User input 23.5 in the text field. c. User clicks the button.<br />
d. The output would be 11.5, 12, -2.5 and 0.0 (in div in 4 lines) with line numbered 1 and 2 highlighted<br />
(which are 11.5 and 12) because they can add up to 23.5. e. If user input 12 in text field, only highlight<br />
line 2 (which is 12) meaning 12 itself one line only. f. If user input 3, highlight nothing. Show error message<br />
&#8220;No numbers can add up to this&#8221; beside the text field.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-30077">
        <div id="dsq-comment-header-30077" class="dsq-comment-header">
            <cite id="dsq-cite-30077">
                <span id="dsq-author-user-30077">Amit Baghel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30077" class="dsq-comment-body">
            <div id="dsq-comment-message-30077" class="dsq-comment-message"><p>Interesting <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29710">
        <div id="dsq-comment-header-29710" class="dsq-comment-header">
            <cite id="dsq-cite-29710">
                <span id="dsq-author-user-29710">abhishek</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29710" class="dsq-comment-body">
            <div id="dsq-comment-message-29710" class="dsq-comment-message"><p>// handling of duplicates included </p>
<p>#include<br />
#include </p>
<p>void swap(int A[], int p, int r) {<br />
    int temp = A[p];<br />
    A[p] = A[r];<br />
    A[r] = temp;<br />
}</p>
<p>int partition(int A[], int p, int r) {<br />
    int i = p+1;<br />
    int j = r;</p>
<p>    while(i &lt; j) {<br />
        while(i &lt;= r &amp;&amp; A[i]  p &amp;&amp; A[j] &gt;= A[p])<br />
            j&#8211;;</p>
<p>        if(i &lt; j)<br />
            swap(A, i, j);<br />
    }<br />
    if(A[j] &lt;= A[p])<br />
        swap(A, j, p);<br />
    return j;<br />
}</p>
<p>void mqsort(int A[], int p, int r) {<br />
    if(p &lt; r) {<br />
        int q = partition(A,p,r);<br />
        mqsort(A, p, q-1);<br />
        mqsort(A, q+1, r);<br />
    }<br />
}</p>
<p>int *returnpairs(int A[], int start, int end, int x) {<br />
    int *pairs = (int *)calloc((end-start+1)*(end-start), sizeof(int));<br />
    int index = 0;<br />
    mqsort(A, start, end);<br />
    int left = start;<br />
    int right = end;</p>
<p>    while(left  x)<br />
            right&#8211;;<br />
        else if(A[left] + A[right] &lt; x)<br />
            left++;<br />
        else {<br />
            if(A[left] == A[right]) {<br />
                int count = (right-left+1)*(right-left);<br />
                if(right-left == 2)<br />
                    count = 3;<br />
                else if(right-left == 1)<br />
                    count = 1;<br />
                int ind = 0;<br />
                for(ind = 0 ; ind &lt; count ; ind++) {<br />
                    pairs[index++] = A[left];<br />
                    pairs[index++] = A[right];<br />
                }<br />
                return pairs;<br />
            }<br />
            else {<br />
                int lcount = 1;<br />
                int rcount = 1;<br />
                int ind = 0;<br />
                while(left+1 = start &amp;&amp; A[right] == A[right-1]) {<br />
                    right&#8211;;<br />
                    rcount++;<br />
                }<br />
                while(ind &lt; lcount*rcount) {<br />
                    pairs[index++] = A[left];<br />
                    pairs[index++] = A[right];<br />
                    ind++;<br />
                }<br />
            }<br />
            left++;<br />
            right&#8211;;<br />
        }<br />
    }<br />
    return pairs;<br />
}</p>
<p>void printPairs(int A[], int size) {<br />
    int i = 0;<br />
    for(i = 0; i &lt; size &amp;&amp; A[i] != 0;) {<br />
        printf(&quot;%d, %dn&quot;, A[i], A[i+1]);<br />
        i = i+2;<br />
    }<br />
}<br />
int main() {<br />
    int arr[]={1, 3,2,3,1,1,2,2};<br />
    int size = sizeof(arr)/sizeof(arr[0]);<br />
    int x = 4;<br />
    int *p = returnpairs(arr, 0, size-1, x);<br />
    printPairs(p, size*(size-1));<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29492">
        <div id="dsq-comment-header-29492" class="dsq-comment-header">
            <cite id="dsq-cite-29492">
                <span id="dsq-author-user-29492">Harjit Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29492" class="dsq-comment-body">
            <div id="dsq-comment-message-29492" class="dsq-comment-message"><p>Here is the working code for all the cases. Key is to use sorting and hashing.</p>
<p>#include<br />
#include<br />
using namespace std;<br />
int compare (const void * a, const void * b)<br />
{<br />
  return ( *(short int*)a &#8211; *(short int*)b );<br />
}<br />
void display(int A[],int n)<br />
{<br />
     for(int i=0;i&lt;n;i++)<br />
      cout&lt;&lt;A[i]&lt;b)<br />
       return b;<br />
    else<br />
       return a;<br />
}<br />
void find_pairs(int A[],int n,int x)<br />
{</p>
<p>         int h[x/2+1];<br />
         for(int z=0;zj)))<br />
         {<br />
            if(A[i]+A[j]==x)<br />
            {<br />
                if(!(check_hash(h,min(A[i],A[j]))))<br />
                {<br />
                    cout&lt;&lt;&quot;n&quot;&lt;&lt;A[i]&lt;&lt;&quot;  &quot; &lt;<a>x)<br />
               j&#8211;;<br />
            else<br />
               i++;<br />
         }<br />
}       </p>
<p>int main()<br />
{<br />
    int n,i,x;<br />
    cin&gt;&gt;n;<br />
    int A[n];<br />
    for(i=0;i&gt;A[i];<br />
    cout&lt;&gt;x;<br />
    find_pairs(A,n,x);<br />
    getch();<br />
    return 0;<br />
}</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28953">
        <div id="dsq-comment-header-28953" class="dsq-comment-header">
            <cite id="dsq-cite-28953">
                <span id="dsq-author-user-28953">kkk</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28953" class="dsq-comment-body">
            <div id="dsq-comment-message-28953" class="dsq-comment-message"><p>what if elements are equal.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28381">
        <div id="dsq-comment-header-28381" class="dsq-comment-header">
            <cite id="dsq-cite-28381">
                <span id="dsq-author-user-28381">MayankSwarnkar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28381" class="dsq-comment-body">
            <div id="dsq-comment-message-28381" class="dsq-comment-message"><p>//Given an array A[] and a number x, check for pair in A[] with sum as x</p>
<p>#include<br />
#include<br />
#include<br />
#include</p>
<p>using namespace std;</p>
<p>int main()<br />
{<br />
	vector v;<br />
	vector::iterator pos1,pos2;<br />
	int i,n;<br />
	for(i=1;i&lt;101;i++)<br />
	v.push_back(rand()%100);<br />
	for(pos1=v.begin();pos1!=v.end();pos1++)<br />
	cout&lt;&lt;*pos1&lt;&lt;endl;<br />
	sort(v.begin(),v.end());<br />
	cout&lt;&lt;&quot;Enter the number&quot;&lt;&gt;n;<br />
	for(pos1=v.begin();pos1!=v.end();pos1++)<br />
	{<br />
		for(pos2=pos1;pos2!=v.end();pos2++)<br />
		{<br />
			if(*pos1+*pos2==n)<br />
			{<br />
				cout&lt;&lt;&quot;One of the pair whose sum is equal to the given number is-&quot;&lt;&lt;endl;<br />
				cout&lt;&lt;*pos1&lt;&lt;&quot; &quot;&lt;&lt;*pos2&lt;&lt;endl;<br />
			}<br />
		}<br />
	}<br />
	return 0;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-29493">
        <div id="dsq-comment-header-29493" class="dsq-comment-header">
            <cite id="dsq-cite-29493">
                <span id="dsq-author-user-29493">Harjit Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29493" class="dsq-comment-body">
            <div id="dsq-comment-message-29493" class="dsq-comment-message"><p>#include</p>
<p>#include</p>
<p>using namespace std;</p>
<p>int compare (const void * a, const void * b)</p>
<p>{</p>
<p>  return ( *(short int*)a &#8211; *(short int*)b );</p>
<p>}</p>
<p>void display(int A[],int n)</p>
<p>{</p>
<p>     for(int i=0;i&lt;n;i++)</p>
<p>      cout&lt;&lt;A[i]&lt;b)</p>
<p>       return b;</p>
<p>    else</p>
<p>       return a;</p>
<p>}       </p>
<p>void find_pairs(int A[],int n,int x)</p>
<p>{</p>
<p>         int h[x/2+1];</p>
<p>         for(int z=0;zj)))</p>
<p>         {</p>
<p>            if(A[i]+A[j]==x)</p>
<p>            {</p>
<p>                if(!(check_hash(h,min(A[i],A[j]))))</p>
<p>                {</p>
<p>                    cout&lt;&lt;&quot;n&quot;&lt;&lt;A[i]&lt;&lt;&quot;  &quot; &lt;<a>x)</p>
<p>               j&#8211;;</p>
<p>            else</p>
<p>               i++;</p>
<p>         }</p>
<p>}       </p>
<p>int main()</p>
<p>{</p>
<p>    int n,i,x;</p>
<p>    cin&gt;&gt;n;</p>
<p>    int A[n];</p>
<p>    for(i=0;i&gt;A[i];</p>
<p>    cout&lt;&gt;x; </p>
<p>    find_pairs(A,n,x);</p>
<p>    getch();</p>
<p>    return 0;</p>
<p>}</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28260">
        <div id="dsq-comment-header-28260" class="dsq-comment-header">
            <cite id="dsq-cite-28260">
                <span id="dsq-author-user-28260">mahi2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28260" class="dsq-comment-body">
            <div id="dsq-comment-message-28260" class="dsq-comment-message"><p>One of the approach is &#8230;if n is the number<br />
for(i=0;i&lt;n;i++)<br />
{num=n-a[i]<br />
{for(j=i+1;j&lt;n;j++)<br />
{search for num..if found then a[i]+a[j] is the result!<br />
 } }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27920">
        <div id="dsq-comment-header-27920" class="dsq-comment-header">
            <cite id="dsq-cite-27920">
                <span id="dsq-author-user-27920">din</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27920" class="dsq-comment-body">
            <div id="dsq-comment-message-27920" class="dsq-comment-message"><p>can this be done in O(n) without hashmap??</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-21544">
        <div id="dsq-comment-header-21544" class="dsq-comment-header">
            <cite id="dsq-cite-21544">
                <span id="dsq-author-user-21544">Varunvats</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21544" class="dsq-comment-body">
            <div id="dsq-comment-message-21544" class="dsq-comment-message"><p>void printPairs(int A[], int n, int x) {<br />
    map&lt;int,int&gt; m_map;<br />
    for(int i=0; i&lt;n; i++){<br />
        if(m_map[A[i]]){<br />
            cout&lt;&lt;&quot;index:&quot;&lt;&lt;m_map[A[i]]&lt;&lt;&quot; &quot;&lt;&lt;i;<br />
            break;<br />
        }<br />
        else<br />
            m_map[x-A[i]]=i;<br />
    }<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-21161">
        <div id="dsq-comment-header-21161" class="dsq-comment-header">
            <cite id="dsq-cite-21161">
                <span id="dsq-author-user-21161">Abhay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21161" class="dsq-comment-body">
            <div id="dsq-comment-message-21161" class="dsq-comment-message"><p>Another approach, (PS: Not read the comments , so sorry if already mentioned) . Sort the array, and traverse the array linearly , searching for x-a[i]. If found return true , else false. </p>
<pre> <code language="Java">
import java.util.Arrays;
class Solver
{
    
    public boolean SolverUtil(int a[],int x)
    {
        Arrays.sort(a);
        int End = a.length;
        int cnt=0;
        for(int i=0;i&lt;End-1;i++)
        {
            if(Binsearch(a,x-a[i],0,End))
                    return true;
        }
        return false;
        
    }
    public boolean Binsearch(int a[],int N,int low,int high)
    {
        int mid=(low+high)/2;
        if(a[mid]==N)
            return true;
        if(low&lt;high)
        {
            if(a[mid]&gt;N)
                return Binsearch(a,N,low,mid-1);
            else if(a[mid]&lt;N)
                return Binsearch(a,N,mid+1,high);
        }
        return false;
    }
}
public class Main 
{
    public static void main(String[] args)
    {
        int A[] = {1, 4, 45, 6, 10, 8};
        Solver ob1 = new Solver();
        if(ob1.SolverUtil(A,16))
            System.out.println(&quot;Yes&quot;);
        else System.out.println(&quot;No&quot;);
        
    }
        
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ronny odd alt depth-2" id="dsq-comment-26843">
        <div id="dsq-comment-header-26843" class="dsq-comment-header">
            <cite id="dsq-cite-26843">
                <span id="dsq-author-user-26843">Ronny</span>
            </cite>
        </div>
        <div id="dsq-comment-body-26843" class="dsq-comment-body">
            <div id="dsq-comment-message-26843" class="dsq-comment-message"><p>But what if the sum to be found is twice a number present but that number occurs only once.<br />
Eg. arr[]={1,5,9,12,24};<br />
and sum to be searched is 18. your procedure will return true for this case.</p>
<p>Refer <a href="http://ideone.com/KCFl4j" rel="nofollow">http://ideone.com/KCFl4j</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-32054">
        <div id="dsq-comment-header-32054" class="dsq-comment-header">
            <cite id="dsq-cite-32054">
                <span id="dsq-author-user-32054">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32054" class="dsq-comment-body">
            <div id="dsq-comment-message-32054" class="dsq-comment-message"><p>This case can be easily handled by augmenting Binsearch routine. Refer here: <a href="http://ideone.com/wZF7vI" rel="nofollow">http://ideone.com/wZF7vI</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-18463">
        <div id="dsq-comment-header-18463" class="dsq-comment-header">
            <cite id="dsq-cite-18463">
                <span id="dsq-author-user-18463">rkl</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18463" class="dsq-comment-body">
            <div id="dsq-comment-message-18463" class="dsq-comment-message"><pre> <code language="Java">
public class Sum {

	public static void main(String[] args) {
		int[] arr = {3, -2, 5, 6, 1, 9, 7, 8, 12, 4};
		
		printPairs(arr, 10);
	}

	private static void printPairs(int[] arr, int sum) {

		HashMap&lt;Integer, Boolean&gt; map = new HashMap&lt;Integer, Boolean&gt;();
		
		for(int i = 0; i &lt; 10; i++) {
			if (map.containsKey(sum-arr[i])) {
				System.out.println(arr[i] + &quot; &quot; + (sum -arr[i]));
			} else {
				map.put(arr[i], true);
			}
		}
	}
}
</code> </pre>
<p>Output is:<br />
9 1<br />
7 3<br />
12 -2<br />
4 6</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-29613">
        <div id="dsq-comment-header-29613" class="dsq-comment-header">
            <cite id="dsq-cite-29613">
                <span id="dsq-author-user-29613">Ashish Saxena</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29613" class="dsq-comment-body">
            <div id="dsq-comment-message-29613" class="dsq-comment-message"><p>This is a java version of method 2. Here are few comments</p>
<p>For High N (Array Size). We also need to initialize HashMap with high capacity to avoid re hash frequently. </p>
<p>By default the capacity is 16.</p>
<p>Please correct me  if I am wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-18355">
        <div id="dsq-comment-header-18355" class="dsq-comment-header">
            <cite id="dsq-cite-18355">
                <span id="dsq-author-user-18355">ebcdic666</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18355" class="dsq-comment-body">
            <div id="dsq-comment-message-18355" class="dsq-comment-message"><p>For the hash table solution, we need not know the range of the numbers, we can use std::set in C++ to record all the elements seen.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-17959">
        <div id="dsq-comment-header-17959" class="dsq-comment-header">
            <cite id="dsq-cite-17959">
                <span id="dsq-author-user-17959">pawan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17959" class="dsq-comment-body">
            <div id="dsq-comment-message-17959" class="dsq-comment-message"><p>#include</p>
<p>int arr[6]={3,5,18,7,9,-12};</p>
<p>int sort(int arr_len)<br />
{<br />
	int i,j;<br />
	printf(&#8220;2\n&#8221;);<br />
	for(i=0;i&lt;arr_len;i++)<br />
		{<br />
			for(j=0;jarr[j+1])<br />
						{<br />
							int temp=arr[j];<br />
							arr[j]=arr[j+1];<br />
							arr[j+1]=temp;<br />
						}<br />
				}<br />
		}</p>
<p>	for(i=0;i&lt;arr_len;i++)<br />
		printf(&quot;sorted %d\n&quot;,arr[i]);</p>
<p>	return 0;<br />
}<br />
int computation(int arr_len,int sum)<br />
{</p>
<p>	int l=0,r=arr_len-1;</p>
<p>	while(l&lt;r)<br />
	{<br />
		if(arr[l]+arr[r]==sum)<br />
		{<br />
			printf(&quot;the sume of %d and %d is %d\n&quot;,arr[l],arr[r],sum);<br />
			break;<br />
		}		</p>
<p>		else if(arr[l]+arr[r]&lt;sum)<br />
		l++;</p>
<p>		else r&#8211;;<br />
	}</p>
<p>}<br />
int main()<br />
{</p>
<p>	int arr_len=6;<br />
	int sum=16;<br />
	printf(&quot;1\n&quot;);<br />
	sort(arr_len);<br />
	computation(arr_len,sum);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-even depth-1" id="dsq-comment-17608">
        <div id="dsq-comment-header-17608" class="dsq-comment-header">
            <cite id="dsq-cite-17608">
                <span id="dsq-author-user-17608">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17608" class="dsq-comment-body">
            <div id="dsq-comment-message-17608" class="dsq-comment-message"><p>Here is the simple quadratic O(n^2) solution: </p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
int find_two_elements_with_given_sum(int array[], int sum, int array_size)
{
  int i, j;
  for(i=0; i&lt;array_size; i++) {
    for(j=i+1; j&lt;array_size; j++) {
      if(array[i]+array[j]==sum) {
        return 1;
      }
    }
  }
  return 0;
}

int main()
{
  int array[] = {1, 4, 45, 5, 11, -8};
  int sum = 16;
  int array_size = sizeof(array)/sizeof(array[0]);
  printf(&quot;%d\n&quot;, find_two_elements_with_given_sum(array, sum, array_size));
  return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-17232">
        <div id="dsq-comment-header-17232" class="dsq-comment-header">
            <cite id="dsq-cite-17232">
                <span id="dsq-author-user-17232">Chinmaya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17232" class="dsq-comment-body">
            <div id="dsq-comment-message-17232" class="dsq-comment-message"><p>Alternatively</p>
<p>1 &#8211; Sort the array &#8211; O(nlogn)<br />
2 &#8211; for each element in the array,perform binary search for the element(sum-A[i]). &#8211; O(nlogn)<br />
3 &#8211; If found, print success.</p>
<p>find_sum_elements(vector&lt;int&gt; a[],int sum)<br />
{<br />
  sort(a.begin(),a.end());<br />
  for(int i=0;i&lt;a.size();i++)<br />
  {<br />
    if(binary_search(a.begin()+i+1,a.end(),sum &#8211; a[i]))<br />
      return SUCCESS;<br />
  }<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-krishnx odd alt thread-even depth-1" id="dsq-comment-16838">
        <div id="dsq-comment-header-16838" class="dsq-comment-header">
            <cite id="dsq-cite-16838">
                <span id="dsq-author-user-16838">krishnx</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16838" class="dsq-comment-body">
            <div id="dsq-comment-message-16838" class="dsq-comment-message"><pre> <code language="C">
#include&lt;iostream&gt;
#include&lt;cstdlib&gt;

using namespace std;

void findPair(int a[], int, int);
int compare(const void *a, const void *b);

int main()
{
  int a[] = {1, 4, 45, 6, 10, -8};
  int length = sizeof(a)/sizeof(a[0]);
  cout &lt;&lt; length &lt;&lt; endl;

  int sum = 0;
  cout &lt;&lt; &quot;Enter the sum: \n&quot;;
  cin &gt;&gt; sum;

  findPair(a, length, sum);

  return 0;
}

int compare(const void* a, const void* b)
{
  return ( *(int*)a - *(int*)b );
}

void findPair(int a[], int length, int sum)
{
  int left = 0;
  int right = length - 1;
  int result[2] ;

  qsort(a, length, sizeof(int), compare);

  while(left &lt; right) {
    if(a[left] + a[right] &lt; sum)
      left++;
    else if(a[left] + a[right] &gt; sum)
      right--;
    else
      break;
  }
  cout &lt;&lt; a[left] &lt;&lt; &quot;, &quot; &lt;&lt; a[right] &lt;&lt; endl;
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-16468">
        <div id="dsq-comment-header-16468" class="dsq-comment-header">
            <cite id="dsq-cite-16468">
                <span id="dsq-author-user-16468">Nikin Kumar Jain</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16468" class="dsq-comment-body">
            <div id="dsq-comment-message-16468" class="dsq-comment-message"><p>Please check out Little more optimized code for performing Quicksort.</p>
<pre> <code language="C">
// QSortProject.cpp : Defines the entry point for the console application.
//

#include &quot;stdafx.h&quot;
#include &lt;iostream&gt;
using namespace std;


int partition(int arr[], int si, int ei)
{
	int i = 0;
	for(int j = 0; j &lt; ei; j++)
	{
		if(arr[i] &lt;= arr[ei])
		{
			if(i!=j)
			{
				swap(arr[i], arr[j]);
			}
			i++;
		}
	}
	swap(arr[i], arr[ei]);
	return i;
}

void quicksort(int arr[], int si, int ei)
{
	if(si &gt; ei)
		return;
	int pi = partition(arr, si, ei);
	quicksort(arr, si, pi-1);
	quicksort(arr, pi+1, ei);
}

int _tmain(int argc, _TCHAR* argv[])
{
	int arr[] = {2, 10, 9, 8, 4, 7, 6, 5};
	quicksort(arr, 0, sizeof(arr)/sizeof(int) -1 );

	for(int i=0;i&lt;sizeof(arr)/sizeof(int);i++)
		cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;
	getchar();

	return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15337">
        <div id="dsq-comment-header-15337" class="dsq-comment-header">
            <cite id="dsq-cite-15337">
                <span id="dsq-author-user-15337">Aman</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15337" class="dsq-comment-body">
            <div id="dsq-comment-message-15337" class="dsq-comment-message"><p>what if there are duplicate elements in second method</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-15338">
        <div id="dsq-comment-header-15338" class="dsq-comment-header">
            <cite id="dsq-cite-15338">
                <span id="dsq-author-user-15338">alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15338" class="dsq-comment-body">
            <div id="dsq-comment-message-15338" class="dsq-comment-message"><p>doesn&#8217;t matter even if there are duplicates. Put only first occurrence of duplicate element and ignore rest because ultimately you have to find pair of numbers not indexes.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-18283">
        <div id="dsq-comment-header-18283" class="dsq-comment-header">
            <cite id="dsq-cite-18283">
http://www.piyush.co.nf                <span id="dsq-author-user-18283">binary001</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18283" class="dsq-comment-body">
            <div id="dsq-comment-message-18283" class="dsq-comment-message"><p>if there are duplicate a you want to print all the pairs ..<br />
1) sort the array<br />
2) create 2d array (int ar[n][2])  which store the no and its frequency .<br />
3) now u got duplicate free array<br />
4) use the normal algo. and at the time of printing use loop<br />
  for i =1 to f_X<br />
     for j =1 to f_Y<br />
       print x,y;</p>
<p>f_x and f_y are the frequency of X and Y</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15274">
        <div id="dsq-comment-header-15274" class="dsq-comment-header">
            <cite id="dsq-cite-15274">
                <span id="dsq-author-user-15274">alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15274" class="dsq-comment-body">
            <div id="dsq-comment-message-15274" class="dsq-comment-message"><p>another approach:<br />
1.) put all the elements in a hash table<br />
2.) Use that hashtable to find element sum-a[i] from i to N</p>
<p>#include<br />
#include<br />
#define MAX 6<br />
#define MIN 0<br />
#define LIMIT 100</p>
<p>void print(int arr[])<br />
{<br />
	int i;<br />
	for(i=MIN;i&lt;11;i++)<br />
	{<br />
		printf(&quot;%d, &quot;,arr[i]);<br />
	}<br />
}</p>
<p>void pair_sum(int arr[], int sum)<br />
{<br />
	int ht[LIMIT] = {0};<br />
	int remaining;<br />
	int i;</p>
<p>	printf(&quot;\n&quot;);</p>
<p>	print(ht);<br />
	for(i=0;i&lt;MAX;i++)<br />
	{<br />
		ht[arr[i]]+=1;<br />
	}<br />
	print(ht);</p>
<p>	for(i=0;i1) )<br />
		{<br />
			printf(&#8220;\n%d %d&#8221;, arr[i], remaining);<br />
			ht[remaining]&#8211;;<br />
			ht[arr[i]]&#8211;;<br />
		}<br />
		else if(remaining==arr[i] &amp;&amp; !(ht[remaining]&gt;1))<br />
		{<br />
			continue;<br />
		}<br />
		else if(ht[remaining]&gt;0)<br />
		{<br />
			printf(&#8220;\n%d %d&#8221;, arr[i], remaining);<br />
			ht[remaining]&#8211;;<br />
			ht[arr[i]]&#8211;;<br />
		}</p>
<p>	}	</p>
<p>}</p>
<p>int main()<br />
{<br />
	int arr[MAX] = {1,4,1,6,10,8};<br />
	pair_sum(arr,16);<br />
	return 0;<br />
}</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15232">
        <div id="dsq-comment-header-15232" class="dsq-comment-header">
            <cite id="dsq-cite-15232">
                <span id="dsq-author-user-15232">Rohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15232" class="dsq-comment-body">
            <div id="dsq-comment-message-15232" class="dsq-comment-message"><p>I ran this code for int a[] = {-4,-4,-4,-4,-4,1,2,3,4,3,5,6,10};</p>
<p>even though this array contains -ve values HASH[-ve integer] is not giving any error&#8230;<br />
and code is running fine without adding any offset&#8230;</p>
<p>why is this happening??</p>
<pre> <code language="C">

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


int HASH[10000]={0};

int bin_map_solution(int a[])
{
	int i =0;
	int number = 6;
    int count=1;
	for(i=0;i&lt;13;i++)
	{
		int temp = number - a[i];
		printf(&quot;Pass : %d with temp = %d and a[%d]=%d\n&quot;,count++,temp,i,a[i]);

		if(HASH[temp]==1)
		{
			printf(&quot;Pair :  %d   %d \n&quot;,temp,a[i]);
			break;
		}
		printf(&quot;setting HASH[%d] to 1 where a[%d]=%d\n &quot;,a[i],i,a[i]);
		HASH[a[i]]=1;
	}

	return EXIT_SUCCESS;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-13883">
        <div id="dsq-comment-header-13883" class="dsq-comment-header">
            <cite id="dsq-cite-13883">
                <span id="dsq-author-user-13883">batfan47</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13883" class="dsq-comment-body">
            <div id="dsq-comment-message-13883" class="dsq-comment-message"><p>Correcting Bad formatting in the previous comment</p>
<pre> <code language="C">
#include &lt;iostream&gt;
#include &lt;cmath&gt;
#define MAX 100000

using namespace::std;
typedef long element;
typedef unsigned long counter;

long findmin(element term[], counter count, int sum)
{
 counter i; 
 element min;
 for(i = 1, min = term[0]; i != count; i++)
   if(term[i] &lt; min)
     min = term [i];
 if (min &lt; 0)
   if(sum &lt; min)
     return abs(sum);
   else 
     return abs(min);
 else return 0;
}

void printPairs(element term[], counter count, long sum)
{
  counter i;
  element origsum = sum, val =  findmin(term, count, sum), temp;
  bool binMap[MAX] = {0}; /*initialize hash map as 0*/
    // though 0 can safely be added for efficiency we check here to avoid an iteration
  if (val)
  {
    for(i = 0; i &lt; count; term[i] += val, i++);
    sum += (2 * val);
  }

  for(i = 0; i &lt; count; i++)
  {
    temp = sum - term[i];
    if(temp &gt;=0 &amp;&amp; binMap[temp] == 1)
      cout &lt;&lt; &quot;Pair with given sum &quot;&lt;&lt; origsum &lt;&lt; &quot; is &quot;
      &lt;&lt; term[i] - val &lt;&lt; &quot; and &quot; &lt;&lt; temp - val &lt;&lt; &quot;.&quot; &lt;&lt; endl;
    binMap[term[i]] = 1;
  }
}
 
void printArray(element term[], counter count)
{
  for (counter i = 0; i != count; cout &lt;&lt; term[i++] &lt;&lt; ' ');
  cout &lt;&lt; endl;
}  
 
int main()
{
  element term[] = {1, 4, 45, 6, 10, 8}, sum = 16;
  counter count = sizeof(term)/sizeof(element);
  printArray(term, count)
  printPairs(term, count, sum);
  return 0;
} 
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-13890">
        <div id="dsq-comment-header-13890" class="dsq-comment-header">
            <cite id="dsq-cite-13890">
                <span id="dsq-author-user-13890">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13890" class="dsq-comment-body">
            <div id="dsq-comment-message-13890" class="dsq-comment-message"><p>This method seems to be similar to method 2 in the above post.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-13900">
        <div id="dsq-comment-header-13900" class="dsq-comment-header">
            <cite id="dsq-cite-13900">
                <span id="dsq-author-user-13900">Ankit Malhotra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-13900" class="dsq-comment-body">
            <div id="dsq-comment-message-13900" class="dsq-comment-message"><p>It is exactly the same method but it has been changed to handle negative values in both terms and the sum.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-12966">
        <div id="dsq-comment-header-12966" class="dsq-comment-header">
            <cite id="dsq-cite-12966">
                <span id="dsq-author-user-12966">batfan47</span>
            </cite>
        </div>
        <div id="dsq-comment-body-12966" class="dsq-comment-body">
            <div id="dsq-comment-message-12966" class="dsq-comment-message"><p>For bitmap using negative integers, twice the absolute value of the least negative has to be added to the sum. Also the value of the sum itself can also be negative and should be considered while finding the least negative value. Following is the code that includes this and solves the problem for negative values.</p>
<p>//<br />
#include &lt;iostream&gt;<br />
#include &lt;cmath&gt;<br />
#define MAX 100000</p>
<p>int findmin(int arr[], int arr_size, int sum)<br />
{<br />
 int i, min;<br />
 for(i = 1, min = arr[0]; i &lt; arr_size; i++)<br />
  {<br />
    if(arr[i] &lt; min)<br />
    {<br />
      min = arr [i];<br />
    }<br />
  }<br />
 if (min &lt; 0)<br />
 {<br />
   if(sum &lt; min)<br />
   {<br />
     return std::abs(sum);<br />
   }<br />
   else<br />
   {<br />
     return std::abs(min);<br />
   }<br />
 }<br />
 else<br />
 {<br />
   return 0;<br />
 }<br />
}</p>
<p>void printPairs(int arr[], int arr_size, int sum)<br />
{<br />
  int i, origsum = sum, val =  findmin(arr, arr_size, sum), temp;<br />
  bool binMap[MAX] = {0}; /*initialize hash map as 0*/<br />
    // though 0 can safely be added for efficiency we check here to avoid an iteration<br />
  if (val)<br />
  {<br />
    for(i = 0; i &lt; arr_size; arr[i] += val, i++);<br />
    sum += (2 * val);<br />
  }</p>
<p>  for(i = 0; i &lt; arr_size; i++)<br />
  {<br />
    temp = sum &#8211; arr[i];<br />
    if(temp &gt;=0 &amp;&amp; binMap[temp] == 1)<br />
    {<br />
      std::cout &lt;&lt; &quot;Pair with given sum &quot;&lt;&lt; origsum &lt;&lt; &quot; is &quot;<br />
      &lt;&lt; arr[i] &#8211; val &lt;&lt; &quot; and &quot; &lt;&lt; temp &#8211; val &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;<br />
    }<br />
    binMap[arr[i]] = 1;<br />
  }<br />
}</p>
<p>/* Driver program to test above function */<br />
int main()<br />
{<br />
  int A[] = {1, 4, 45, 6, 10, 8};<br />
  int n = 16, arr_size = sizeof(A)/sizeof(int);</p>
<p>  printPairs(A, arr_size, n);<br />
  return 0;<br />
} </p>
<p>// </p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10711">
        <div id="dsq-comment-header-10711" class="dsq-comment-header">
            <cite id="dsq-cite-10711">
                <span id="dsq-author-user-10711">bunty</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10711" class="dsq-comment-body">
            <div id="dsq-comment-message-10711" class="dsq-comment-message"><p>@Geeks: Correction in second method&#8217;s last comments, </p>
<p>Auxiliary Space: O(R) where R is range of integers.<br />
&#8221; R can not be just the range of number given, as the sum of two numbers from a range of numbers can be out of the range of that numbers&#8221;<br />
Ex; range could be {1,2,3,4,5} and sum is 9,<br />
then Aux array must be at least 9 elements long.</p>
<p>Also these method does not need the info of the range of number.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9430">
        <div id="dsq-comment-header-9430" class="dsq-comment-header">
            <cite id="dsq-cite-9430">
                <span id="dsq-author-user-9430">Spock</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9430" class="dsq-comment-body">
            <div id="dsq-comment-message-9430" class="dsq-comment-message"><p>Well we can simply use array instead of hashmap.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-8760">
        <div id="dsq-comment-header-8760" class="dsq-comment-header">
            <cite id="dsq-cite-8760">
                <span id="dsq-author-user-8760">Anuj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8760" class="dsq-comment-body">
            <div id="dsq-comment-message-8760" class="dsq-comment-message"><p>Can you elaborate the Method 2 ?<br />
What is Hash map and why its subscript is arr[i]</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-8402">
        <div id="dsq-comment-header-8402" class="dsq-comment-header">
            <cite id="dsq-cite-8402">
                <span id="dsq-author-user-8402">Shyam</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8402" class="dsq-comment-body">
            <div id="dsq-comment-message-8402" class="dsq-comment-message"><p>What does &#8220;If range of numbers include negative numbers then also it works. All we have to do for negative numbers is scale everything with reference to the smallest negative integer in the given range.&#8221; mean? Can someone please explain this statement?</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-8406">
        <div id="dsq-comment-header-8406" class="dsq-comment-header">
            <cite id="dsq-cite-8406">
                <span id="dsq-author-user-8406">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8406" class="dsq-comment-body">
            <div id="dsq-comment-message-8406" class="dsq-comment-message"><p>@Shyam: We have changed the language so that it makes sense now. Please let us know if it is clear now.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7350">
        <div id="dsq-comment-header-7350" class="dsq-comment-header">
            <cite id="dsq-cite-7350">
                <span id="dsq-author-user-7350">Nihal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7350" class="dsq-comment-body">
            <div id="dsq-comment-message-7350" class="dsq-comment-message"><p>This one works well. No extra space required. And Time Complexity = o(n)</p>
<pre> <code language="C">
#include &lt;stdio.h&gt;
#include&lt;conio.h&gt;
using namespace std;
int checkpair(int[] ,int, int);
int main()
{
    int a[5] = {6,1,18,3,4};      
    bool result = checkpair(a,24,0);
    if(result)
    printf(&quot;pair exists&quot;);
    else
    printf(&quot;pair does not exists&quot;);
    getch();
    return 0;
}

int checkpair(int a[],int x, int k)
{
    int sub;
    if(k&gt;= 5) return false;
    sub = x-a[k];
    for ( int i = k+1; i&lt;5; i++)
    {
        if(a[i]==sub)
        return true;          
        }
        return(checkpair(a,x,k+1));      


}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-7351">
        <div id="dsq-comment-header-7351" class="dsq-comment-header">
            <cite id="dsq-cite-7351">
                <span id="dsq-author-user-7351">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7351" class="dsq-comment-body">
            <div id="dsq-comment-message-7351" class="dsq-comment-message"><p>@Nihal: This doesn&#8217;t seem to be O(n).  You have recursion in a loop.  Please correct me if i am wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-7398">
        <div id="dsq-comment-header-7398" class="dsq-comment-header">
            <cite id="dsq-cite-7398">
                <span id="dsq-author-user-7398">Nihal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7398" class="dsq-comment-body">
            <div id="dsq-comment-message-7398" class="dsq-comment-message"><p>@kartik &#8211; the recursion is outside the for loop. So it seems to be o(n).</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-4" id="dsq-comment-7399">
        <div id="dsq-comment-header-7399" class="dsq-comment-header">
            <cite id="dsq-cite-7399">
                <span id="dsq-author-user-7399">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7399" class="dsq-comment-body">
            <div id="dsq-comment-message-7399" class="dsq-comment-message"><p>Agree! Recursion is outside the loop, but the time complexity still seems to be O(n^2) as the statements inside the loop will run O(n^2) times.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-4" id="dsq-comment-8547">
        <div id="dsq-comment-header-8547" class="dsq-comment-header">
            <cite id="dsq-cite-8547">
http://www.facebook.com/profile.php?id=100003405992366                <span id="dsq-author-user-8547">Deepak</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8547" class="dsq-comment-body">
            <div id="dsq-comment-message-8547" class="dsq-comment-message"><p>case handled When Array Contains The Duplicates Elementi hope its will work for all cases # inlcdue # define bool intvoid quickSort(int *, int, int);void hasArrayTwoCandidates(int A[], int arr_size, int sum){    int l, r;    /* Sort the elements */    quickSort(A, 0, arr_size-1);    /* Now look for the two candidates in the sorted       array*/    l = 0;    r = arr_size-1;    while(l &lt; r)    {         if(A[l] + A[r] == sum)         {                printf( &quot; %d %d &quot;, A[l],A[r]);                l++;                 r&#8211;;         }        else if(A[l] + A[r]  sum              r&#8211;;    }}/* Driver program to test above function */int main(){   int A[] = {1,2,3,4,6,3,10,5};    int n = 6;    int arr_size = 8;    hasArrayTwoCandidates(A, arr_size, n);    getchar();    return 0;}/* FOLLOWING FUNCTIONS ARE ONLY FOR SORTING    PURPOSE */void exchange(int *a, int *b){    int temp;    temp = *a;    *a   = *b;    *b   = temp;}int partition(int A[], int si, int ei){    int x = A[ei];    int i = (si &#8211; 1);    int j;    for (j = si; j  Starting indexei  &#8211;&gt; Ending index*/void quickSort(int A[], int si, int ei){    int pi;    /* Partitioning index */    if(si &lt; ei)    {        pi = partition(A, si, ei);        quickSort(A, si, pi &#8211; 1);        quickSort(A, pi + 1, ei);    }}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-10051">
        <div id="dsq-comment-header-10051" class="dsq-comment-header">
            <cite id="dsq-cite-10051">
                <span id="dsq-author-user-10051">Yogesh Batra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10051" class="dsq-comment-body">
            <div id="dsq-comment-message-10051" class="dsq-comment-message"><p>yes its a naive method. O(n^2) complexity. </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-8573">
        <div id="dsq-comment-header-8573" class="dsq-comment-header">
            <cite id="dsq-cite-8573">
http://www.facebook.com/profile.php?id=100003406008905                <span id="dsq-author-user-8573">She</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8573" class="dsq-comment-body">
            <div id="dsq-comment-message-8573" class="dsq-comment-message"><p>Thanks for pointing out the typo.  We have coetcrred it.Please note that there is difference between two terms &#8220;Space Complexity&#8221; and &#8220;Auxiliary Space&#8221;.  Space complexity of Heap Sort, Merge Sort and QuickSort is O(n).  But Auxiliary space needed in typical implementation of Merge Sort is O(n) and for Heap sort it is O(n).  For a typical implementation of QuickSort, auxiliary space needed is O(n) in worst case (sorted array case).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-prashanth even thread-even depth-1" id="dsq-comment-6995">
        <div id="dsq-comment-header-6995" class="dsq-comment-header">
            <cite id="dsq-cite-6995">
                <span id="dsq-author-user-6995">Prashanth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6995" class="dsq-comment-body">
            <div id="dsq-comment-message-6995" class="dsq-comment-message"><p>Hi, Does method 2 works for A[]={-3,0,1} and Sum = 2 ?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-6996">
        <div id="dsq-comment-header-6996" class="dsq-comment-header">
            <cite id="dsq-cite-6996">
                <span id="dsq-author-user-6996">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6996" class="dsq-comment-body">
            <div id="dsq-comment-message-6996" class="dsq-comment-message"><p>@Prashanth: Please take a closer look at the article.  It says following at the end:</p>
<p><em>If range of numbers include negative numbers then also it works. All we have to do for negative numbers is scale everything with reference to the smallest negative integer in the given range</em></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhimanyu-vohra even thread-odd thread-alt depth-1" id="dsq-comment-6866">
        <div id="dsq-comment-header-6866" class="dsq-comment-header">
            <cite id="dsq-cite-6866">
                <span id="dsq-author-user-6866">Abhimanyu Vohra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6866" class="dsq-comment-body">
            <div id="dsq-comment-message-6866" class="dsq-comment-message"><p>In method 1 before looping should we not check if A[(l+r)/2] &gt; sum than set value of r = (l+r)/2 -1 . I think we should proceed after this check.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-10743">
        <div id="dsq-comment-header-10743" class="dsq-comment-header">
            <cite id="dsq-cite-10743">
                <span id="dsq-author-user-10743">Saurabh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10743" class="dsq-comment-body">
            <div id="dsq-comment-message-10743" class="dsq-comment-message"><p>@Abhimanyu Vohra, I think you are right, it will prune the search space.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-10744">
        <div id="dsq-comment-header-10744" class="dsq-comment-header">
            <cite id="dsq-cite-10744">
                <span id="dsq-author-user-10744">Saurabh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10744" class="dsq-comment-body">
            <div id="dsq-comment-message-10744" class="dsq-comment-message"><p>@Abhimanyu Vohra, I think you are right, it will prune the search space.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-sama odd alt depth-2" id="dsq-comment-14705">
        <div id="dsq-comment-header-14705" class="dsq-comment-header">
            <cite id="dsq-cite-14705">
                <span id="dsq-author-user-14705">sama</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14705" class="dsq-comment-body">
            <div id="dsq-comment-message-14705" class="dsq-comment-message"><p>@Abhimanyu :</p>
<p>What if the sorted array is </p>
<p>-12 -8 5 6 7 12<br />
and the sum needed is 4</p>
<p>If we go make r = (l+r)/2-1 because A[(l+r)/2] > sum,<br />
then we&#8217;ll miss the actual answer (-8, 12)</p>
<p>Correct me if I missed anything</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geekyboy even depth-3" id="dsq-comment-15375">
        <div id="dsq-comment-header-15375" class="dsq-comment-header">
            <cite id="dsq-cite-15375">
                <span id="dsq-author-user-15375">geekyboy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15375" class="dsq-comment-body">
            <div id="dsq-comment-message-15375" class="dsq-comment-message"><p>bingo</p>
<p>gr8 answer<br />
you are absolutely correct<br />
the sol given above in the comment did not considered negative numbers</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4272">
        <div id="dsq-comment-header-4272" class="dsq-comment-header">
            <cite id="dsq-cite-4272">
                <span id="dsq-author-user-4272">seeker7</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4272" class="dsq-comment-body">
            <div id="dsq-comment-message-4272" class="dsq-comment-message"><p>there is a typo in method 1 ,it says space complexity for quick sort is O(1),it should be o(logn).</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-4299">
        <div id="dsq-comment-header-4299" class="dsq-comment-header">
            <cite id="dsq-cite-4299">
http://geeksforgeeks.org/                <span id="dsq-author-user-4299">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4299" class="dsq-comment-body">
            <div id="dsq-comment-message-4299" class="dsq-comment-message"><p>@seeker7: Thanks for pointing out the typo.  We have corrected it.<br />
Please note that there is difference between two terms &#8220;Space Complexity&#8221; and &#8220;Auxiliary Space&#8221;.  Space complexity of Heap Sort, Merge Sort and QuickSort is O(n).  But Auxiliary space needed in typical implementation of Merge Sort is O(n) and for Heap sort it is O(n).  For a typical implementation of QuickSort, auxiliary space needed is O(n) in worst case (sorted array case).</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-8549">
        <div id="dsq-comment-header-8549" class="dsq-comment-header">
            <cite id="dsq-cite-8549">
                <span id="dsq-author-user-8549">Dina</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8549" class="dsq-comment-body">
            <div id="dsq-comment-message-8549" class="dsq-comment-message"><p>This one works well. No extra space required. And Time Complexity = o(n)#include #includeusing nasacpeme std;int checkpair(int[] ,int, int);int main(){    int a[5] = {6,1,18,3,4};    bool result = checkpair(a,24,0);    if(result)    printf(&#8220;pair exists&#8221;);    else    printf(&#8220;pair does not exists&#8221;);    getch();    return 0;}int checkpair(int a[],int x, int k){    int sub;    if(k&gt;= 5) return false;    sub = x-a[k];    for ( int i = k+1; i&lt;5; i++)    {        if(a[i]==sub)        return true;        }        return(checkpair(a,x,k+1));      }</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3976">
        <div id="dsq-comment-header-3976" class="dsq-comment-header">
            <cite id="dsq-cite-3976">
http://ashutosh7s.blogspot.com/                <span id="dsq-author-user-3976">WgpShashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3976" class="dsq-comment-body">
            <div id="dsq-comment-message-3976" class="dsq-comment-message"><p>case handled When Array Contains The Duplicates Element<br />
i hope its will work for all cases </p>
<pre> <code language="C">
# include &lt;stdio.h&gt;
# define bool int
 
void quickSort(int *, int, int);
 
void hasArrayTwoCandidates(int A[], int arr_size, int sum)
{
    int l, r;
 
    /* Sort the elements */
    quickSort(A, 0, arr_size-1);
 
    /* Now look for the two candidates in the sorted
       array*/
    l = 0;
    r = arr_size-1;
    while(l &lt; r)
    {
         if(A[l] + A[r] == sum)
         {
                printf( &quot; %d %d &quot;, A[l],A[r]);  
                l++;
                 r--;
                
         }
        else if(A[l] + A[r]  sum
              r--;
    }
 
}
 
/* Driver program to test above function */
int main()
{
   int A[] = {1,2,3,4,6,3,10,5};
    int n = 6;
    int arr_size = 8;
 
 
    hasArrayTwoCandidates(A, arr_size, n);
     
    getchar();
    return 0;
}
 
/* FOLLOWING FUNCTIONS ARE ONLY FOR SORTING
    PURPOSE */
void exchange(int *a, int *b)
{
    int temp;
    temp = *a;
    *a   = *b;
    *b   = temp;
}
 
int partition(int A[], int si, int ei)
{
    int x = A[ei];
    int i = (si - 1);
    int j;
 
    for (j = si; j &lt;= ei - 1; j++)
    {
        /* if(A[j]  Array to be sorted
si  --&gt; Starting index
ei  --&gt; Ending index
*/
void quickSort(int A[], int si, int ei)
{
    int pi;    /* Partitioning index */
    if(si &lt; ei)
    {
        pi = partition(A, si, ei);
        quickSort(A, si, pi - 1);
        quickSort(A, pi + 1, ei);
    }
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-6363">
        <div id="dsq-comment-header-6363" class="dsq-comment-header">
            <cite id="dsq-cite-6363">
                <span id="dsq-author-user-6363">arun</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6363" class="dsq-comment-body">
            <div id="dsq-comment-message-6363" class="dsq-comment-message"><p>{-4,-4,-4,-4,-4,1,2,3,3,4,5,6,10}</p>
<p>sum=6</p>
<p>what will you do now?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-10437">
        <div id="dsq-comment-header-10437" class="dsq-comment-header">
            <cite id="dsq-cite-10437">
http://shashank7s.blogspot.com                <span id="dsq-author-user-10437">wgpshashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10437" class="dsq-comment-body">
            <div id="dsq-comment-message-10437" class="dsq-comment-message"><p>@arun how many pair do u think of here </p>
<p>i can see -4,10 , 1,5, 2,4 , 3,3 isn&#8217;t it ?</p>
<p>check here <a href="http://ideone.com/GhWuI" rel="nofollow">http://ideone.com/GhWuI</a> </p>
<p>i dont see any problem </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-29551">
        <div id="dsq-comment-header-29551" class="dsq-comment-header">
            <cite id="dsq-cite-29551">
                <span id="dsq-author-user-29551">Vinod</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29551" class="dsq-comment-body">
            <div id="dsq-comment-message-29551" class="dsq-comment-message"><p>@wgpshashank &#8230; Try with array set as : {-2,-2,-2,4} and sum=2 &#8230;&#8230;&#8230;I don&#8217;t see your code is printing all the pairs i.e. &#8230;-2,4&#8230;.-2,4&#8230;-2,4</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3788">
        <div id="dsq-comment-header-3788" class="dsq-comment-header">
            <cite id="dsq-cite-3788">
http://ashutosh7s.blogspot.com/                <span id="dsq-author-user-3788">WgpShashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3788" class="dsq-comment-body">
            <div id="dsq-comment-message-3788" class="dsq-comment-message"><p>it might be a good idea to use BST here. create a BST of n numbers (nlogn). then, for each number in an array (of size n), subtract it from TargetSum and then look for the other number in binary tree (logn) which should take (nlogn) total time &#8230; the overall time would (nlogn + nlogn) which is nlogn&#8230; </p>
<p>correct me if I am wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-3519">
        <div id="dsq-comment-header-3519" class="dsq-comment-header">
            <cite id="dsq-cite-3519">
                <span id="dsq-author-user-3519">vartika</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3519" class="dsq-comment-body">
            <div id="dsq-comment-message-3519" class="dsq-comment-message"><p>In hash map implementation binMap is declared as bool by mistake, it should be int.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-3520">
        <div id="dsq-comment-header-3520" class="dsq-comment-header">
            <cite id="dsq-cite-3520">
                <span id="dsq-author-user-3520">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3520" class="dsq-comment-body">
            <div id="dsq-comment-message-3520" class="dsq-comment-message"><p>@vartika: For the algo to work, we need only bool binMAp only. The C99 standard for C supports bool data types. In case your compiler doesn&#8217;t support bool, then you can change the program accordingly.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-2886">
        <div id="dsq-comment-header-2886" class="dsq-comment-header">
            <cite id="dsq-cite-2886">
                <span id="dsq-author-user-2886">donbosio</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2886" class="dsq-comment-body">
            <div id="dsq-comment-message-2886" class="dsq-comment-message"><p>second method is great. however we cant tell the locations of two no in the array whose sum is x in O(n).plz corect me.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-5003">
        <div id="dsq-comment-header-5003" class="dsq-comment-header">
            <cite id="dsq-cite-5003">
                <span id="dsq-author-user-5003">viresh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5003" class="dsq-comment-body">
            <div id="dsq-comment-message-5003" class="dsq-comment-message"><p>i and temp are the locations of those numbers <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-5286">
        <div id="dsq-comment-header-5286" class="dsq-comment-header">
            <cite id="dsq-cite-5286">
                <span id="dsq-author-user-5286">donbosio</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5286" class="dsq-comment-body">
            <div id="dsq-comment-message-5286" class="dsq-comment-message"><p>only i is the location, temp is not .</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-nishant_agarwal even thread-odd thread-alt depth-1" id="dsq-comment-2244">
        <div id="dsq-comment-header-2244" class="dsq-comment-header">
            <cite id="dsq-cite-2244">
                <span id="dsq-author-user-2244">Nishant Agarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2244" class="dsq-comment-body">
            <div id="dsq-comment-message-2244" class="dsq-comment-message"><p>we can do it by binary search assuming that array is already sorted&#8230;or can add it to method 1 after sorting<br />
complete code is</p>
<pre> <code language="C">
#define compare(x,y) (((x)&lt;(y))?-1: ((x)==(y))?0:1)
int bsearch(int *a,int t,int l,int r)
{
int mid;
if(l&lt;=r)
{
    mid= (l+r)/2;
    switch(compare(a[mid],t))
    {
        case -1: return (bsearch(a, t, mid+1,r));
        case 0: return mid;
        case 1:return (bsearch(a,t,l,mid-1));
    }
}
return 0;
}
int main()
{
	int a[5]={1,2,3,4,5},i,x;
	printf(&quot;Enter the sum\n&quot;);
	scanf(&quot;%d&quot;,&amp;x);
	for(i=0; i&lt;5; i++)
	{
	        if(bsearch(a,(x-a[i]),0,4 ))
	           printf(&quot;%d %d\n&quot;,a[i],x-a[i]) ;
	}
	return 0;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-16326">
        <div id="dsq-comment-header-16326" class="dsq-comment-header">
            <cite id="dsq-cite-16326">
                <span id="dsq-author-user-16326">Ankit Sablok</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16326" class="dsq-comment-body">
            <div id="dsq-comment-message-16326" class="dsq-comment-message"><p>Exactly what I was going to write Binary Search too results in an O(nlogn) algorithm as follows complexity of sorting O(nlogn) using lets say heapsort that sorts in place and then making asymptotically O(n) calls to binary search procedure to search for the required value. But a careful implementation of the hashmap will solve this problem in linear O(n) time.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-rider even thread-even depth-1" id="dsq-comment-2220">
        <div id="dsq-comment-header-2220" class="dsq-comment-header">
            <cite id="dsq-cite-2220">
                <span id="dsq-author-user-2220">Rider</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2220" class="dsq-comment-body">
            <div id="dsq-comment-message-2220" class="dsq-comment-message"><p>In case of Method -1 Step 3 (Algorithm Description)it should be r&#8211; rather than r++</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-2221">
        <div id="dsq-comment-header-2221" class="dsq-comment-header">
            <cite id="dsq-cite-2221">
                <span id="dsq-author-user-2221">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2221" class="dsq-comment-body">
            <div id="dsq-comment-message-2221" class="dsq-comment-message"><p>@Rider: Thanks for pointing this out. There was a typo. We have corrected it.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-887">
        <div id="dsq-comment-header-887" class="dsq-comment-header">
            <cite id="dsq-cite-887">
                <span id="dsq-author-user-887">ANIRBAN GHOSH</span>
            </cite>
        </div>
        <div id="dsq-comment-body-887" class="dsq-comment-body">
            <div id="dsq-comment-message-887" class="dsq-comment-message"><p>Well I have another solution where no prior knowledge of RANGE is needed and no extra storage needed too.</p>
<p>IDEA : Keep 2 pointers &#8211; left and right. At each iteration add A[left] and A[right] = k(say).</p>
<p>If k  right.</p>
<p>TIME : O(N)<br />
SPACE: O(1)</p>
<p>Correct me if I am wrong!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep odd alt depth-2" id="dsq-comment-888">
        <div id="dsq-comment-header-888" class="dsq-comment-header">
            <cite id="dsq-cite-888">
                <span id="dsq-author-user-888">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-888" class="dsq-comment-body">
            <div id="dsq-comment-message-888" class="dsq-comment-message"><p>@ANIRBAN: Can you please elaborate your approach for following examples?</p>
<p>Let the array is: arr[] = {12, 2, 34, 4, 9, 7, 1}<br />
If sum to be searched is 1, then we need to return true as 9 + 1 = 10.<br />
If the sum to be searched is 37, then we need to return false as there are no two elements for which sum is 37.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-889">
        <div id="dsq-comment-header-889" class="dsq-comment-header">
            <cite id="dsq-cite-889">
                <span id="dsq-author-user-889">ANIRBAN GHOSH</span>
            </cite>
        </div>
        <div id="dsq-comment-body-889" class="dsq-comment-body">
            <div id="dsq-comment-message-889" class="dsq-comment-message"><p>Sorry for my mistake!</p>
<p>I overlooked one thing.<br />
The array must be sorted.<br />
And this is the solution already given! <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-602">
        <div id="dsq-comment-header-602" class="dsq-comment-header">
            <cite id="dsq-cite-602">
                <span id="dsq-author-user-602">Tushar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-602" class="dsq-comment-body">
            <div id="dsq-comment-message-602" class="dsq-comment-message"><p>In second approach if the array is just made up of only positive integers than we can initialize bitmap to size of sum rather than MAX.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even thread-odd thread-alt depth-1" id="dsq-comment-574">
        <div id="dsq-comment-header-574" class="dsq-comment-header">
            <cite id="dsq-cite-574">
                <span id="dsq-author-user-574">GeeksforGeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-574" class="dsq-comment-body">
            <div id="dsq-comment-message-574" class="dsq-comment-message"><p>@Bindu: Thanks for suggesting a new approach, we have included it to the original post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-369">
        <div id="dsq-comment-header-369" class="dsq-comment-header">
            <cite id="dsq-cite-369">
                <span id="dsq-author-user-369">Bindu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-369" class="dsq-comment-body">
            <div id="dsq-comment-message-369" class="dsq-comment-message"><p>O(n) solution for this is as follows:</p>
<p>1. Let V- Specified Value and A &#8211; Input Array(It can be unsorted)<br />
2. Need to create HashMap M which maps from array elements to the occurrence<br />
3. For each element A[i]:<br />
      If V-A[i] is present in M, Output A[i], V &#8211; A[i]. This pair repeats for M(V-A[i]) times<br />
      If A[i] is present in M, increment M(A[i]) else initialize M(A[i]) = 1</p>
<p>Time Complexity &#8211; O(n)<br />
Space Complexity &#8211; O(n)</p>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/';
var disqus_identifier = '484 http://geeksforgeeks.org/?p=484';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Given an array A[] and a number x, check for pair in A[] with sum as x";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.250 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-12-04 12:01:52 -->

<!-- Compression = gzip -->
<!-- super cache -->