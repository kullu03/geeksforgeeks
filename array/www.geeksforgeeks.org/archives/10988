<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Print Ancestors of a given node in Binary Tree - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/print-ancestors-of-a-given-node-in-binary-tree/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Print Ancestors of a given node in Binary Tree - GeeksforGeeks" />
<meta property="og:description" content="Given a Binary Tree and a key, write a function that prints all the ancestors of the key in the given binary tree. For example, if the given tree is following Binary Tree and key is 7, then your function should print 4, 2 and 1. 1 / \ 2 3 / \ 4 5 &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/print-ancestors-of-a-given-node-in-binary-tree/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2011-03-01T00:04:02+00:00" />
<meta property="article:modified_time" content="2013-06-29T00:57:51+00:00" />
<meta property="og:updated_time" content="2013-06-29T00:57:51+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.517 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111185 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Print Ancestors of a given node in Binary Tree</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given a Binary Tree and a key, write a function that prints all the ancestors of the key in the given binary tree. <span id="more-10988"></span></p>
<p>For example, if the given tree is following Binary Tree and key is 7, then your function should print 4, 2 and 1.</p>
<pre>

              1
            /   \
          2      3
        /  \
      4     5
     /
    7
</pre>
<p>Thanks to <a href="http://geeksforgeeks.org/forum/topic/amazon-interview-question-for-software-engineerdeveloper-about-trees-23#post-19735">Mike </a>, <a href="http://geeksforgeeks.org/forum/topic/amazon-interview-question-for-software-engineerdeveloper-about-trees-23#post-19752">Sambasiva </a> and  <a href="http://geeksforgeeks.org/forum/topic/amazon-interview-question-for-software-engineerdeveloper-about-trees-23#post-19764">wgpshashank </a>for their contribution.</p>
<pre class="brush: cpp; highlight: [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]; title: ; notranslate" title="">
#include&lt;iostream&gt;
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
   int data;
   struct node* left;
   struct node* right;
};

/* If target is present in tree, then prints the ancestors
   and returns true, otherwise returns false. */
bool printAncestors(struct node *root, int target)
{
  /* base cases */
  if (root == NULL)
     return false;

  if (root-&gt;data == target)
     return true;

  /* If target is present in either left or right subtree of this node,
     then print this node */
  if ( printAncestors(root-&gt;left, target) ||
       printAncestors(root-&gt;right, target) )
  {
    cout &lt;&lt; root-&gt;data &lt;&lt; &quot; &quot;;
    return true;
  }

  /* Else return false */
  return false;
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newnode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{

  /* Construct the following binary tree
              1
            /   \
          2      3
        /  \
      4     5
     /
    7
  */
  struct node *root = newnode(1);
  root-&gt;left        = newnode(2);
  root-&gt;right       = newnode(3);
  root-&gt;left-&gt;left  = newnode(4);
  root-&gt;left-&gt;right = newnode(5);
  root-&gt;left-&gt;left-&gt;left  = newnode(7);

  printAncestors(root, 7);

  getchar();
  return 0;
}
</pre>
<p>Output:<br />
<em>4 2 1</em></p>
<p>Time Complexity: O(n) where n is the number of nodes in the given Binary Tree.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li><li><a href="http://www.geeksforgeeks.org/convert-binary-tree-threaded-binary-tree/" title="Convert a Binary Tree to Threaded binary tree">Convert a Binary Tree to Threaded binary tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-n-ary-tree/" title="Serialize and Deserialize an N-ary Tree">Serialize and Deserialize an N-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/" title="Serialize and Deserialize a Binary Tree">Serialize and Deserialize a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/" title="Print nodes between two given level numbers of a binary tree">Print nodes between two given level numbers of a binary tree</a></li><li><a href="http://www.geeksforgeeks.org/find-height-binary-tree-represented-parent-array/" title="Find Height of Binary Tree represented by Parent array">Find Height of Binary Tree represented by Parent array</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fprint-ancestors-of-a-given-node-in-binary-tree%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/print-ancestors-of-a-given-node-in-binary-tree/" data-text="Print Ancestors of a given node in Binary Tree" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/print-ancestors-of-a-given-node-in-binary-tree/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34259">
        <div id="dsq-comment-header-34259" class="dsq-comment-header">
            <cite id="dsq-cite-34259">
                <span id="dsq-author-user-34259">aMUchbetteraproach</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34259" class="dsq-comment-body">
            <div id="dsq-comment-message-34259" class="dsq-comment-message"><p>#include</p>
<p>#include</p>
<p>#include</p>
<p>using namespace std;</p>
<p>/* A binary tree node has data, pointer to left child</p>
<p>   and a pointer to right child */</p>
<p>struct node</p>
<p>{</p>
<p>   int data;</p>
<p>   struct node* left;</p>
<p>   struct node* right;</p>
<p>};</p>
<p>/* Helper function that allocates a new node with the</p>
<p>   given data and NULL left and right pointers. */</p>
<p>struct node* newnode(int data)</p>
<p>{</p>
<p>  struct node* node = (struct node*)</p>
<p>                       malloc(sizeof(struct node));</p>
<p>  node-&gt;data = data;</p>
<p>  node-&gt;left = NULL;</p>
<p>  node-&gt;right = NULL;</p>
<p>  return(node);</p>
<p>}</p>
<p>void printAncestors(struct node *node,int data){</p>
<p>    if(node == NULL){</p>
<p>        printf(&#8220;tree is empty&#8230;n&#8221;);</p>
<p>        return;</p>
<p>    }</p>
<p>    if(node-&gt;data == data){</p>
<p>        //printf(&#8220;%d &#8220;,node-&gt;data);</p>
<p>        return;</p>
<p>    }</p>
<p>    if(node-&gt;dataleft,data);</p>
<p>    else</p>
<p>        printAncestors(node-&gt;right,data);</p>
<p>    printf(&#8220;%d &#8220;,node-&gt;data);</p>
<p>}</p>
<p>/* Driver program to test above functions*/</p>
<p>int main()</p>
<p>{</p>
<p>  /* Construct the following binary tree</p>
<p>              1</p>
<p>            /   </p>
<p>          2      3</p>
<p>        /  </p>
<p>      4     5</p>
<p>     /</p>
<p>    7</p>
<p>  */</p>
<p>  struct node *root = newnode(1);</p>
<p>  root-&gt;left        = newnode(2);</p>
<p>  root-&gt;right       = newnode(3);</p>
<p>  root-&gt;left-&gt;left  = newnode(4);</p>
<p>  root-&gt;left-&gt;right = newnode(5);</p>
<p>  root-&gt;left-&gt;left-&gt;left  = newnode(7);</p>
<p>  printAncestors(root, 7);</p>
<p>  getchar();</p>
<p>  return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28467">
        <div id="dsq-comment-header-28467" class="dsq-comment-header">
            <cite id="dsq-cite-28467">
                <span id="dsq-author-user-28467">Nitin Sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28467" class="dsq-comment-body">
            <div id="dsq-comment-message-28467" class="dsq-comment-message"><p>#include<br />
#include<br />
#include</p>
<p>struct node<br />
{<br />
   int data;<br />
   struct node* left;<br />
   struct node* right;<br />
};</p>
<p>struct node* newnode(int data)<br />
{<br />
  struct node* node = (struct node*)<br />
                       malloc(sizeof(struct node));<br />
  node-&gt;data = data;<br />
  node-&gt;left = NULL;<br />
  node-&gt;right = NULL;</p>
<p>  return(node);<br />
}</p>
<p>struct node* stack[10];<br />
int stack_ptr=-1;</p>
<p>void print(struct node    *root)<br />
{<br />
    if(root != NULL)<br />
    {<br />
        print(root-&gt;left);<br />
        printf(&#8220;%d    &#8220;,root-&gt;data);<br />
        print(root-&gt;right);<br />
    }<br />
}<br />
void  print_ancestors(struct node *root , int key)<br />
{<br />
    int static success = 0;</p>
<p>    if(root == NULL)<br />
    {<br />
        return ;<br />
    }</p>
<p>    if(root-&gt;data == key)<br />
    {<br />
        success = 1;<br />
             return;<br />
         }</p>
<p>    if(success!=1)<br />
    {<br />
        print_ancestors(root-&gt;left,key);<br />
    }</p>
<p>    if(success!=1)<br />
    {<br />
        print_ancestors(root-&gt;right,key);<br />
    }</p>
<p>    if(success == 1)<br />
    {<br />
        printf(&#8220;%d    &#8220;,root-&gt;data);<br />
    }</p>
<p>}</p>
<p>void push(struct node *node_ptr)<br />
{<br />
    if(stack_ptr == 9)<br />
    {<br />
        printf(&#8220;Stack is fulln&#8221;);<br />
        exit(0);<br />
    }</p>
<p>    stack_ptr++;</p>
<p>    stack[stack_ptr] = node_ptr;</p>
<p>}</p>
<p>struct node* pop()<br />
{<br />
    if(stack_ptr == -1)<br />
    {<br />
        printf(&#8220;Stack is empty.n&#8221;);<br />
        exit(0);<br />
    }</p>
<p>    return stack[stack_ptr&#8211;];<br />
}</p>
<p>void iterative_ancestors(struct node* root , int key)<br />
{<br />
    struct node* stack[6];<br />
    int stack_ptr, c=1, flag=0;</p>
<p>    push(NULL);</p>
<p>    while(stack[stack_ptr] != NULL || c==1)<br />
    {<br />
        c=0;</p>
<p>        if(root != NULL)<br />
        {<br />
            if(root-&gt;data == key)<br />
            {<br />
                flag = 1;<br />
                break;<br />
            }</p>
<p>            push(root);</p>
<p>            root = root-&gt;left;</p>
<p>        }<br />
        else<br />
        {<br />
            root = pop()-&gt;right;</p>
<p>            if(root != NULL )<br />
            {<br />
                push(root);<br />
            }<br />
        }</p>
<p>    }</p>
<p>    if(flag == 1)<br />
    {<br />
        while(stack[stack_ptr] != NULL)<br />
        {<br />
            printf(&#8220;%d    &#8220;,pop()-&gt;data);<br />
        }<br />
    }</p>
<p>}</p>
<p>void main()<br />
{</p>
<p>    struct node *root = newnode(1);<br />
  root-&gt;left        = newnode(2);<br />
  root-&gt;right       = newnode(3);<br />
  root-&gt;left-&gt;left  = newnode(4);<br />
  root-&gt;left-&gt;right = newnode(5);<br />
  root-&gt;left-&gt;left-&gt;left  = newnode(7);    </p>
<p>  print(root);</p>
<p>  printf(&#8220;n&#8221;);</p>
<p>  print_ancestors(root,7);</p>
<p>    iterative_ancestors(root,5);<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-28468">
        <div id="dsq-comment-header-28468" class="dsq-comment-header">
            <cite id="dsq-cite-28468">
                <span id="dsq-author-user-28468">Nitin Sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28468" class="dsq-comment-body">
            <div id="dsq-comment-message-28468" class="dsq-comment-message"><p>Both recursive and itrative.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-22343">
        <div id="dsq-comment-header-22343" class="dsq-comment-header">
            <cite id="dsq-cite-22343">
                <span id="dsq-author-user-22343">Jignesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22343" class="dsq-comment-body">
            <div id="dsq-comment-message-22343" class="dsq-comment-message"><pre> <code language="Java">
public boolean ancestor(Node root, int value) {
         
         if (root == null)
             return false;
         if (root.key == value)
             return true;
         if(ancestor(root.leftChild, value) || ancestor(root.rightChild, value)) {
             System.out.println(&quot;Value is: &quot;+ root.key);
             return true;
         }
         else
             return false;
         
         
     }
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-19383">
        <div id="dsq-comment-header-19383" class="dsq-comment-header">
            <cite id="dsq-cite-19383">
                <span id="dsq-author-user-19383">vishal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19383" class="dsq-comment-body">
            <div id="dsq-comment-message-19383" class="dsq-comment-message"><p>// Algorithm<br />
// Current stack Contains all the ancestors  nodes</p>
<pre> <code language="C">
void ancestors(node_t* root , int k)
{
	
	if( root)
	{
		push(root -&gt; key); // or node itself can be 
                 // stored instead of values                     
		if( root -&gt; key == k)
			display_stack(); // and exit
		else
		{
			ancestors( root -&gt; left , k);
			ancestors( root -&gt; right ,k);
			pop();
		}
	}
} 
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-shek8034 odd alt depth-2" id="dsq-comment-22282">
        <div id="dsq-comment-header-22282" class="dsq-comment-header">
            <cite id="dsq-cite-22282">
                <span id="dsq-author-user-22282">shek8034</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22282" class="dsq-comment-body">
            <div id="dsq-comment-message-22282" class="dsq-comment-message"><p>Why u are using your own stack if you r doing it with recursion. ?<br />
Just use the recursion stack.<br />
Stack is needed if you do it iteratively</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-22658">
        <div id="dsq-comment-header-22658" class="dsq-comment-header">
            <cite id="dsq-cite-22658">
                <span id="dsq-author-user-22658">vishal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22658" class="dsq-comment-body">
            <div id="dsq-comment-message-22658" class="dsq-comment-message"><p>I am using stack to store all the ancestors . If I use the recursion stack to print all ancestors then after I come out of the function everything is lost. </p>
<pre> <code language="C">

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-19271">
        <div id="dsq-comment-header-19271" class="dsq-comment-header">
            <cite id="dsq-cite-19271">
                <span id="dsq-author-user-19271">Nikhil Agrawal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19271" class="dsq-comment-body">
            <div id="dsq-comment-message-19271" class="dsq-comment-message"><p>Iterative version(running for all cases):</p>
<pre> <code language="Java">
public void printAncestorIterative(Node root,Node a) 
{
      System.out.println();
      
    int flag=0;
    if (root == null) 
    {
        return;
    }

    Queue&lt;Object&gt; q = new LinkedList&lt;Object&gt;();
    q.add(root);
    q.add(root.value + &quot; &quot;);

    while(!q.isEmpty()){

        Node head = (Node) q.remove();
        String headPath = (String) q.remove();

        if(head.value==a.value){
            System.out.println(&quot;Ancestors of Node= &quot;+a.value+&quot; &quot;+headPath);
            flag=1;
            break;
        }
        
        if( head.left!=null &amp;&amp; head.left.value==a.value)
        {
            System.out.println(&quot;Ancestors of Node= &quot;+a.value+&quot; &quot;+headPath);
            flag=1;
            break;
        }
         
         if( head.right!=null &amp;&amp; head.right.value==a.value)
        {
            System.out.println(&quot;Ancestors of Node= &quot;+a.value+&quot; &quot;+headPath);
            flag=1;
            break;
        }
            
        if(head.left!=null ){            
            String leftStr =  headPath + &quot; -&gt; &quot; + head.left.value;
            q.add(head.left);
            q.add(leftStr);
        }

        if(head.right!=null){               
            String rightStr =  headPath + &quot; -&gt; &quot; + head.right.value;
            q.add(head.right);
            q.add(rightStr);
        }
    }
    
    if(flag==0)
     System.out.println(&quot;Ancestors of Node= &quot;+a.value+&quot; is NOT present.&quot;);

}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug even thread-odd thread-alt depth-1" id="dsq-comment-18297">
        <div id="dsq-comment-header-18297" class="dsq-comment-header">
            <cite id="dsq-cite-18297">
                <span id="dsq-author-user-18297">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18297" class="dsq-comment-body">
            <div id="dsq-comment-message-18297" class="dsq-comment-message"><p>C++ code:</p>
<pre> <code language="C">
#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;
using namespace std;
  
class tree_node {
  private:
    int data;
    tree_node * left;
    tree_node * right;
  public:
    tree_node() {
      left=NULL;
      right=NULL;
    }
    void set_data(int data) {
      this-&gt;data=data;
    }
    int get_data() {
      return this-&gt;data;
    }
    void set_left(tree_node * left) {
      this-&gt;left=left;
    }
    tree_node * get_left() {
      return this-&gt;left;
    }
    void set_right(tree_node * right) {
      this-&gt;right=right;
    }
    tree_node * get_right() {
      return this-&gt;right;
    }
    tree_node ** get_left_ref() {
      return &amp;(this-&gt;left);
    }
    tree_node ** get_right_ref() {
      return &amp;(this-&gt;right);
    }
};
  
class tree {
  private:
    tree_node * root;
    int size;
    void _recursive_insert(tree_node ** root_ref, int value);
    void _print_preorder(tree_node * root);
    void _print_inorder(tree_node * root);
    void _print_postorder(tree_node * root);
    int _find_size(tree_node * root);
    int _are_identical(tree_node * tn1, tree_node * tn2);
    int _find_height(tree_node * root);
    void _delete_tree(tree_node ** root);
    void _mirror(tree_node * root);
    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);
    void _print_array(int * array, int len);
    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);
    tree_node * _find_node(tree_node * root, int value);
    tree_node * _min_node(tree_node * root);
    void _print_level_order(tree_node * root);
    int _count_leaf_nodes(tree_node * root);
    int _is_bst(tree_node * root);
    int _children_sum(tree_node * root);
    void _ensure_children_sum(tree_node * root);
    int _diameter(tree_node * root);
    int _is_height_balanced(tree_node * root);
    int _leaf_path_sum(tree_node * root, int num);
    void _double_tree(tree_node * root);
    int _width(tree_node * root, int height, int level, int initialize_width_array);
    int _maximum(int array[], int len);
    void _print_k_distance_nodes(tree_node * root, int k, int distance);
    tree_node * _kth_smallest_element(tree_node * root, int k);
    int _get_level(tree_node * root, int key, int level);
    int _print_ancestors(tree_node * root, int key);
  public:
    tree() {
      root=NULL;
      size=0;
    }
    void insert(int value);
    void recursive_insert(int value);
    void print_preorder();
    void print_inorder();
    void print_postorder();
    int find_size();
    int get_size() {
      return this-&gt;size;
    }
    int are_identical(tree t);
    int find_height();
    void delete_tree();
    void mirror();
    void print_paths();
    tree_node * lowest_common_ancestor(int a, int b);
    tree_node * find_node(int value);
    tree_node * min_node();
    void print_level_order();
    int count_leaf_nodes();
    int is_bst();
    int children_sum();
    void ensure_children_sum();
    int diameter();
    int is_height_balanced();
    int leaf_path_sum(int num);
    void double_tree();
    int width();
    void print_k_distance_nodes(int k);
    tree_node * kth_smallest_element(int k);
    int get_level(int key);
    void print_ancestors(int key);
};
  
void tree::insert(int value) {
  if(root==NULL) {
    root=new tree_node;
    root-&gt;set_data(value);
  } else {
    tree_node * parent=NULL;
    tree_node * current=root;
    tree_node * new_node=new tree_node;
    new_node-&gt;set_data(value);
    while(current!=NULL) {
      if(value&lt;=current-&gt;get_data()) {
        parent=current;
        current=current-&gt;get_left();
      } else {
        parent=current;
        current=current-&gt;get_right();
      }
    }
    if(value&lt;=parent-&gt;get_data() &amp;&amp; parent-&gt;get_left()==NULL) {
      parent-&gt;set_left(new_node);
    } else if(value&gt;parent-&gt;get_data() &amp;&amp; parent-&gt;get_right()==NULL) {
      parent-&gt;set_right(new_node);
    }
  }
  size++;
}
  
void tree::recursive_insert(int value) {
  _recursive_insert(&amp;root, value);
  size++;
}
  
void tree::_recursive_insert(tree_node ** root_ref, int value) {
  if(*root_ref==NULL) {
    tree_node * new_node=new tree_node;
    new_node-&gt;set_data(value);
    *root_ref=new_node;  
  } else {
    if(value&lt;=(*root_ref)-&gt;get_data()) {
      _recursive_insert((*root_ref)-&gt;get_left_ref(), value);
    } else {
      _recursive_insert((*root_ref)-&gt;get_right_ref(), value);
    }
  }
}
  
void tree::print_preorder() {
  if(root==NULL) {
    return;
  }
  _print_preorder(root);
  cout&lt;&lt;endl;
}
  
void tree::_print_preorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
  if(root-&gt;get_left()!=NULL)
    _print_preorder(root-&gt;get_left());
  if(root-&gt;get_right()!=NULL)
    _print_preorder(root-&gt;get_right());
}
  
void tree::print_inorder() {
  if(root==NULL) {
    return;
  }
  _print_inorder(root);
  cout&lt;&lt;endl;
}
  
void tree::_print_inorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root-&gt;get_left()!=NULL)
    _print_inorder(root-&gt;get_left());
  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
  if(root-&gt;get_right()!=NULL)
    _print_inorder(root-&gt;get_right());
}
  
void tree::print_postorder() {
  if(root==NULL) {
    return;
  }
  _print_postorder(root);
  cout&lt;&lt;endl;
}
  
void tree::_print_postorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root-&gt;get_left()!=NULL)
    _print_postorder(root-&gt;get_left());
  if(root-&gt;get_right()!=NULL)
    _print_postorder(root-&gt;get_right());
  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
}
 
int tree::find_size() {
  return _find_size(root);
}
 
int tree::_find_size(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return 1+_find_size(root-&gt;get_left())+_find_size(root-&gt;get_right());
  }
}
 
int tree::are_identical(tree t) {
  return _are_identical(this-&gt;root, t.root);
}
 
int tree::_are_identical(tree_node * tn1, tree_node * tn2) {
  if(tn1==NULL &amp;&amp; tn2==NULL) {
    return 1;
  } else if((tn1==NULL &amp;&amp; tn2!=NULL) || (tn1!=NULL &amp;&amp; tn2==NULL) || (tn1-&gt;get_data()!=tn2-&gt;get_data())) {
    return 0;
  } else {
    return _are_identical(tn1-&gt;get_left(), tn2-&gt;get_left()) &amp;&amp; _are_identical(tn1-&gt;get_right(), tn2-&gt;get_right());
  }
}
 
int tree::find_height() {
  return _find_height(root);
}
 
int tree::_find_height(tree_node * root) {
  if(root==NULL) {
    return 0;
  }
  else {
    return 1+max(_find_height(root-&gt;get_left()), _find_height(root-&gt;get_right()));
  }
}
 
void tree::delete_tree() {
  _delete_tree(&amp;root);
  size=0;
}
 
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)-&gt;get_left()!=NULL) {
      _delete_tree((*root)-&gt;get_left_ref());
    }
    if((*root)-&gt;get_right()!=NULL) {
      _delete_tree((*root)-&gt;get_right_ref());
    }
    delete(*root);
    *root=NULL;
  }
}
 
/* alternate _delete_tree */
/*
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)-&gt;get_left()!=NULL) {
      tree_node * left_ref=(*root)-&gt;get_left();
      _delete_tree(&amp;left_ref);
    }
    if((*root)-&gt;get_right()!=NULL) {
      tree_node * right_ref=(*root)-&gt;get_right();
      _delete_tree(&amp;right_ref);
    }
    delete(*root);
    *root=NULL;
  }
}
*/
 
void tree::mirror() {
  _mirror(root);
}
 
void tree::_mirror(tree_node * root) {
  if(root==NULL) {
    return;
  }
 
  tree_node * temp=root-&gt;get_left();
  root-&gt;set_left(root-&gt;get_right());
  root-&gt;set_right(temp);
  _mirror(root-&gt;get_left());
  _mirror(root-&gt;get_right());
}
 
void tree::print_paths(){
   int max_path_length=find_height();
   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);
  _print_paths(root, path_nodes, 0);
}
 
void tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){
  if(root==NULL) {
    return;
  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {
    *(path_nodes+next_vacant_position)=root-&gt;get_data();
    _print_array(path_nodes, next_vacant_position);
  } else {
    *(path_nodes+next_vacant_position)=root-&gt;get_data();
    _print_paths(root-&gt;get_left(), path_nodes, next_vacant_position+1);
    _print_paths(root-&gt;get_right(), path_nodes, next_vacant_position+1);
  }
}
 
void tree::_print_array(int * array, int len) {
  int i;
  for(i=0; i&lt;=len; i++) {
    cout&lt;&lt;*(array+i)&lt;&lt;&quot; &quot;;
  }
  cout&lt;&lt;endl;
}
 
tree_node * tree::find_node(int value) {
  return _find_node(root, value);
}
 
tree_node * tree::_find_node(tree_node * root, int value) {
  if(root==NULL || root-&gt;get_data()==value) {
    return root;
  } else if(value&lt;=root-&gt;get_data()) {
    return _find_node(root-&gt;get_left(), value);
  } else {
    return _find_node(root-&gt;get_right(), value);
  }
}
 
tree_node * tree::lowest_common_ancestor(int a, int b) {
  return _lowest_common_ancestor(NULL, root, a, b);
}
 
tree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {
  if(root==NULL) {
    return root;
  } else if((root-&gt;get_data()==a &amp;&amp; (root-&gt;get_left()-&gt;get_data()==b || root-&gt;get_right()-&gt;get_data()==b))
             || (root-&gt;get_data()==b &amp;&amp; (root-&gt;get_left()-&gt;get_data()==a || root-&gt;get_right()-&gt;get_data()==a))) {
    return parent;
  } else if((_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL)
        || (_find_node(root-&gt;get_left(), b)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), a)!=NULL)) {
    return root;
  } else if(_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_left(), b)!=NULL) {
    return _lowest_common_ancestor(root, root-&gt;get_left(), a, b);
  } else if(_find_node(root-&gt;get_right(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL) {
    return _lowest_common_ancestor(root, root-&gt;get_right(), a, b);
  } else {
    return NULL;
  }
}
 
tree_node * tree::min_node() {
  return _min_node(root);
}
 
tree_node * tree::_min_node(tree_node * root) {
  if(root==NULL || root-&gt;get_left()==NULL) {
    return root;
  } else {
    return _min_node(root-&gt;get_left());
  }
}
 
int tree::count_leaf_nodes() {
  return _count_leaf_nodes(root);
}
 
int tree::_count_leaf_nodes(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {
    return 1;
  } else {
    return _count_leaf_nodes(root-&gt;get_left())+_count_leaf_nodes(root-&gt;get_right());
  }
}
 
 
int tree::is_bst() {
  return _is_bst(root);
}
 
int tree::_is_bst(tree_node * root) {
  static tree_node * previous=NULL;
  if(root==NULL) {
    return 1;
  } else {
    if(!_is_bst(root-&gt;get_left())) {
      return 0;
    }
    if(previous!=NULL &amp;&amp; (previous-&gt;get_data())&gt;(root-&gt;get_data())) {
      return 0;
    }
    previous=root;
    if(!_is_bst(root-&gt;get_right())) {
      return 0;
    }   
  }
}
 
int tree::children_sum() {
  return _children_sum(root);
}
 
int tree::_children_sum(tree_node * root) {
  if(root==NULL) {
    return 1;
  }
  if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {
    return 1;
  }
  else if(_children_sum(root-&gt;get_left()) &amp;&amp; _children_sum(root-&gt;get_right())){
    int left_data;
    int right_data;
    if(root-&gt;get_left()!=NULL) {
      left_data=root-&gt;get_left()-&gt;get_data();
    } else {
      left_data=0;
    }
    if(root-&gt;get_right()!=NULL) {
      right_data=root-&gt;get_right()-&gt;get_data();
    } else {
      right_data=0;
    }
 
    if(left_data+right_data==root-&gt;get_data()) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}
 
void tree::ensure_children_sum() {
  _ensure_children_sum(root);
}
 
void tree::_ensure_children_sum(tree_node * root) {
  if(root==NULL || (root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL)) {
    return;
  } else {
    _ensure_children_sum(root-&gt;get_left());
    _ensure_children_sum(root-&gt;get_right());
    int left_data;
    int right_data;
    if(root-&gt;get_left()!=NULL) {
      left_data=root-&gt;get_left()-&gt;get_data();
    } else {
      left_data=0;
    }
    if(root-&gt;get_right()!=NULL) {
      right_data=root-&gt;get_right()-&gt;get_data();
    } else {
      right_data=0;
    }
    root-&gt;set_data(left_data+right_data);
  }
}
 
int tree::diameter() {
  return _diameter(root);
}
 
int tree::_diameter(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return max(_find_height(root-&gt;get_left())+_find_height(root-&gt;get_right())+1, max(_diameter(root-&gt;get_left()), _diameter(root-&gt;get_left())));
  }
}
 
int tree::is_height_balanced() {
  return _is_height_balanced(root);
}
 
int tree::_is_height_balanced(tree_node * root) {
  if(root==NULL) {
    return 1;
  } else {
    int left_height=_find_height(root-&gt;get_left());
    int right_height=_find_height(root-&gt;get_right());
    if(abs(left_height-right_height)&lt;=1 &amp;&amp; _is_height_balanced(root-&gt;get_left()) &amp;&amp; _is_height_balanced(root-&gt;get_left())) {
      return 1;
    } else {
      return 0;
    }
  }
}
 
int tree::leaf_path_sum(int sum) {
  return _leaf_path_sum(root, sum);
}
 
int tree::_leaf_path_sum(tree_node * root, int sum) {
  if(root==NULL) {
    return 0;
  } else if(root-&gt;get_data()==sum &amp;&amp; root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {
    return 1;
  } else {
    return _leaf_path_sum(root-&gt;get_left(), sum-root-&gt;get_data()) || _leaf_path_sum(root-&gt;get_right(), sum-root-&gt;get_data());
  }
}
 
void tree::double_tree() {
  _double_tree(root);
}
 
void tree::_double_tree(tree_node * root) {
  if(root==NULL) {
    return;
  } else {
    tree_node * new_node=new tree_node;
    new_node-&gt;set_data(root-&gt;get_data());
    tree_node * root_left=root-&gt;get_left();
    root-&gt;set_left(new_node);
    new_node-&gt;set_left(root_left);
    _double_tree(root_left);
    _double_tree(root-&gt;get_right());
  }
}
 
int tree::width() {
  int height=find_height();
  return _width(root, height, 0, 1);
}
 
int tree::_width(tree_node * root, int height, int level, int initialize_width_array) {
  static int width[]={0};
  if(initialize_width_array==1) {
    int i;
    for(i=0; i&lt;height; i++) {
      width[i]=0; 
    }
  }
  if(root==NULL) {
    width[level]=width[level]+0;
  } else {
    width[level]=width[level]+1;
    _width(root-&gt;get_left(), height, level+1, 0);
    _width(root-&gt;get_right(), height, level+1, 0);
  }
  return _maximum(width, height);
}
 
int tree::_maximum(int array[], int len) {
  int i;
  int max=array[0];
  for(i=1; i&lt;len; i++) {
    if(array[i]&gt;max) {
      max=array[i];
    }
  }
  return max;
}
 
void tree::print_k_distance_nodes(int k) {
  _print_k_distance_nodes(root, k, 0);
  cout&lt;&lt;endl;
}
 
void tree::_print_k_distance_nodes(tree_node * root, int k, int distance) {
  if(root==NULL) {
    return;
  } else if(distance==k) {
    cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
  } else {
    _print_k_distance_nodes(root-&gt;get_left(), k, distance+1);
    _print_k_distance_nodes(root-&gt;get_right(), k, distance+1);
  }
}
 
tree_node * tree::kth_smallest_element(int k) {
  return _kth_smallest_element(root, k);
}
 
tree_node * tree::_kth_smallest_element(tree_node * root, int k) {
  if(root==NULL) {
    return root;
  } else {
    int left_size=_find_size(root-&gt;get_left());
    if(left_size==k-1) {
      return root;
    } else if(left_size&gt;=k) {
      return _kth_smallest_element(root-&gt;get_left(), k);
    } else {
      return _kth_smallest_element(root-&gt;get_right(), k-left_size-1);
    }
  }
}

int tree::get_level(int key) {
  return _get_level(root, key, 1);
}

int tree::_get_level(tree_node * root, int key, int level) {
  if(root==NULL) {
      return 0;
  } else if(root-&gt;get_data()==key) {
      return level;
  }
  else {
          return _get_level(root-&gt;get_left(), key, level+1)+_get_level(root-&gt;get_right(), key, level+1);
  }
}

void tree::print_ancestors(int key){
    _print_ancestors(root, key);
    cout&lt;&lt;endl;
}
    
int tree::_print_ancestors(tree_node * root, int key) {
    if(root==NULL) {
        return 0;
    } else if(root-&gt;get_data()==key) {
      return 1;
    } else {
        if(_print_ancestors(root-&gt;get_left(), key) || _print_ancestors(root-&gt;get_right(), key)) {
            cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
            return 1;
        }
    }
}

int main() {
  tree t1;
 
  t1.recursive_insert(20);
  t1.recursive_insert(10);
  t1.insert(30);
  t1.insert(8);
  t1.recursive_insert(12);
  t1.recursive_insert(28);
  t1.recursive_insert(32);
  t1.recursive_insert(6);
  t1.recursive_insert(9);
  t1.recursive_insert(50);
  t1.insert(14);
  t1.insert(26);
 
  t1.print_inorder();
 
  t1.print_ancestors(50);
 
  return 0;
}
</code> </pre>
<p>6 8 9 10 12 14 20 26 28 30 32 50<br />
32 30 20</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9402">
        <div id="dsq-comment-header-9402" class="dsq-comment-header">
            <cite id="dsq-cite-9402">
                <span id="dsq-author-user-9402">Anil arya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9402" class="dsq-comment-body">
            <div id="dsq-comment-message-9402" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;

#include&lt;stdlib.h&gt;
struct node 
{
        struct node *left;
        struct node *right;
        int data ;
};
int ance[122];
void print_arr(int ance[],int len)
{
    int i;
        for(i=0;i&lt;len;i++)
        {
                printf(&quot;%d &quot;,ance[i]);
        }
        
}
int find_level(struct node *root,int k, int len)
{
            if(root==NULL)
                return 0;
                
            ance[len++]=root-&gt;data;
            
            if(root-&gt;data==k)
            {
                    print_arr(ance,len);
                  // exit(0);
            }
            
            find_level(root-&gt;left,k, len);
            find_level(root-&gt;right,k, len);
            
}
            
              
struct node *newnode(int data)
{
        struct node *node=(struct node *)malloc(sizeof(struct node ));
        
        node-&gt;data=data;
        node-&gt;left=NULL;
        node-&gt;right=NULL;
        return node;
}
int main()
{
        struct node *root=newnode(4);
        root-&gt;left=newnode(2);
        root-&gt;right=newnode(1);
        root-&gt;left-&gt;left=newnode(5);
        root-&gt;left-&gt;right=newnode(23);
        root-&gt;right-&gt;right=newnode(12);
        root-&gt;right-&gt;left=newnode(56);
        
        
        
        find_level(root,23,0);
        getch();
        return 0;
    }
        
        

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-9285">
        <div id="dsq-comment-header-9285" class="dsq-comment-header">
            <cite id="dsq-cite-9285">
                <span id="dsq-author-user-9285">rituraj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9285" class="dsq-comment-body">
            <div id="dsq-comment-message-9285" class="dsq-comment-message"><p>My algo :</p>
<p>1. Find the level of the given node say k.<br />
2. Now ,Do a  level order traversal up to (k-1)th level and print     all nodes encountered.</p>
<p>PS:I might be wrong ,So plz comment  on  this post</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-9406">
        <div id="dsq-comment-header-9406" class="dsq-comment-header">
            <cite id="dsq-cite-9406">
                <span id="dsq-author-user-9406">kg1020</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9406" class="dsq-comment-body">
            <div id="dsq-comment-message-9406" class="dsq-comment-message"><p>suppose k= 3 then according to u. print all the nodes up to level 2. then all  nodes of level 1 &amp; level 2 will be printed whereas only one node from level 2 &amp; level 1 should be printed.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-6394">
        <div id="dsq-comment-header-6394" class="dsq-comment-header">
            <cite id="dsq-cite-6394">
                <span id="dsq-author-user-6394">John</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6394" class="dsq-comment-body">
            <div id="dsq-comment-message-6394" class="dsq-comment-message"><p>private void ancestor(Node root,ref bool found,int data)<br />
        {<br />
            //bool found = false;<br />
            if (root != null)<br />
            {</p>
<p>                if (root.Data &gt; data)<br />
                {<br />
                    ancestor(root.Left,ref found,data);<br />
                }<br />
                else if (root.Data &lt; data)<br />
                {<br />
                    ancestor(root.Right,ref found,data);<br />
                }<br />
                if (found)<br />
                {<br />
                    Console.WriteLine(root.Data);<br />
                }<br />
                if (root.Data == data)<br />
                {<br />
                    found = true;<br />
                }<br />
            }<br />
        }</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-8332">
        <div id="dsq-comment-header-8332" class="dsq-comment-header">
            <cite id="dsq-cite-8332">
                <span id="dsq-author-user-8332">guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8332" class="dsq-comment-body">
            <div id="dsq-comment-message-8332" class="dsq-comment-message"><p>your code assumes this is BST</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-manishj even thread-odd thread-alt depth-1" id="dsq-comment-3509">
        <div id="dsq-comment-header-3509" class="dsq-comment-header">
            <cite id="dsq-cite-3509">
                <span id="dsq-author-user-3509">manishj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3509" class="dsq-comment-body">
            <div id="dsq-comment-message-3509" class="dsq-comment-message"><p>Iterative approach(as you do a pre-order tarversal ,stack itself always contains ancestors to element at top of stack):</p>
<pre> <code language="C">
btree* rightvisited[100]= {NULL};
int searchinrightvisited(btree * ptr)
{
	for(int i = 0; i &lt;100;i++)
	{
		if(ptr == rightvisited[i])
			return 1;
	}
	return 0;
}
void printpath(btree *root, int key)
{
	btree * current = root;
	stack&lt;btree *&gt; st;
	bool done = false;

	int index = 0;
	while(!done)
	{
		if(current != NULL )
		{
			if(current-&gt;data == key)
			{
				done = true;	
			}
			st.push(current);

			current = current-&gt;left;
		}
		else
		{
			if(!st.empty() )
			{
				current = st.top();
				if(!searchinrightvisited(current))
				{
				
				rightvisited[index++] = current;
				current = current-&gt;right;
				}
				else
				{
					printf(&quot;%d&quot;,current-&gt;data);
					st.pop();
					current = NULL;
				}
				//if(current-&gt;right != NULL)
				//{
					
				//}
			
			}
			else
			{
				done = true;
			}
		}
	}
    printf(&quot;printing path to %d\n&quot;,key);
	while(!st.empty())
	{
		printf(&quot;%d&quot;,st.top()-&gt;data);
		st.pop();
	}
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-10194">
        <div id="dsq-comment-header-10194" class="dsq-comment-header">
            <cite id="dsq-cite-10194">
                <span id="dsq-author-user-10194">Ankit Gupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10194" class="dsq-comment-body">
            <div id="dsq-comment-message-10194" class="dsq-comment-message"><p>Nice. Pushing off the stack when its right branch has been examined for the key. Smart!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-3456">
        <div id="dsq-comment-header-3456" class="dsq-comment-header">
            <cite id="dsq-cite-3456">
                <span id="dsq-author-user-3456">KC</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3456" class="dsq-comment-body">
            <div id="dsq-comment-message-3456" class="dsq-comment-message"><p>1. Do an iterative DFS with root of the tree as the starting vertex.<br />
2. pass the value of the node along with root in each pass such as DFS(root, n).<br />
3. When n == root-&gt;data, put n on the stack and print the stack.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep odd alt depth-2" id="dsq-comment-3464">
        <div id="dsq-comment-header-3464" class="dsq-comment-header">
            <cite id="dsq-cite-3464">
                <span id="dsq-author-user-3464">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3464" class="dsq-comment-body">
            <div id="dsq-comment-message-3464" class="dsq-comment-message"><p>@KC:<br />
This approach looks an iterative version of the approach given in post.  A standard way to use stack to avoid recursion.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-4009">
        <div id="dsq-comment-header-4009" class="dsq-comment-header">
            <cite id="dsq-cite-4009">
                <span id="dsq-author-user-4009">aimless</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4009" class="dsq-comment-body">
            <div id="dsq-comment-message-4009" class="dsq-comment-message"><p>can you write the code?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-3397">
        <div id="dsq-comment-header-3397" class="dsq-comment-header">
            <cite id="dsq-cite-3397">
http://wgpshashank.co.cc                <span id="dsq-author-user-3397">wgpshashank</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3397" class="dsq-comment-body">
            <div id="dsq-comment-message-3397" class="dsq-comment-message"><p>@geeksfrogeek @Mike The Only extra asked in dat question that we have to print node value also e.g including itself ..although its serious because a node can&#8217;t b ancestor of itself  so if u wants u can modify so that it can also print the node it self </p>
<p>2nd  also  pass the node instead of int value in printAncester() method e.g pass by pointer not by value will be better</p>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/print-ancestors-of-a-given-node-in-binary-tree/';
var disqus_identifier = '10988 http://geeksforgeeks.org/?p=10988';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Print Ancestors of a given node in Binary Tree";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.199 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:29:46 -->

<!-- Compression = gzip -->
<!-- super cache -->