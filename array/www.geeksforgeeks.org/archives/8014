<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Reverse a Linked List in groups of given size  - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Reverse a Linked List in groups of given size  - GeeksforGeeks" />
<meta property="og:description" content="Given a linked list, write a function to reverse every k nodes (where k is an input to the function). Example: Inputs: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;NULL and k = 3 Output: 3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4-&gt;8-&gt;7-&gt;NULL. Inputs: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;80-&gt;NULL and k = 5 Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;8-&gt;7-&gt;6-&gt;NULL. Algorithm: reverse(head, k) 1) Reverse the first sub-list of size k. While reversing keep track of the next &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Linked Lists" />
<meta property="article:published_time" content="2010-06-14T10:43:14+00:00" />
<meta property="article:modified_time" content="2014-08-05T15:01:07+00:00" />
<meta property="og:updated_time" content="2014-08-05T15:01:07+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.545 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417110778 1.22.76.175';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Reverse a Linked List in groups of given size</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Given a linked list, write a function to reverse every k nodes (where k is an input to the function). <span id="more-8014"></span></p>
<pre>
Example:
Inputs:  1->2->3->4->5->6->7->8->NULL and k = 3 
Output:  3->2->1->6->5->4->8->7->NULL. 

Inputs:   1->2->3->4->5->6->7->80->NULL and k = 5
Output:  5->4->3->2->1->8->7->6->NULL. 
</pre>
<p>Algorithm: <em>reverse(head, k)</em><br />
1) Reverse the first sub-list of size k.  While reversing keep track of the next node and previous node. Let the pointer to the next node be <em>next </em>and pointer to the previous node be <em>prev</em>. See <a href="http://geeksforgeeks.org/?p=860">this post</a> for reversing a linked list.<br />
2) <em>head->next = reverse(next, k)</em>  /* Recursively call for rest of the list and link the two sub-lists */<br />
3) return <em>prev </em> /* <em>prev </em>becomes the new head of the list  (see the diagrams of iterative method of <a href="http://geeksforgeeks.org/?p=860">this post) </a> */</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

/* Link list node */
struct node
{
    int data;
    struct node* next;
};

/* Reverses the linked list in groups of size k and returns the 
   pointer to the new head node. */
struct node *reverse (struct node *head, int k)
{
    struct node* current = head;
    struct node* next = NULL;
    struct node* prev = NULL;
    int count = 0;   
    
    /*reverse first k nodes of the linked list */ 
    while (current != NULL &amp;&amp; count &lt; k)
    {
       next  = current-&gt;next;
       current-&gt;next = prev;
       prev = current;
       current = next;
       count++;
    }
    
    /* next is now a pointer to (k+1)th node 
       Recursively call for the list starting from current.
       And make rest of the list as next of first node */
    if(next !=  NULL)
    {  head-&gt;next = reverse(next, k); }

    /* prev is new head of the input list */
    return prev;
}

/* UTILITY FUNCTIONS */
/* Function to push a node */
void push(struct node** head_ref, int new_data)
{
    /* allocate node */
    struct node* new_node =
            (struct node*) malloc(sizeof(struct node));

    /* put in the data  */
    new_node-&gt;data  = new_data;

    /* link the old list off the new node */
    new_node-&gt;next = (*head_ref);    

    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}

/* Function to print linked list */
void printList(struct node *node)
{
    while(node != NULL)
    {
        printf(&quot;%d  &quot;, node-&gt;data);
        node = node-&gt;next;
    }
}    

/* Drier program to test above function*/
int main(void)
{
    /* Start with the empty list */
    struct node* head = NULL;
 
     /* Created Linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8 */
     push(&amp;head, 8);
     push(&amp;head, 7);
     push(&amp;head, 6);
     push(&amp;head, 5);
     push(&amp;head, 4);
     push(&amp;head, 3);
     push(&amp;head, 2);
     push(&amp;head, 1);           

     printf(&quot;\n Given linked list \n&quot;);
     printList(head);
     head = reverse(head, 3);

     printf(&quot;\n Reversed Linked list \n&quot;);
     printList(head);

     getchar();
     return(0);
}
</pre>
<p>Time Complexity: O(n) where n is the number of nodes in the given list.</p>
<p>Please write comments if you find the above code/algorithm incorrect, or find other ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/given-linked-list-reverse-alternate-nodes-append-end/" title="Given a linked list, reverse alternate nodes and append at the end">Given a linked list, reverse alternate nodes and append at the end</a></li><li><a href="http://www.geeksforgeeks.org/pairwise-swap-elements-of-a-given-linked-list-by-changing-links/" title="Pairwise swap elements of a given linked list by changing links">Pairwise swap elements of a given linked list by changing links</a></li><li><a href="http://www.geeksforgeeks.org/self-organizing-list-set-1-introduction/" title="Self Organizing List | Set 1 (Introduction)">Self Organizing List | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/merge-a-linked-list-into-another-linked-list-at-alternate-positions/" title="Merge a linked list into another linked list at alternate positions">Merge a linked list into another linked list at alternate positions</a></li><li><a href="http://www.geeksforgeeks.org/quicksort-on-singly-linked-list/" title="QuickSort on Singly Linked List">QuickSort on Singly Linked List</a></li><li><a href="http://www.geeksforgeeks.org/delete-n-nodes-after-m-nodes-of-a-linked-list/" title="Delete N nodes after M nodes of a linked list">Delete N nodes after M nodes of a linked list</a></li><li><a href="http://www.geeksforgeeks.org/design-a-stack-with-find-middle-operation/" title="Design a stack with operations on middle element">Design a stack with operations on middle element</a></li><li><a href="http://www.geeksforgeeks.org/swap-kth-node-from-beginning-with-kth-node-from-end-in-a-linked-list/" title="Swap Kth node from beginning with Kth node from end in a Linked List">Swap Kth node from beginning with Kth node from end in a Linked List</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Freverse-a-list-in-groups-of-given-size%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/" data-text="Reverse a Linked List in groups of given size" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-32337">
        <div id="dsq-comment-header-32337" class="dsq-comment-header">
            <cite id="dsq-cite-32337">
                <span id="dsq-author-user-32337">Himanshu Dagar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32337" class="dsq-comment-body">
            <div id="dsq-comment-message-32337" class="dsq-comment-message"><p>can refer to below code for this</p>
<p><a href="http://ideone.com/aFXDFT" rel="nofollow">http://ideone.com/aFXDFT</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31715">
        <div id="dsq-comment-header-31715" class="dsq-comment-header">
            <cite id="dsq-cite-31715">
                <span id="dsq-author-user-31715">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31715" class="dsq-comment-body">
            <div id="dsq-comment-message-31715" class="dsq-comment-message"><p>pls see the following link<br />
<a href="http://ideone.com/oxK3nn" rel="nofollow">http://ideone.com/oxK3nn</a><br />
the prgm gives vorrect output 4 all inputs of k except k&gt;legth of the list&#8230;<br />
the prgm works by recursively reversing blocks of k nodes by calling a separate function&#8230;&#8230;please can someone help me simplify it</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30891">
        <div id="dsq-comment-header-30891" class="dsq-comment-header">
            <cite id="dsq-cite-30891">
                <span id="dsq-author-user-30891">Gaurav Reddy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30891" class="dsq-comment-body">
            <div id="dsq-comment-message-30891" class="dsq-comment-message"><p>void reverse_nodes(node *head,int k){<br />
	node *ptr=head-&gt;next;<br />
	int cnt=1;<br />
	node *next,*prev=NULL,*first=head-&gt;next,*last_first=head;</p>
<p>	while(ptr != NULL){<br />
		while((cnt%(k+1) != 0) &amp;&amp; (ptr != NULL)){<br />
			cnt += 1;<br />
			next = ptr-&gt;next;<br />
			ptr-&gt;next = prev;<br />
			prev = ptr;<br />
			ptr = next;<br />
		}<br />
		last_first-&gt;next = prev;<br />
		first-&gt;next = ptr;<br />
		cnt = 1;<br />
		last_first = first;<br />
		first = ptr;<br />
	}<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29696">
        <div id="dsq-comment-header-29696" class="dsq-comment-header">
            <cite id="dsq-cite-29696">
                <span id="dsq-author-user-29696">Sameer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29696" class="dsq-comment-body">
            <div id="dsq-comment-message-29696" class="dsq-comment-message"><p><a href="http://codingrecipies.blogspot.in/2013/11/reverse-linked-list-in-chunks.html" rel="nofollow">http://codingrecipies.blogspot.in/2013/11/reverse-linked-list-in-chunks.html</a></p>
<p>I liked the code given here on the link given ,simple and elegant</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-29376">
        <div id="dsq-comment-header-29376" class="dsq-comment-header">
            <cite id="dsq-cite-29376">
                <span id="dsq-author-user-29376">dag</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29376" class="dsq-comment-body">
            <div id="dsq-comment-message-29376" class="dsq-comment-message"><p><code><br />
#include<br />
using namespace std;</p>
<p>typedef struct Node{<br />
    int data;<br />
    struct Node *next;<br />
}Node;</p>
<p>Node *newNode(int data){<br />
    Node * node=new Node;<br />
    node-&gt;data=data;<br />
    node-&gt;next=NULL;<br />
    return node;<br />
}</p>
<p>Node* reverseK(Node *root, int k){<br />
    if(root==NULL)<br />
        return NULL;<br />
    Node *temp=NULL;<br />
    Node *nextNode,*current;<br />
    while(k){<br />
        k--;<br />
        nextNode=root-&gt;next;<br />
        root-&gt;next=temp;<br />
        temp=root;<br />
        if(nextNode==NULL)<br />
            break;<br />
        root=nextNode;<br />
    }<br />
    if(k==0){<br />
        root=temp;<br />
        current =root;<br />
        while(current-&gt;next)<br />
            current=current-&gt;next;<br />
        current-&gt;next=nextNode;<br />
    }<br />
    return root;<br />
}</p>
<p>void traverse(Node *root){<br />
    Node *current=root;<br />
    while(current){<br />
        cout&lt;data&lt;next;<br />
    }<br />
    cout&lt;next=newNode(2);<br />
    root-&gt;next-&gt;next=newNode(3);<br />
    root-&gt;next-&gt;next-&gt;next=newNode(4);<br />
    root-&gt;next-&gt;next-&gt;next-&gt;next=newNode(5);<br />
    traverse(root);<br />
    Node *newRoot=reverseK(root,2);<br />
    traverse(newRoot);<br />
}</p>
<p></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29241">
        <div id="dsq-comment-header-29241" class="dsq-comment-header">
            <cite id="dsq-cite-29241">
                <span id="dsq-author-user-29241">anonymous</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29241" class="dsq-comment-body">
            <div id="dsq-comment-message-29241" class="dsq-comment-message"><p>Explaination of above code:<br />
in main function<br />
head = reverse(head, 3);<br />
// This will contain the header of linked list<br />
suppose linked list is given like </p>
<p>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;NULL<br />
then reverse of linked list is<br />
3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4-&gt;8-&gt;7-&gt;NULL<br />
head will contain the address of 3 value node.<br />
after first reverse current will point to node value 1 and next node is to node value 4 (4-&gt;5-&gt;6) is not reverse .  </p>
<p>current-&gt;next=revese(next,3); // this will return the address of node value 6.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27768">
        <div id="dsq-comment-header-27768" class="dsq-comment-header">
            <cite id="dsq-cite-27768">
                <span id="dsq-author-user-27768">vaibhav kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27768" class="dsq-comment-body">
            <div id="dsq-comment-message-27768" class="dsq-comment-message"><p>void reversegrop(p**start,int d)</p>
<p>{p*q,*prev,*po=NULL,*temp,*prev1;</p>
<p>int h,k,l=0;</p>
<p>q=*start;</p>
<p>while(q)</p>
<p>{prev=q;</p>
<p>k=0;</p>
<p>while(klink;</p>
<p>if(!q)</p>
<p>return;</p>
<p>k++;</p>
<p>}</p>
<p>if(!l)</p>
<p>{*start=q;</p>
<p>l++;</p>
<p>}</p>
<p>temp=q-&gt;link;</p>
<p>q-&gt;link=prev-&gt;link;</p>
<p>prev1-&gt;link=prev;</p>
<p>prev-&gt;link=temp;</p>
<p>if(po)</p>
<p>po-&gt;link=q;</p>
<p>po=prev;</p>
<p>q=prev-&gt;link;</p>
<p>}</p>
<p>return;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-21292">
        <div id="dsq-comment-header-21292" class="dsq-comment-header">
            <cite id="dsq-cite-21292">
                <span id="dsq-author-user-21292">prachi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21292" class="dsq-comment-body">
            <div id="dsq-comment-message-21292" class="dsq-comment-message"><p>/*two functions:<br />
  rev2k:reverses a list of a given size moves the head pointer(ptr) to the new start and returns the end of the ll.<br />
  rev1k:recusively calls the sublists and connects them<br />
  hope the recursion is easy to understand<br />
*/</p>
<p>node *revk2(node **ptr,int num,int k)//reverses the k nodes<br />
{<br />
	if(k==num) return (*ptr);<br />
	k++;<br />
	node *temp1,*temp2;<br />
	temp2=(*ptr);<br />
	(*ptr)=(*ptr)-&gt;link;<br />
	temp1=revk2(ptr,num,k);<br />
	temp1-&gt;link=temp2;<br />
	return temp2;<br />
}<br />
node *revk1(node *ptr,int k)//recursively calls the k nodes<br />
{<br />
	int i=1;<br />
	node *t2,*t1;<br />
	node *temp=ptr;<br />
	if(temp==NULL) return NULL;<br />
	while(temp-&gt;link!=NULL &amp;&amp; i!=k)<br />
	{<br />
		temp=temp-&gt;link;<br />
		i++;<br />
	}</p>
<p>	t1=revk1(temp-&gt;link,k);//start of next sublist<br />
	t2=revk2(&amp;ptr,i,1);//end of first sublist,but ptr<br />
                           // points to the beginning of it</p>
<p>	t2-&gt;link=t1;//end of first sublist to start of next<br />
	return ptr;//start of first sublist<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-sonali-gupta even thread-even depth-1" id="dsq-comment-20159">
        <div id="dsq-comment-header-20159" class="dsq-comment-header">
            <cite id="dsq-cite-20159">
                <span id="dsq-author-user-20159">sonali gupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20159" class="dsq-comment-body">
            <div id="dsq-comment-message-20159" class="dsq-comment-message"><pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
<p>#include<stdio .h><br />
#include<conio .h><br />
#include<malloc .h><br />
typedef struct NODE<br />
{int info;<br />
struct NODE *next;<br />
}node;<br />
node *temp,*start,*ptr,*p,*q,*m,*n,*locp,*s;<br />
node *getnode()<br />
{return((node *)malloc(sizeof(node)));<br />
}</p>
<p>void traverse(node *start)<br />
{<br />
ptr=start;<br />
while(ptr!=NULL)<br />
{printf(&#8220;%d &#8220;,ptr->info);<br />
ptr=ptr->next;<br />
                }<br />
                }<br />
void reverse(node *start,int k)<br />
{int count=k-1;<br />
ptr=start;<br />
temp=getnode();<br />
temp->info=ptr->info;<br />
temp->next=NULL;<br />
q=temp;<br />
while(count!=0)<br />
{ptr=ptr->next;<br />
 temp=getnode();<br />
temp->info=ptr->info;<br />
temp->next=q;<br />
q=temp;<br />
count&#8211;;<br />
                }<br />
s=ptr;<br />
traverse(q);<br />
if(s->next!=NULL)<br />
reverse(s->next,5);<br />
else<br />
return;<br />
     }<br />
int main()<br />
{<br />
   int x;<br />
char ch=&#8217;y';<br />
printf(&#8220;enter info part\n&#8221;);<br />
scanf(&#8220;%d&#8221;,&#038;x);<br />
temp=getnode();<br />
temp->info=x;<br />
temp->next=NULL;<br />
start=temp;<br />
p=start;<br />
m=start;<br />
while(ch==&#8217;y&#8217;)<br />
{printf(&#8220;enter the info part\n&#8221;);<br />
scanf(&#8220;%d&#8221;,&#038;x);<br />
 temp=getnode();<br />
temp->info=x;<br />
p->next=temp;<br />
temp->next=NULL;<br />
p=temp;<br />
printf(&#8220;do u want to enter more?\n&#8221;);<br />
fflush(stdin);<br />
scanf(&#8220;%c&#8221;,&#038;ch);<br />
}<br />
traverse(start);<br />
printf(&#8220;\n&#8221;);<br />
reverse(start,5);<br />
printf(&#8220;\n&#8221;);<br />
    getch();<br />
    return 0;<br />
}</malloc></conio></stdio></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug odd alt thread-odd thread-alt depth-1" id="dsq-comment-17907">
        <div id="dsq-comment-header-17907" class="dsq-comment-header">
            <cite id="dsq-cite-17907">
                <span id="dsq-author-user-17907">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17907" class="dsq-comment-body">
            <div id="dsq-comment-message-17907" class="dsq-comment-message"><p>Intelligent <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-17143">
        <div id="dsq-comment-header-17143" class="dsq-comment-header">
            <cite id="dsq-cite-17143">
                <span id="dsq-author-user-17143">vishwanath</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17143" class="dsq-comment-body">
            <div id="dsq-comment-message-17143" class="dsq-comment-message"><pre> <code language="C">

ListNode *reverse(ListNode *head,ListNode *end){

        if(head == end || !(end)){
        return head;
        }

        ListNode *temp=reverse(head-&gt;next,end);
        //printf(&quot;printing tempList\n&quot;);
        head-&gt;next-&gt;next=head;
        head-&gt;next = NULL;

        //printList(temp);
        return temp;
}

ListNode *reverseKGroup(ListNode *head, int k) {
           int i;
           ListNode *finalHead;
           ListNode *temp=head;
           ListNode *tempNext;

           for(i =0; i&lt;k-1 &amp;&amp; temp;i++){
                temp=temp-&gt;next;
           }

            if(temp){
                tempNext = temp-&gt;next;
                }
            if(i==k-1){
                        finalHead=reverse(head,temp);
                        if(tempNext){
                        head-&gt;next=reverseKGroup(tempNext,k);
                        }
                return finalHead;
                }

           else{
                 return head;
                }

        }

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-16126">
        <div id="dsq-comment-header-16126" class="dsq-comment-header">
            <cite id="dsq-cite-16126">
                <span id="dsq-author-user-16126">Soumya Sengupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16126" class="dsq-comment-body">
            <div id="dsq-comment-message-16126" class="dsq-comment-message"><p>we can follow another approach..please correct me geeks for geeks if i am worng&#8230;<br />
1)we traverse the whole list and count the number of nodes..<br />
2)starting from the first node if the number of elemnt in list is greater than k(number of nodes to be reversed at 1nce)..den we reverse the group f k elemnts nd move to the next k+1 element and again calculate n=n-k..if n&gt;k den we again reverse group f 3 elemnts&#8230;.<br />
if in any pass n&lt;k..den we break from th loop and reverse the remaining elemnts and atach them to the current reversed list&#8230;<br />
<img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-18519">
        <div id="dsq-comment-header-18519" class="dsq-comment-header">
            <cite id="dsq-cite-18519">
http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/                <span id="dsq-author-user-18519">sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18519" class="dsq-comment-body">
            <div id="dsq-comment-message-18519" class="dsq-comment-message"><p>see example.even if size of list of remaning part is less than k we have to reverse the that remainig part.i think you have left this point in ur solution.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15469">
        <div id="dsq-comment-header-15469" class="dsq-comment-header">
            <cite id="dsq-cite-15469">
http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/                <span id="dsq-author-user-15469">Viky</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15469" class="dsq-comment-body">
            <div id="dsq-comment-message-15469" class="dsq-comment-message"><p>@GeeksforGeeks: This code is missing one case where k &gt; no. of nodes in the list.<br />
We can mention in the post that we are assuming k &lt; no. of nodes ..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-16119">
        <div id="dsq-comment-header-16119" class="dsq-comment-header">
            <cite id="dsq-cite-16119">
                <span id="dsq-author-user-16119">Soumya Sengupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16119" class="dsq-comment-body">
            <div id="dsq-comment-message-16119" class="dsq-comment-message"><p>gud point</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-11300">
        <div id="dsq-comment-header-11300" class="dsq-comment-header">
            <cite id="dsq-cite-11300">
                <span id="dsq-author-user-11300">kumarbe</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11300" class="dsq-comment-body">
            <div id="dsq-comment-message-11300" class="dsq-comment-message"><p>Just learnt the algorithm through this page.Thanks everyone.</p>
<p>Reversing K nodes iteratively passing a reference pointer.</p>
<pre> <code language="C">
void reverseKnodes(Node **head,int k)
{
        Node *first=NULL,*current=*head;
        Node *prevNode,*nextNode,*tmp,*tail;
        int cnt;
        while(current)
        {
                tmp=current;
                prevNode=NULL;
                cnt=k;
                while(current &amp;&amp; cnt--)
                {
                        nextNode=current-&gt;next;
                        current-&gt;next=prevNode;
                        prevNode=current;
                        current=nextNode;
                }
                if(!first)
                        first=prevNode;
                else
                        tail-&gt;next=prevNode;
                tail=tmp;
        }
        *head=first;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-11297">
        <div id="dsq-comment-header-11297" class="dsq-comment-header">
            <cite id="dsq-cite-11297">
                <span id="dsq-author-user-11297">kumarbe</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11297" class="dsq-comment-body">
            <div id="dsq-comment-message-11297" class="dsq-comment-message"><p>Reversing K nodes recursively passing a reference pointer</p>
<pre> <code language="C">
void   recursiveReverseKnodes(Node **head,int k)
{
  Node *first=*head,*current=*head;
  Node *prevNode=NULL,*nextNode=NULL;
  int cnt=0;
        if(*head==NULL || (*head)-&gt;next==NULL)
                return;
        while(current &amp;&amp; cnt&lt;k)
        {
                nextNode=current-&gt;next;
                current-&gt;next=prevNode;
                prevNode=current;
                current=nextNode;
                cnt++;
        }
        recursiveReverseKnodes(&amp;nextNode,k);
        first-&gt;next=nextNode;
        *head=prevNode;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10573">
        <div id="dsq-comment-header-10573" class="dsq-comment-header">
            <cite id="dsq-cite-10573">
                <span id="dsq-author-user-10573">Vijay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10573" class="dsq-comment-body">
            <div id="dsq-comment-message-10573" class="dsq-comment-message"><p>Iterative Solution</p>
<pre> <code language="C">
void reverse_in_chunks(node **head,int k)
{
  node *prev,*current,*next,*tmp;
  int count=0;

  tmp=prev=current=next=NULL;
  current = *head;
  next = current-&gt;next;

   if(k &lt; 2)
	   return ;
   while (next != NULL)
   {
	   current-&gt;next=prev;
	   prev = current;
	   current = next;
	   next = next-&gt;next;
	   count++;

	   if (count == k &amp;&amp; prev !=NULL)
		   *head=prev;

	   if (count % k == 0 )
	   {

		   if(tmp == NULL)
		   {
			   tmp=prev;
		   }
		   else
		   {
			   tmp-&gt;next=prev;
		   }

		   while(tmp-&gt;next !=NULL)
		   {
			   tmp=tmp-&gt;next;
		   }
		   prev = NULL;
	   }
	   // To Handle case where , List size is not multiple of k
	   if (next == NULL)
	   {
		   current-&gt;next = prev;
		   prev = current;
		   tmp-&gt;next = prev;
		   while(tmp-&gt;next !=NULL)
		   {
			   tmp=tmp-&gt;next;
		   }
	   }

   }
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10572">
        <div id="dsq-comment-header-10572" class="dsq-comment-header">
            <cite id="dsq-cite-10572">
                <span id="dsq-author-user-10572">Vijay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10572" class="dsq-comment-body">
            <div id="dsq-comment-message-10572" class="dsq-comment-message"><pre> <code language="C">
void reverse_in_chunks(node **head,int k)
{
  node *prev,*current,*next,*tmp;
  int count=0;

  tmp=prev=current=next=NULL;
  current = *head;
  next = current-&gt;next;

   if(k &lt; 2)
	   return ;
   while (next != NULL)
   {
	   current-&gt;next=prev;
	   prev = current;
	   current = next;
	   next = next-&gt;next;
	   count++;

	   if (count == k &amp;&amp; prev !=NULL)
		   *head=prev;

	   if (count % k == 0 )
	   {

		   if(tmp == NULL)
		   {
			   tmp=prev;
		   }
		   else
		   {
			   tmp-&gt;next=prev;
		   }

		   while(tmp-&gt;next !=NULL)
		   {
			   tmp=tmp-&gt;next;
		   }
		   prev = NULL;
	   }
	   // To Handle case where , List size is not multiple of k
	   if (next == NULL)
	   {
		   current-&gt;next = prev;
		   prev = current;
		   tmp-&gt;next = prev;
		   while(tmp-&gt;next !=NULL)
		   {
			   tmp=tmp-&gt;next;
		   }
	   }

   }
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8595">
        <div id="dsq-comment-header-8595" class="dsq-comment-header">
            <cite id="dsq-cite-8595">
                <span id="dsq-author-user-8595">chandu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8595" class="dsq-comment-body">
            <div id="dsq-comment-message-8595" class="dsq-comment-message"><p>Hi,</p>
<p>Say, if k=3 and the linked list length is less than 3, the above code returns null as head pointer</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-8600">
        <div id="dsq-comment-header-8600" class="dsq-comment-header">
            <cite id="dsq-cite-8600">
                <span id="dsq-author-user-8600">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8600" class="dsq-comment-body">
            <div id="dsq-comment-message-8600" class="dsq-comment-message"><p>The code seems to be working fine for all cases.</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

/* Link list node */
struct node
{
    int data;
    struct node* next;
};

/* Reverses the linked list in groups of size k and returns the pointer to the new head node */
struct node *reverse (struct node *head, int k)
{
    struct node* current = head;
    struct node* next;
    struct node* prev = NULL;
    int count = 0;

    /*reverse first k nodes of the linked list */
    while (current != NULL &amp;&amp; count &lt; k)
    {
       next  = current-&gt;next;
       current-&gt;next = prev;
       prev = current;
       current = next;
       count++;
    }

    /* next is now a pointer to (k+1)th node
       Recursively call for the list starting from current.
       And make rest of the list as next of first node */
    if(next !=  NULL)
    {  head-&gt;next = reverse(next, k); }

    /* prev is new head of the input list */
    return prev;
}

/* UTILITY FUNCTIONS */
/* Function to push a node */
void push(struct node** head_ref, int new_data)
{
    /* allocate node */
    struct node* new_node =
            (struct node*) malloc(sizeof(struct node));

    /* put in the data  */
    new_node-&gt;data  = new_data;

    /* link the old list off the new node */
    new_node-&gt;next = (*head_ref);

    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}

/* Function to print linked list */
void printList(struct node *node)
{
    while(node != NULL)
    {
        printf(&quot;%d  &quot;, node-&gt;data);
        node = node-&gt;next;
    }
}

/* Drier program to test above function*/
int main(void)
{
    /* Start with the empty list */
    struct node* head = NULL;

     /* Created Linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8 */
     push(&amp;head, 8);
     push(&amp;head, 7);

     printf(&quot;\n Given linked list \n&quot;);
     printList(head);
     head = reverse(head, 3);

     printf(&quot;\n Reversed Linked list \n&quot;);
     printList(head);

     getchar();
     return(0);
}
</code> </pre>
<p> Given linked list<br />
7  8<br />
 Reversed Linked list<br />
8  7</p>
<p>To save everybody&#8217;s time, please run the code once before writing comments.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4628">
        <div id="dsq-comment-header-4628" class="dsq-comment-header">
            <cite id="dsq-cite-4628">
                <span id="dsq-author-user-4628">intel2390</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4628" class="dsq-comment-body">
            <div id="dsq-comment-message-4628" class="dsq-comment-message"><p>shudn&#8217;t we change  <strong> head-&gt;next = reverse(next, k);</strong><em> to current-&gt;next =reverse(next,k);</em></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-11068">
        <div id="dsq-comment-header-11068" class="dsq-comment-header">
            <cite id="dsq-cite-11068">
                <span id="dsq-author-user-11068">addict</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11068" class="dsq-comment-body">
            <div id="dsq-comment-message-11068" class="dsq-comment-message"><p>initially this is the list and head points to 1<br />
1-&gt;2-&gt;3-&gt;4-&gt;5<br />
say k=4<br />
then after reversing 1st 4 numbers.<br />
1&lt;-2&lt;-35 here head still points to 1 so head-&gt;next should be 5 and the new head(prev) should be 4.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-11069">
        <div id="dsq-comment-header-11069" class="dsq-comment-header">
            <cite id="dsq-cite-11069">
                <span id="dsq-author-user-11069">addict</span>
            </cite>
        </div>
        <div id="dsq-comment-body-11069" class="dsq-comment-body">
            <div id="dsq-comment-message-11069" class="dsq-comment-message"><p>correction. after reversing the list looks like this 1&lt;-2&lt;-35</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-28775">
        <div id="dsq-comment-header-28775" class="dsq-comment-header">
            <cite id="dsq-cite-28775">
                <span id="dsq-author-user-28775">raj</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28775" class="dsq-comment-body">
            <div id="dsq-comment-message-28775" class="dsq-comment-message"><p>No,its head-&gt;next=reverse(next,k); only because head points first node means after reversing the sub list it should points other reverse of sub list. like 3-&gt;2-&gt;1-&gt;(rev (4-&gt;5-&gt;6,3)like that</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-17015">
        <div id="dsq-comment-header-17015" class="dsq-comment-header">
            <cite id="dsq-cite-17015">
                <span id="dsq-author-user-17015">Vishal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17015" class="dsq-comment-body">
            <div id="dsq-comment-message-17015" class="dsq-comment-message"><p>Yes, head-&gt;next seems erroneous. It should be,<br />
current-&gt;next = reverse(next,k);</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3107">
        <div id="dsq-comment-header-3107" class="dsq-comment-header">
            <cite id="dsq-cite-3107">
                <span id="dsq-author-user-3107">sowdri</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3107" class="dsq-comment-body">
            <div id="dsq-comment-message-3107" class="dsq-comment-message"><pre> <code language="C">
// a simple recursive solution

node* reverse(node *p, int n) {
	
	node *temp, *q = null, *head = p;
	
	if( p == null ) 
		return null; 

	for(int i=0; i&lt;n &amp;&amp; p!=null; i++ ){
		temp = p-&gt;next;
		p-&gt;next = q;
		q = p;
		p = temp;
	}
	
	head-&gt;next = reverse( p, n); 	

	return q;
}</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-2976">
        <div id="dsq-comment-header-2976" class="dsq-comment-header">
            <cite id="dsq-cite-2976">
                <span id="dsq-author-user-2976">Mridul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2976" class="dsq-comment-body">
            <div id="dsq-comment-message-2976" class="dsq-comment-message"><p>Working Code !!<br />
start is the pointer to the linked list, and kk is the paremeter as per question.</p>
<pre> <code language="C">
int reverse_k(struct node **start,int k)
{
       struct node *next,*prev,*last,*prev_g,*temp;
       int i;
       next=*start;
       prev_g=NULL;
       
       while(next!=NULL)
       {
                  prev=NULL;
                  for(i=0;next!=NULL &amp;&amp; ilink;
                           next-&gt;link=prev;
                           prev=next;
                           if(i==0)
                                 last=prev;
                           next=temp;
                  }
                  
                  if(last==*start)
                       *start=next;
                   
                  if(next!=NULL)
                  {
                        temp=next-&gt;link;
                        next-&gt;link=prev;
                        prev=next;
                        next=temp;
                  }
                  
                  if(prev_g!=NULL)
                          prev_g-&gt;link=prev;
                          
                  prev_g=last;
       } 
       return 0;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-10571">
        <div id="dsq-comment-header-10571" class="dsq-comment-header">
            <cite id="dsq-cite-10571">
                <span id="dsq-author-user-10571">Vijay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10571" class="dsq-comment-body">
            <div id="dsq-comment-message-10571" class="dsq-comment-message"><p>@Mridul<br />
Thanks for attempting and posting iterative Solution</p>
<p>Can you please correct typos here,  </p>
<p>for(i=0;next!=NULL &amp;&amp; ilink; &lt;&#8212;&#8212;-</p>
<p>I changed this to </p>
<p>for(i=0;next!=NULL ; i++) &lt;&#8212;&#8212;-</p>
<p>and tried to reverse, its crashing</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2519">
        <div id="dsq-comment-header-2519" class="dsq-comment-header">
            <cite id="dsq-cite-2519">
                <span id="dsq-author-user-2519">sk</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2519" class="dsq-comment-body">
            <div id="dsq-comment-message-2519" class="dsq-comment-message"><p>give some recursive solution..</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-2566">
        <div id="dsq-comment-header-2566" class="dsq-comment-header">
            <cite id="dsq-cite-2566">
                <span id="dsq-author-user-2566">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2566" class="dsq-comment-body">
            <div id="dsq-comment-message-2566" class="dsq-comment-message"><p>I think the above given solution is recursive.  Could you please clearly specify your requirement?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-2164">
        <div id="dsq-comment-header-2164" class="dsq-comment-header">
            <cite id="dsq-cite-2164">
                <span id="dsq-author-user-2164">bunty</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2164" class="dsq-comment-body">
            <div id="dsq-comment-message-2164" class="dsq-comment-message"><p>The first program returns a pointer, which points to the first node of the reverse list.<br />
In case, we want the head to point to the last node, then the above can be modified as follows:</p>
<pre> <code language="C">
/* Reverses the linked list in groups of size k and returns the pointer to the new head node */
struct node *reverse (struct node *head, int k)
{
    struct node* current = head;
    struct node* next;
    struct node* prev = NULL;
    int count = 0;  
 
    /*reverse first k nodes of the linked list */
    while (current != NULL &amp;&amp; count next;
       current-&gt;next = prev;
       prev = current;
       current = next;
       count++;
    }
 
    /* next is now a pointer to (k+1)th node
       Recursively call for the list starting from current.
       And make rest of the list as next of first node */
    if((next !=  NULL)&amp;&amp;(count==k))
      head-&gt;next = reverse(next, k);
    if (next == NULL) // whatever the count is...
       // This will be executed only once at the last iteration.
      GlobalHead-&gt;next = head;
 
    /* prev is new head of the input list */
    return prev;
}

// Point to the list last node.
struct node*  GlobalHead;

/* Drier program to test above function*/
int main(void)
{
    /* Start with the empty list */
    struct node* head = NULL;
 
     /* Created Linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8 */
     push(&amp;head, 8);
     push(&amp;head, 7);
     push(&amp;head, 6);
     push(&amp;head, 5);
     push(&amp;head, 4);
     push(&amp;head, 3);
     push(&amp;head, 2);
     push(&amp;head, 1);          
 
     printf(&quot;\n Given linked list \n&quot;);
     printList(head);
     reverse(head, 3);
 
     printf(&quot;\n Reversed Linked list \n&quot;);
     printList(GlobalHead);
 
     getchar();
     return(0);
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-2165">
        <div id="dsq-comment-header-2165" class="dsq-comment-header">
            <cite id="dsq-cite-2165">
                <span id="dsq-author-user-2165">bunty</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2165" class="dsq-comment-body">
            <div id="dsq-comment-message-2165" class="dsq-comment-message"><p>My Mistake:<br />
With these code, it is not possible to traverse through the nodes.<br />
It needs modifications.</p>
<p>I &#8216;ll be back with the solution.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1472">
        <div id="dsq-comment-header-1472" class="dsq-comment-header">
            <cite id="dsq-cite-1472">
                <span id="dsq-author-user-1472">juggernautvatsan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1472" class="dsq-comment-body">
            <div id="dsq-comment-message-1472" class="dsq-comment-message"><p>Why do we make the rest of the list as next of first node?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-2567">
        <div id="dsq-comment-header-2567" class="dsq-comment-header">
            <cite id="dsq-cite-2567">
                <span id="dsq-author-user-2567">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2567" class="dsq-comment-body">
            <div id="dsq-comment-message-2567" class="dsq-comment-message"><p>See diagrams given on <a href="http://geeksforgeeks.org/?p=860" rel="nofollow">http://geeksforgeeks.org/?p=860</a>.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-sambasiva odd alt thread-even depth-1" id="dsq-comment-1431">
        <div id="dsq-comment-header-1431" class="dsq-comment-header">
            <cite id="dsq-cite-1431">
http://effprog.blogspot.com                <span id="dsq-author-user-1431">Sambasiva</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1431" class="dsq-comment-body">
            <div id="dsq-comment-message-1431" class="dsq-comment-message"><p>Here is the iterative solution:</p>
<pre> <code language="C">
list reversek(list current, int k)
{
        list r = NULL;

        Node *head;
        while(current)
        {
                int count = k;
                Node *next, *prev = NULL;
                Node *p = current;

                while(current &amp;&amp; count--)
                {
                        next = current-&gt;next;
                        current-&gt;next = prev;
                        prev = current;
                        current = next;
                }
                if(!r)
                         r = prev;
                else
                        head-&gt;next = prev;
                head = p;
        }
        return r;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-1404">
        <div id="dsq-comment-header-1404" class="dsq-comment-header">
            <cite id="dsq-cite-1404">
http://dzmitryhuba.blogspot.com                <span id="dsq-author-user-1404">Dzmitry Huba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1404" class="dsq-comment-body">
            <div id="dsq-comment-message-1404" class="dsq-comment-message"><p>Nice solution. We can also do reverse in groups in iterative manner in case list is long enough to cause stack overflow. We can simply maintain two pointers:<br />
&#8211; Head of the current group (it is actually tail of the previous group).<br />
&#8211; Tail (it is actually will be the tail after group is reversed) of the current group.<br />
So to reverse a group we get at most k nodes that are after tail before reversal and insert them right after head. Then head is changed to current group tail and tail is changed to its next node.</p>
<p>static ListNode&lt;T&gt; ReverseInGroups&lt;T&gt;(ListNode&lt;T&gt; list, int k)<br />
{<br />
	list = new ListNode&lt;T&gt;(default(T), list);<br />
	var head = list;<br />
	var tail = head.Next;</p>
<p>	while (tail != null)<br />
	{<br />
		for (var i = 0; i &lt; k &#8211; 1 &amp;&amp; tail.Next != null; i++)<br />
		{<br />
			var back = tail.Next;<br />
			tail.Next = tail.Next.Next;<br />
			back.Next = head.Next;<br />
			head.Next = back;<br />
		}<br />
		head = tail;<br />
		tail = tail.Next;<br />
	}<br />
	return list.Next;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-1833">
        <div id="dsq-comment-header-1833" class="dsq-comment-header">
            <cite id="dsq-cite-1833">
                <span id="dsq-author-user-1833">Shiv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1833" class="dsq-comment-body">
            <div id="dsq-comment-message-1833" class="dsq-comment-message"><p>It may give segmentation error if the number of elements in<br />
list are not exactly multiple of k.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1331">
        <div id="dsq-comment-header-1331" class="dsq-comment-header">
            <cite id="dsq-cite-1331">
                <span id="dsq-author-user-1331">kamal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1331" class="dsq-comment-body">
            <div id="dsq-comment-message-1331" class="dsq-comment-message"><p>It&#8217;s a famous MS interview question.</p>
<p>great solution!  very useful, thanks!</p>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/';
var disqus_identifier = '8014 http://geeksforgeeks.org/?p=8014';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Reverse a Linked List in groups of given size";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.217 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:22:58 -->

<!-- Compression = gzip -->
<!-- super cache -->