<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Majority Element - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/majority-element/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Majority Element - GeeksforGeeks" />
<meta property="og:description" content="Majority Element: A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element). Write a function which takes an array and emits the majority element (if it exists), otherwise prints NONE as follows: I/P : 3 3 4 &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/majority-element/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Majority Element" />
<meta property="article:tag" content="Moore&#039;s Voting Algorithm" />
<meta property="article:section" content="Arrays" />
<meta property="article:published_time" content="2009-05-30T09:52:04+00:00" />
<meta property="article:modified_time" content="2010-06-03T22:53:07+00:00" />
<meta property="og:updated_time" content="2010-06-03T22:53:07+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.584 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111407 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Majority Element</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p><strong>Majority Element:</strong> A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element).</p>
<p>Write a function which takes an array and emits the majority element (if it exists), otherwise prints NONE as follows:</p>
<pre>
       I/P : 3 3 4 2 4 4 2 4 4
       O/P : 4 

       I/P : 3 3 4 2 4 4 2 4
       O/P : NONE
</pre>
<p><strong>METHOD 1 (Basic)</strong><br />
The basic solution is to have two loops and keep track of maximum count for all different elements. If maximum count becomes greater than n/2 then break the loops and return the element having maximum count. If maximum count doesn’t become more than n/2 then majority element doesn’t exist.  </p>
<p><strong>Time Complexity:</strong>  O(n*n).<br />
<strong>Auxiliary Space :</strong>  O(1). </p>
<p></br><br />
<strong>METHOD 2 (Using Binary Search Tree)</strong><br />
Thanks to <a href="http://geeksforgeeks.org/?p=503#comment-286">Sachin Midha</a> for suggesting this solution.</p>
<p>Node of the Binary Search Tree (used in this approach) will be as follows.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
struct tree
{
  int element;
  int count;
}BST;
</pre>
<p>Insert elements in BST one by one and if an element is already present then increment the count of the node.  At any stage, if count of a node becomes more than n/2 then return.<br />
The method works well for the cases where n/2+1 occurrences of the majority element is present in the starting of the array, for example {1, 1, 1, 1, 1, 2, 3, 4}.<br />
<strong><br />
Time Complexity:</strong> If a binary search tree is used then time complexity will be O(n^2).  If a <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">self-balancing-binary-search</a> tree is used then O(nlogn)<br />
<strong>Auxiliary Space: </strong> O(n) </p>
<p></br><br />
<strong>METHOD 3 (Using Moore’s Voting Algorithm)</strong></p>
<p>This is a two step process.<br />
1. Get an element occurring most of the time in the array. This phase will make sure that if there is a majority element then it will return that only.<br />
2. Check if the element obtained from above step is majority element. </p>
<p><em>1. Finding a Candidate:</em><br />
The algorithm for first phase that works in O(n) is known as Moore’s Voting Algorithm. Basic idea of the algorithm is if we cancel out each occurrence of an element e with all the other elements that are different from e then e will exist till end if it is a majority element. </p>
<pre>
findCandidate(a[], size)
1.  Initialize index and count of majority element
     maj_index = 0, count = 1
2.  Loop for i = 1 to size – 1
    (a)If a[maj_index] == a[i]
        count++
    (b)Else
        count--;
    (c)If count == 0
        maj_index = i;
        count = 1
3.  Return a[maj_index]
</pre>
<p>Above algorithm loops through each element and maintains a count of a[maj_index], If next element is same then increments the count, if next element is not same then decrements the count, and if the count reaches 0 then changes the maj_index to the current element and sets count to 1.<br />
First Phase algorithm gives us a candidate element. In second phase we need to check if the candidate is really a majority element. Second phase is simple and can be easily done in O(n). We just need to check if count of the candidate element is greater than n/2.</p>
<p>Example:<br />
A[] = 2, 2, 3, 5, 2, 2, 6<br />
Initialize:<br />
maj_index = 0, count = 1 –> candidate ‘2?<br />
2, 2, 3, 5, 2, 2, 6</p>
<p>Same as a[maj_index] => count = 2<br />
2, 2, 3, 5, 2, 2, 6</p>
<p>Different from a[maj_index] => count = 1<br />
2, 2, 3, 5, 2, 2, 6</p>
<p>Different from a[maj_index] => count = 0<br />
Since count = 0, change candidate for majority element to 5 => maj_index = 3, count = 1<br />
2, 2, 3, 5, 2, 2, 6</p>
<p>Different from a[maj_index] => count = 0<br />
Since count = 0, change candidate for majority element to 2 => maj_index = 4<br />
2, 2, 3, 5, 2, 2, 6</p>
<p>Same as a[maj_index] => count = 2<br />
2, 2, 3, 5, 2, 2, 6</p>
<p>Different from a[maj_index] => count = 1</p>
<p>Finally candidate for majority element is 2.</p>
<p>First step uses Moore’s Voting Algorithm to get a candidate for majority element.  </p>
<p>2.<em> Check if the element obtained in step 1 is majority</em>
<pre>
printMajority (a[], size)
1.  Find the candidate for majority
2.  If candidate is majority. i.e., appears more than n/2 times.
       Print the candidate
3.  Else
       Print "NONE"
</pre>
<p><strong>Implementation of method 3:</strong></p>
<pre class="brush: cpp; title: ; notranslate" title="">
/* Program for finding out majority element in an array */
# include&lt;stdio.h&gt;
# define bool int
 
int findCandidate(int *, int);
bool isMajority(int *, int, int);
 
/* Function to print Majority Element */
void printMajority(int a[], int size)
{
  /* Find the candidate for Majority*/
  int cand = findCandidate(a, size);
 
  /* Print the candidate if it is Majority*/
  if(isMajority(a, size, cand))
    printf(&quot; %d &quot;, cand);
  else
    printf(&quot;NO Majority Element&quot;);
}
 
/* Function to find the candidate for Majority */
int findCandidate(int a[], int size)
{
    int maj_index = 0, count = 1;
    int i;
    for(i = 1; i &lt; size; i++)
    {
        if(a[maj_index] == a[i])
            count++;
        else
            count--;
        if(count == 0)
        {
            maj_index = i;
            count = 1;
        }
    }
    return a[maj_index];
}
 
/* Function to check if the candidate occurs more than n/2 times */
bool isMajority(int a[], int size, int cand)
{
    int i, count = 0;
    for (i = 0; i &lt; size; i++)
      if(a[i] == cand)
         count++;
    if (count &gt; size/2)
       return 1;
    else
       return 0;
}
 
/* Driver function to test above functions */
int main()
{
    int a[] = {1, 3, 3, 1, 2};
    printMajority(a, 5);
    getchar();
    return 0;
}
</pre>
<p><strong>Time Complexity:</strong> O(n)<br />
<strong>Auxiliary Space :</strong> O(1)</p>
<p>Now give a try to below question<br />
Given an array of 2n elements of which n elements are same and the remaining n elements are all different. Write a C program to find out the value which is present n times in the array. There is no restriction on the elements in the array. They are random (In particular they not sequential).</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/" title="K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)">K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)</a></li><li><a href="http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/" title="K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1">K&#8217;th Smallest/Largest Element in Unsorted Array | Set 1</a></li><li><a href="http://www.geeksforgeeks.org/time-complexity-insertion-sort-inversions/" title="Time complexity of insertion sort when there are O(n) inversions?">Time complexity of insertion sort when there are O(n) inversions?</a></li><li><a href="http://www.geeksforgeeks.org/check-two-given-sets-disjoint/" title="How to check if two given sets are disjoint?">How to check if two given sets are disjoint?</a></li><li><a href="http://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/" title="Minimum Number of Platforms Required for a Railway/Bus Station">Minimum Number of Platforms Required for a Railway/Bus Station</a></li><li><a href="http://www.geeksforgeeks.org/given-two-sorted-arrays-number-x-find-pair-whose-sum-closest-x/" title="Find the closest pair from two sorted arrays">Find the closest pair from two sorted arrays</a></li><li><a href="http://www.geeksforgeeks.org/print-elements-sorted-order-row-column-wise-sorted-matrix/" title="Print all elements in sorted order from row and column wise sorted matrix">Print all elements in sorted order from row and column wise sorted matrix</a></li><li><a href="http://www.geeksforgeeks.org/length-largest-subarray-contiguous-elements-set-1/" title="Length of the largest subarray with contiguous elements | Set 1">Length of the largest subarray with contiguous elements | Set 1</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/majority-element/" rel="tag">Majority Element</a>, <a href="http://www.geeksforgeeks.org/tag/moores-voting-algorithm/" rel="tag">Moore's Voting Algorithm</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fmajority-element%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/majority-element/" data-text="Majority Element" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/majority-element/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34548">
        <div id="dsq-comment-header-34548" class="dsq-comment-header">
            <cite id="dsq-cite-34548">
                <span id="dsq-author-user-34548">Gaurav Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34548" class="dsq-comment-body">
            <div id="dsq-comment-message-34548" class="dsq-comment-message"><p>/* Given an array of 2n elements of which n elements are same and the remaining n elements are all different. Write a C program to find out the value which is present n times in the array. There is no restriction on the elements in the array. */</p>
<p>If we carefully read the question, a number appears &#8216;n&#8217; times while all other numbers are different. Since all other numbers are different we can use this information.<br />
Case 1: array can be in this form<br />
1,2,1,3,1,4,1,5(number at alternate positions)<br />
Case 2:<br />
1,2,3,4,1,1,5,1(number occur atleast twice consecutively )</p>
<p>We may extend moore&#8217;s voting algo:</p>
<p>code available at <a href="http://ideone.com/lrOcpj" rel="nofollow">http://ideone.com/lrOcpj</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34035">
        <div id="dsq-comment-header-34035" class="dsq-comment-header">
            <cite id="dsq-cite-34035">
                <span id="dsq-author-user-34035">Anubhav</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34035" class="dsq-comment-body">
            <div id="dsq-comment-message-34035" class="dsq-comment-message"><p>Can you please explain me if the last method mentioned is better in Time Complexity or what..??</p>
<p>And if the code I provided is in any ways better ar at par with any of the methods mentioned above..??</p>
<p>#include</p>
<p>#define MAX 10000</p>
<p>#define ARRAYSIZE(arr) sizeof(arr)/sizeof(arr[0])</p>
<p>main()</p>
<p>{</p>
<p>    int i, j, arr[] = {3, 3, 14, 2, 14, 14, 2, 14, 14}, sum = 0, count[MAX] = {0}, size;</p>
<p>    size = ARRAYSIZE(arr);</p>
<p>    for( i = 0; i &lt; size; i++ )</p>
<p>    {</p>
<p>        count[arr[i]]++;</p>
<p>    }</p>
<p>    for( i = 0; i  (size/2) )</p>
<p>        {</p>
<p>            printf(&#8220;%dn&#8221;, arr[i]);</p>
<p>            sum++;</p>
<p>            break;</p>
<p>        }</p>
<p>    }</p>
<p>    if( sum == 0 )</p>
<p>    {</p>
<p>        printf(&#8220;Nonen&#8221;);</p>
<p>    }</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-33004">
        <div id="dsq-comment-header-33004" class="dsq-comment-header">
            <cite id="dsq-cite-33004">
                <span id="dsq-author-user-33004">harry</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33004" class="dsq-comment-body">
            <div id="dsq-comment-message-33004" class="dsq-comment-message"><p>Is method 3 O(n) ? &#8230;should be more ..isnt so because of isMajority call?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32624">
        <div id="dsq-comment-header-32624" class="dsq-comment-header">
            <cite id="dsq-cite-32624">
                <span id="dsq-author-user-32624">Mihir Sathe</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32624" class="dsq-comment-body">
            <div id="dsq-comment-message-32624" class="dsq-comment-message"><p>We can also do a QuickSelect to find median (Expected runtime: O(n), Space: O(1))</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-32430">
        <div id="dsq-comment-header-32430" class="dsq-comment-header">
            <cite id="dsq-cite-32430">
                <span id="dsq-author-user-32430">yugal1988</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32430" class="dsq-comment-body">
            <div id="dsq-comment-message-32430" class="dsq-comment-message"><p>We can-not achieve O(n) with sorting in O(n) space &#8211; Sorting is out of question.<br />
Now, this algorithm works fine since :<br />
Majority element needs be having a count of &gt;n/2   ( Note: =n/2 is not majority )</p>
<p>[ 4, 3, 4, 3, 4, 3 ]  =&gt; None<br />
[ 4, 3, 4, 3, 4 ] =&gt; 4</p>
<p>Now, its important to note that why do we need to check the majority candidate. Because a candidate with count = 0 [ after cancelling out others ] can or can-not be a majority element.</p>
<p>For instance, [ 4, 5, 6, 7, 4, 3, 4, 3 ] now candidate is 4 with count=0 at the end. And on checking for majority turns out to be a majority element.</p>
<p>On the other hand, [ 1, 5, 6, 7, 4, 3, 4, 3 ] also gives 4 as candidate with count=0 at the end but it fails the majority test.</p>
<p>That summed up all doubts for me.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-33760">
        <div id="dsq-comment-header-33760" class="dsq-comment-header">
            <cite id="dsq-cite-33760">
                <span id="dsq-author-user-33760">anonymous</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33760" class="dsq-comment-body">
            <div id="dsq-comment-message-33760" class="dsq-comment-message"><p>In the first instance, 4 is neither a majority element nor a candidate element. As soon as its count becomes zero, the n-1th element ie 3 becomes the candidate element with count 1.<br />
This instance doesnt have a majority element<br />
4 appears 3 times of an array in size 7. It should appear alteast 4 times. (&lt;= n/2 + 1)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-31699">
        <div id="dsq-comment-header-31699" class="dsq-comment-header">
            <cite id="dsq-cite-31699">
                <span id="dsq-author-user-31699">Guest</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31699" class="dsq-comment-body">
            <div id="dsq-comment-message-31699" class="dsq-comment-message"><p>why dont we sort the array first and compare the a[0] with a[n/2+1] or a[n/2-1] with a[n] (see even and odd length accordingly). that way if the nums are equal then there exists a majority element. otherwise print none.</p>
<p>#include<br />
#include<br />
using namespace std;</p>
<p>int main() {<br />
    // your code goes here<br />
    int arr[]={3,3,4,2,4,4,2,4};<br />
    int length=sizeof(arr)/sizeof(int);<br />
    sort(arr,arr+length);<br />
    int nby2=length/2;<br />
    if(arr[0]!=arr[nby2])<br />
    {<br />
        if(length%2)//odd length<br />
        {<br />
            if(arr[nby2]!=arr[length-1])<br />
            {<br />
                cout&lt;&lt;&quot;NONE&quot;&lt;&lt;endl;<br />
            }<br />
            else<br />
            {<br />
                cout&lt;&lt;arr[nby2]&lt;&lt;endl;<br />
            }<br />
        }<br />
        else<br />
        {<br />
            if(arr[nby2-1]!=arr[length-1])<br />
            {<br />
                cout&lt;&lt;&quot;NONE&quot;&lt;&lt;endl;<br />
            }<br />
            else<br />
            {<br />
                cout&lt;&lt;arr[nby2-1]&lt;&lt;endl;<br />
            }<br />
        }<br />
    }<br />
    else<br />
    {<br />
        cout&lt;&lt;arr[0]&lt;&lt;endl;<br />
    }</p>
<p>    return 0;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-31917">
        <div id="dsq-comment-header-31917" class="dsq-comment-header">
            <cite id="dsq-cite-31917">
                <span id="dsq-author-user-31917">its_dark</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31917" class="dsq-comment-body">
            <div id="dsq-comment-message-31917" class="dsq-comment-message"><p>sortgin takes O(NlogN)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-31584">
        <div id="dsq-comment-header-31584" class="dsq-comment-header">
            <cite id="dsq-cite-31584">
                <span id="dsq-author-user-31584">RAUL</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31584" class="dsq-comment-body">
            <div id="dsq-comment-message-31584" class="dsq-comment-message"><p>#include </p>
<p>using namespace std;</p>
<p>int A[] = {1,2,3,2,4,2,2,2,2,2,6,5}, len = 12;</p>
<p>void boyer_moore_majority()</p>
<p>{</p>
<p>	int key = A[0];</p>
<p>	int count = 0;</p>
<p>	int i = 0;</p>
<p>	while ( i = 1 ) {count &#8211;; if(!count) key = -1;}</p>
<p>		}</p>
<p>		i++;</p>
<p>		cout &lt;&lt; key &lt;&lt;&quot; &quot; &lt;&lt; count &lt;= 1 ) cout &lt;&lt; key &lt;&lt; endl;</p>
<p>}</p>
<p>int main()</p>
<p>{</p>
<p>	boyer_moore_majority();</p>
<p>	return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31531">
        <div id="dsq-comment-header-31531" class="dsq-comment-header">
            <cite id="dsq-cite-31531">
                <span id="dsq-author-user-31531">jugal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31531" class="dsq-comment-body">
            <div id="dsq-comment-message-31531" class="dsq-comment-message"><p>Que : Given an array of 2n elements of which n elements are same and the<br />
remaining n elements are all different. Write a C program to find out<br />
the value which is present n times in the array. There is no restriction<br />
 on the elements in the array.</p>
<p>Algo :<br />
step-1.  int a[] = {1, 2, 1, 1, 6, 1, 3, 4};<br />
    size = 8;</p>
<p>step-2.  If  a[0] == a[size-2] OR a[0] == a[size-1]<br />
             return a[0];<br />
     If a[1] == a[size-1]<br />
             return a[1]; </p>
<p>step-3. loop over an array a[] by varibale i<br />
        If a[i] == a[i+1]<br />
              return a[i];</p>
<p>Complexity : Time O(n)<br />
Comment if any thing is wrong!!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-30446">
        <div id="dsq-comment-header-30446" class="dsq-comment-header">
            <cite id="dsq-cite-30446">
                <span id="dsq-author-user-30446">jugal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30446" class="dsq-comment-body">
            <div id="dsq-comment-message-30446" class="dsq-comment-message"><p>we can use map for this prob.</p>
<p>time comlexity = O(n)<br />
auxiliary space = O(n)<br />
following is my code:<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
#include<br />
#include<br />
#include</p>
<p>using namespace std;</p>
<p>int main()<br />
{<br />
	int a[] = {3,3,4,2,4,4,2,4};<br />
	int arr_size = 8 ;<br />
	int max=0;<br />
	int max_num;<br />
	map  count;</p>
<p>	for(int i=0;i&lt;arr_size;i++)<br />
	{<br />
		count[a[i]]++;</p>
<p>		if(max  arr_size/2)<br />
		{	cout &lt;&lt; max_num&lt;&lt;&quot;n&quot;;<br />
			return 0;<br />
		}<br />
	}<br />
	cout &lt;&lt; &quot;Nonen&quot;;</p>
<p>	return 0;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-34501">
        <div id="dsq-comment-header-34501" class="dsq-comment-header">
            <cite id="dsq-cite-34501">
                <span id="dsq-author-user-34501">Aishwarya Kr Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34501" class="dsq-comment-body">
            <div id="dsq-comment-message-34501" class="dsq-comment-message"><p>I think complexity of your code will be O(nlogn) since operator [] of map has complexity O(logn).</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-30076">
        <div id="dsq-comment-header-30076" class="dsq-comment-header">
            <cite id="dsq-cite-30076">
                <span id="dsq-author-user-30076">Amit Baghel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30076" class="dsq-comment-body">
            <div id="dsq-comment-message-30076" class="dsq-comment-message"><p>Visited <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29890">
        <div id="dsq-comment-header-29890" class="dsq-comment-header">
            <cite id="dsq-cite-29890">
                <span id="dsq-author-user-29890">yathartha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29890" class="dsq-comment-body">
            <div id="dsq-comment-message-29890" class="dsq-comment-message"><p>Can this method be used ?? This also solves our problem in O(N)</p>
<p>int main()</p>
<p>{</p>
<p>    int a[10]={1,2,2,2,2,2,4,5,6,2};</p>
<p>    int *count=(int *)calloc(10,sizeof(int));</p>
<p>    int i;</p>
<p>    for(i=0;i5)</p>
<p>        {</p>
<p>            printf(&#8220;largest element is &#8220;);</p>
<p>            printf(&#8220;%d&#8221;,a[i]);</p>
<p>        }</p>
<p>    }</p>
<p>    return 0;</p>
<p>}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-30966">
        <div id="dsq-comment-header-30966" class="dsq-comment-header">
            <cite id="dsq-cite-30966">
                <span id="dsq-author-user-30966">swapnil</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30966" class="dsq-comment-body">
            <div id="dsq-comment-message-30966" class="dsq-comment-message"><p>What if the element is 10000?Then probably you a lot of extra space.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29501">
        <div id="dsq-comment-header-29501" class="dsq-comment-header">
            <cite id="dsq-cite-29501">
                <span id="dsq-author-user-29501">codeKaichu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29501" class="dsq-comment-body">
            <div id="dsq-comment-message-29501" class="dsq-comment-message"><p>Sort and the middle element is the number since it appears more than half the time</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-31016">
        <div id="dsq-comment-header-31016" class="dsq-comment-header">
            <cite id="dsq-cite-31016">
                <span id="dsq-author-user-31016">Mohd Khan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31016" class="dsq-comment-body">
            <div id="dsq-comment-message-31016" class="dsq-comment-message"><p>but time is o(nlogn)&#8230;&#8230;&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29289">
        <div id="dsq-comment-header-29289" class="dsq-comment-header">
            <cite id="dsq-cite-29289">
                <span id="dsq-author-user-29289">Dinesh Domma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29289" class="dsq-comment-body">
            <div id="dsq-comment-message-29289" class="dsq-comment-message"><p>It can be solved in O(n) using Hashmap.</p>
<p>majorityElement(int A[],n)<br />
{<br />
    int found=0;<br />
    Hashmap hm=new Hashmap();<br />
    for(int i=0;i&lt;n;i++)<br />
    {<br />
        if(hm.containsKey(A[i]))<br />
              hm.put(A[i],hm.get(A[i]+1)<br />
        else<br />
              hm.put(A[i],1)<br />
   }<br />
   for(i=0;i n/2)<br />
       {<br />
          found++;<br />
          break;<br />
       }<br />
   }</p>
<p> if(found==1)<br />
    System.out.println(&#8220;Found!!&#8221;);<br />
 else<br />
    System.out.println(&#8220;None&#8221;);<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28419">
        <div id="dsq-comment-header-28419" class="dsq-comment-header">
            <cite id="dsq-cite-28419">
                <span id="dsq-author-user-28419">MayankSwarnkar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28419" class="dsq-comment-body">
            <div id="dsq-comment-message-28419" class="dsq-comment-message"><p>#include<br />
#include<br />
#include</p>
<p>using namespace std;</p>
<p>int main()<br />
{<br />
    vector v;<br />
    vector::iterator pos;<br />
    int i,n,cnt;<br />
    cout&lt;&lt;&quot;Enter 10 elements in the list&quot;&lt;&lt;endl;<br />
    for(i=0;i&gt;n;<br />
        v.push_back(n);<br />
    }<br />
    pos = v.begin();<br />
    while(pos!=v.end())<br />
    {<br />
        cnt = count(v.begin(),v.end(),*pos);<br />
        if(cnt&gt;5)<br />
        {<br />
            cout&lt;&lt;*pos&lt;&lt;&quot; is in majority&quot;&lt;&lt;endl;<br />
            return 0;<br />
        }<br />
        pos++;<br />
    }<br />
    cout&lt;&lt;&quot;No element in majority&quot;&lt;&lt;endl;<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28418">
        <div id="dsq-comment-header-28418" class="dsq-comment-header">
            <cite id="dsq-cite-28418">
                <span id="dsq-author-user-28418">Nishanth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28418" class="dsq-comment-body">
            <div id="dsq-comment-message-28418" class="dsq-comment-message"><p>we can heapsort the array in O(nlogn) time and then we can find the median in O(n) time. hence the overall time complexity will be O(nlogn) r8??</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28384">
        <div id="dsq-comment-header-28384" class="dsq-comment-header">
            <cite id="dsq-cite-28384">
                <span id="dsq-author-user-28384">siren09</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28384" class="dsq-comment-body">
            <div id="dsq-comment-message-28384" class="dsq-comment-message"><p>Issue with method 3:</p>
<p>when input  is {4,3,4,3,4,3,4,3}  ===&gt; gives &#8216;4&#8217; as majority element</p>
<p>when input  is {1,3,4,3,4,3,4,3}  ===&gt; gives &#8216;NO Majority Element&#8217;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-30968">
        <div id="dsq-comment-header-30968" class="dsq-comment-header">
            <cite id="dsq-cite-30968">
                <span id="dsq-author-user-30968">shubham</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30968" class="dsq-comment-body">
            <div id="dsq-comment-message-30968" class="dsq-comment-message"><p>it should be more than n/2 times i.e &gt;n/2 not &gt;=n/2</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27993">
        <div id="dsq-comment-header-27993" class="dsq-comment-header">
            <cite id="dsq-cite-27993">
                <span id="dsq-author-user-27993">draganwarrior</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27993" class="dsq-comment-body">
            <div id="dsq-comment-message-27993" class="dsq-comment-message"><p>is  2nd  phase  necessary  in methode3</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-29295">
        <div id="dsq-comment-header-29295" class="dsq-comment-header">
            <cite id="dsq-cite-29295">
                <span id="dsq-author-user-29295">pavansrinivas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29295" class="dsq-comment-body">
            <div id="dsq-comment-message-29295" class="dsq-comment-message"><p>yes, consider the array{4,3,4,3,4,3,4,3}</p>
<p>after the first phase in method 3 we get 3 as the candidate ,but 3 is not a majority element&#8230;.<br />
i think  first phase gives the element, even if it repeats n/2 times..but for an element to be majority element it should repeat more than n/2 times</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27848">
        <div id="dsq-comment-header-27848" class="dsq-comment-header">
            <cite id="dsq-cite-27848">
                <span id="dsq-author-user-27848">Harjit Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27848" class="dsq-comment-body">
            <div id="dsq-comment-message-27848" class="dsq-comment-message"><p>Does it work with 4 3 4 3 4 input. It does not seem to be working. Any clue?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-31019">
        <div id="dsq-comment-header-31019" class="dsq-comment-header">
            <cite id="dsq-cite-31019">
                <span id="dsq-author-user-31019">Vishal Hemnani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31019" class="dsq-comment-body">
            <div id="dsq-comment-message-31019" class="dsq-comment-message"><p>In the end, 4 will be the candidate.<br />
On checking if 4 is indeed a majority element, it does work fine.<br />
Where&#8217;s the issue?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27847">
        <div id="dsq-comment-header-27847" class="dsq-comment-header">
            <cite id="dsq-cite-27847">
                <span id="dsq-author-user-27847">Harjit Singh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27847" class="dsq-comment-body">
            <div id="dsq-comment-message-27847" class="dsq-comment-message"><p>Does it work with 4 3 4 3 4 input. It does not seem to be working. Any clue?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27787">
        <div id="dsq-comment-header-27787" class="dsq-comment-header">
            <cite id="dsq-cite-27787">
                <span id="dsq-author-user-27787">alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27787" class="dsq-comment-body">
            <div id="dsq-comment-message-27787" class="dsq-comment-message"><p>/*</p>
<p>Given an array of 2n elements of which n elements are same and the remaining n elements are all different. Write a C program to find out the value which is present n times in the array.</p>
<p>*/</p>
<p>#include </p>
<p>int main(void) {</p>
<p>	// your code goes here</p>
<p>	int arr[] = {1,1,1,1,2,3,4,5};</p>
<p>	int n = 8;</p>
<p>	int count = 0;</p>
<p>	int i;</p>
<p>	if(arr[1] == arr[3] || arr[0] == arr[2])</p>
<p>		{</p>
<p>			printf(&#8220;found&#8221;);</p>
<p>		}</p>
<p>	for(i=0;i&lt;;i++)</p>
<p>	{</p>
<p>		if(arr[i] == arr[i-1])</p>
<p>		{	</p>
<p>			printf(&quot;found&quot;);</p>
<p>			break;</p>
<p>		}</p>
<p>	}</p>
<p>	return 0;</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27375">
        <div id="dsq-comment-header-27375" class="dsq-comment-header">
            <cite id="dsq-cite-27375">
                <span id="dsq-author-user-27375">chirag maheshwari</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27375" class="dsq-comment-body">
            <div id="dsq-comment-message-27375" class="dsq-comment-message"><p>Sort the array, the middle element would be the majority element, or there is no majority element.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27391">
        <div id="dsq-comment-header-27391" class="dsq-comment-header">
            <cite id="dsq-cite-27391">
                <span id="dsq-author-user-27391">chirag maheshwari</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27391" class="dsq-comment-body">
            <div id="dsq-comment-message-27391" class="dsq-comment-message"><p>the middle number extracted has to be checked also with the whole input array, it should have count &gt;= n/2.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-27759">
        <div id="dsq-comment-header-27759" class="dsq-comment-header">
            <cite id="dsq-cite-27759">
                <span id="dsq-author-user-27759">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27759" class="dsq-comment-body">
            <div id="dsq-comment-message-27759" class="dsq-comment-message"><p>ur algo is right but to sort the array say merge sort complexity would be O(nlogn) ..but moores algo gives a bettr complexity of O(n)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-27788">
        <div id="dsq-comment-header-27788" class="dsq-comment-header">
            <cite id="dsq-cite-27788">
                <span id="dsq-author-user-27788">alien</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27788" class="dsq-comment-body">
            <div id="dsq-comment-message-27788" class="dsq-comment-message"><p>this solution is same as BST solution provided. The only difference is, if we sort array, we will have to do one more pass to check which element is occurring n/2 times. Middle element does not always represent majority element.</p>
<p>arr[] = {1,2,3};</p>
<p>Here your algorithm will give 2. But 2 is not a majority element. So to check whether array has majority element, one more pass is required.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27323">
        <div id="dsq-comment-header-27323" class="dsq-comment-header">
            <cite id="dsq-cite-27323">
                <span id="dsq-author-user-27323">Dmitriy Pichugin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27323" class="dsq-comment-body">
            <div id="dsq-comment-message-27323" class="dsq-comment-message"><p>I have a solution which is better that O(n).</p>
<p>import java.util.*;</p>
<p>public class Test<br />
{<br />
public static class MutableInteger<br />
  {<br />
    int value;<br />
    public MutableInteger( int value )<br />
    {<br />
      this.value = value;<br />
    }<br />
    public int getValue()<br />
    {<br />
      return ( this.value );<br />
    }</p>
<p>    public void setValue( int newValue )<br />
    {<br />
      this.value = newValue;<br />
    }<br />
  }</p>
<p>  public static void print( List inputList )<br />
  {<br />
    System.out.print( &#8220;[ &#8221; );<br />
    for( Integer element : inputList )<br />
      System.out.print( element + &#8221; &#8221; );<br />
    System.out.print( &#8220;]&#8221; );<br />
  }</p>
<p>  public static boolean getMajorityElement( List inputList, MutableInteger result )<br />
  {<br />
    if( null == inputList )//DP: no elements &#8212; no majority element<br />
      return ( false );<br />
    print( inputList );<br />
    HashMap map = new HashMap( inputList.size() );<br />
    Integer bestFreq = 0;<br />
    int elementsLeft = inputList.size();<br />
    for( Integer element : inputList )<br />
    {<br />
      elementsLeft&#8211;;<br />
      Integer freq = map.get( element );<br />
      if( null == freq )<br />
        freq = 0;<br />
      freq += 1;<br />
      map.put( element, freq );<br />
      if( freq &gt; inputList.size()/2.0 )<br />
      {//DP: should process at least half of the input list.<br />
        result.setValue( element );<br />
        System.out.print(&#8220;&#8221;);<br />
        return ( true );<br />
      }<br />
      if( bestFreq &lt; freq )<br />
        bestFreq = freq;<br />
      if( bestFreq + elementsLeft &lt;= inputList.size()/2.0 )//DP: early termination: no majority element will be found<br />
        break;                                           //DP: even if all the rest would be equal to current best element.<br />
    }<br />
    System.out.print(&quot;&#8221;);<br />
    return ( false );<br />
  }</p>
<p>    MutableInteger majority = new MutableInteger( 0 );<br />
    List list = new ArrayList();<br />
    //DP: populate your list here<br />
    if( getMajorityElement( list, majority ) )<br />
      System.out.println( majority.getValue() );<br />
    else<br />
      System.out.println( &#8220;no majority&#8221; );</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27028">
        <div id="dsq-comment-header-27028" class="dsq-comment-header">
            <cite id="dsq-cite-27028">
                <span id="dsq-author-user-27028">Amit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27028" class="dsq-comment-body">
            <div id="dsq-comment-message-27028" class="dsq-comment-message"><p>I am not getting the correct value for this set </p>
<p>{2,3,4,2,3,4,4,3,3,3,2,2,5};</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-27031">
        <div id="dsq-comment-header-27031" class="dsq-comment-header">
            <cite id="dsq-cite-27031">
                <span id="dsq-author-user-27031">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27031" class="dsq-comment-body">
            <div id="dsq-comment-message-27031" class="dsq-comment-message"><p>What do u get and what do u expect?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-27782">
        <div id="dsq-comment-header-27782" class="dsq-comment-header">
            <cite id="dsq-cite-27782">
                <span id="dsq-author-user-27782">Kresnik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27782" class="dsq-comment-body">
            <div id="dsq-comment-message-27782" class="dsq-comment-message"><p>Because there is no majority number in the input</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-shek8034 even thread-odd thread-alt depth-1" id="dsq-comment-22179">
        <div id="dsq-comment-header-22179" class="dsq-comment-header">
            <cite id="dsq-cite-22179">
                <span id="dsq-author-user-22179">shek8034</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22179" class="dsq-comment-body">
            <div id="dsq-comment-message-22179" class="dsq-comment-message"><pre> <code language="C">
#include&lt;iostream&gt;
using namespace std;

int majorityElement(int arr[],int n)
{
	int maj_index = 0, count = 0, i;
	for(i=0; i&lt;n; ++i)
	{
		if(arr[maj_index] == arr[i])
			count++;
		else
			count--;
		if(count == 0)
		{
			maj_index = i;
			count = 1;
		}
	}

	count = 0;
	for(i=0; i&lt;n; i++)
		if(arr[i] == arr[maj_index])
			count++;
	
	if(count &gt; n/2)
		return arr[maj_index];
	else
		return -1;
}

int main()
{
	int n,i;
	cin&gt;&gt;n;
	int arr[n];
	for(i=0; i&lt;n; ++i)
		cin&gt;&gt;arr[i];
	cout&lt;&lt;majorityElement(arr, n)&lt;&lt;endl;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-22836">
        <div id="dsq-comment-header-22836" class="dsq-comment-header">
            <cite id="dsq-cite-22836">
http://www.geeksforgeeks.org                <span id="dsq-author-user-22836">anjali</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22836" class="dsq-comment-body">
            <div id="dsq-comment-message-22836" class="dsq-comment-message"><p>will it work for 3 5 3 7 3 1 1 3</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-shek8034 even depth-3" id="dsq-comment-22859">
        <div id="dsq-comment-header-22859" class="dsq-comment-header">
            <cite id="dsq-cite-22859">
                <span id="dsq-author-user-22859">shek8034</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22859" class="dsq-comment-body">
            <div id="dsq-comment-message-22859" class="dsq-comment-message"><p>Yes..<br />
Output is -1. Since there is no majority element</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-22081">
        <div id="dsq-comment-header-22081" class="dsq-comment-header">
            <cite id="dsq-cite-22081">
                <span id="dsq-author-user-22081">Unique</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22081" class="dsq-comment-body">
            <div id="dsq-comment-message-22081" class="dsq-comment-message"><pre> <code language="C">
/* #include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#define MAX 10000
void findMajority(int a[],int size)
{
     int hash[MAX]={0};
     int i,maxCount=0,index=0;
     for(i=0;i&lt;size;i++)
     {
              hash[a[i]]++;
              if(hash[a[i]]&gt;maxCount)
              {
                       maxCount=hash[a[i]];
                       index=i;
              }         
     }
          if(maxCount&gt;=(size/2))
                  printf(&quot;MaxCount %d :: Major element is %d&quot;,maxCount,a[index]);
 }
int main()
{
    int a[]={1,2,3,3,2,3,3,3};
    int size=sizeof(a)/sizeof(a[0]);
    findMajority(a,size);
    getch();
    return 0;
}
 */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-21038">
        <div id="dsq-comment-header-21038" class="dsq-comment-header">
            <cite id="dsq-cite-21038">
                <span id="dsq-author-user-21038">DevilCoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21038" class="dsq-comment-body">
            <div id="dsq-comment-message-21038" class="dsq-comment-message"><p>Can we use Hashing to solve the problem ?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-22082">
        <div id="dsq-comment-header-22082" class="dsq-comment-header">
            <cite id="dsq-cite-22082">
                <span id="dsq-author-user-22082">Unique</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22082" class="dsq-comment-body">
            <div id="dsq-comment-message-22082" class="dsq-comment-message"><p>#include<br />
#include<br />
#define MAX 10000<br />
void findMajority(int a[],int size)<br />
{<br />
     int hash[MAX]={0};<br />
     int i,maxCount=0,index=0;<br />
     for(i=0;imaxCount)<br />
              {<br />
                       maxCount=hash[a[i]];<br />
                       index=i;<br />
              }<br />
     }<br />
          if(maxCount&gt;=(size/2))<br />
                  printf(&#8220;MaxCount %d :: Major element is %d&#8221;,maxCount,a[index]);<br />
 }<br />
int main()<br />
{<br />
    int a[]={1,2,3,3,2,3,3,3};<br />
    int size=sizeof(a)/sizeof(a[0]);<br />
    findMajority(a,size);<br />
    getch();<br />
    return 0;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-20000">
        <div id="dsq-comment-header-20000" class="dsq-comment-header">
            <cite id="dsq-cite-20000">
                <span id="dsq-author-user-20000">Aarushi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20000" class="dsq-comment-body">
            <div id="dsq-comment-message-20000" class="dsq-comment-message"><p>For the second problem (2n elements) how is this method?</p>
<p>Traverse the array using Voting algorithm. The moment we get count =2 we return the no. whose count is 2, as the n no.s are ALL different. That is our answer!</p>
<p>If the whole array is traversed and count has never been 2 and at the end count is 1, the only choice for the no. with frequency n is either the last or the second last element.<br />
We can take 2 variables which keep track of the count of the last and the second last no. respectively and traverse the array once again to find out which of them is the answer?</p>
<p>Time Complexity: O(n).</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-21200">
        <div id="dsq-comment-header-21200" class="dsq-comment-header">
            <cite id="dsq-cite-21200">
                <span id="dsq-author-user-21200">Asap</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21200" class="dsq-comment-body">
            <div id="dsq-comment-message-21200" class="dsq-comment-message"><p>I think your approach is correct.<br />
But how about this one.<br />
Compare first three elements<br />
If any two of them are same then return that element.<br />
if all three are different then<br />
we can remove that 3 elements and pass the left over array to find majority element in O(n)</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-19513">
        <div id="dsq-comment-header-19513" class="dsq-comment-header">
            <cite id="dsq-cite-19513">
                <span id="dsq-author-user-19513">Sandy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19513" class="dsq-comment-body">
            <div id="dsq-comment-message-19513" class="dsq-comment-message"><p>We can also do it by sorting the array<br />
say after sorting we have 2,2,3,3,4,4,4,4,4<br />
then we can loop through the array and check if an element at position i is also present at position i+n/2<br />
if true we return the number<br />
else we go to next index and check for new number and repeat the process<br />
T(n) = T(sorting) + T(single loop)<br />
taking T(sorting) = O(nlogn) using heapsort<br />
we get T(n) = O(nlogn)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ultimate_coder odd alt depth-2" id="dsq-comment-19603">
        <div id="dsq-comment-header-19603" class="dsq-comment-header">
            <cite id="dsq-cite-19603">
                <span id="dsq-author-user-19603">ultimate_coder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19603" class="dsq-comment-body">
            <div id="dsq-comment-message-19603" class="dsq-comment-message"><p>I agree.</p>
<pre> <code language="C">
bool checkmajority(int a[],int n)
{
    for(int i=0;i&lt;=n/2;i++)
    {
        if(a[i]==a[i+n/2])
        return 1;
    }
    return 0;
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-19612">
        <div id="dsq-comment-header-19612" class="dsq-comment-header">
            <cite id="dsq-cite-19612">
                <span id="dsq-author-user-19612">Sandy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19612" class="dsq-comment-body">
            <div id="dsq-comment-message-19612" class="dsq-comment-message"><p>ultimate_coder your loop condition should be i&lt;n/2<br />
to keep index error in check</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ultimate_coder odd alt depth-4" id="dsq-comment-19614">
        <div id="dsq-comment-header-19614" class="dsq-comment-header">
            <cite id="dsq-cite-19614">
                <span id="dsq-author-user-19614">ultimate_coder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19614" class="dsq-comment-body">
            <div id="dsq-comment-message-19614" class="dsq-comment-message"><p>@sandy if condition is i<n/2, then it fails for following test case :<br />
1 3 3<br />
here it will return 0 which is incorrect.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-ultimate_coder even depth-4" id="dsq-comment-19616">
        <div id="dsq-comment-header-19616" class="dsq-comment-header">
            <cite id="dsq-cite-19616">
                <span id="dsq-author-user-19616">ultimate_coder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19616" class="dsq-comment-body">
            <div id="dsq-comment-message-19616" class="dsq-comment-message"><p>@sandy if condition is i<=n/2 then it will fail for the following test case<br />
 1 3 3</p>
<p>here it will return 0 which is incorrect.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-ultimate_coder odd alt depth-5" id="dsq-comment-19617">
        <div id="dsq-comment-header-19617" class="dsq-comment-header">
            <cite id="dsq-cite-19617">
                <span id="dsq-author-user-19617">ultimate_coder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19617" class="dsq-comment-body">
            <div id="dsq-comment-message-19617" class="dsq-comment-message"><p>sorry for typo.. it fails for i<n /2 as suggested by you.<br />
Corrections welcome. <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley"></n></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-ultimate_coder even thread-even depth-1" id="dsq-comment-19356">
        <div id="dsq-comment-header-19356" class="dsq-comment-header">
            <cite id="dsq-cite-19356">
                <span id="dsq-author-user-19356">ultimate_coder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19356" class="dsq-comment-body">
            <div id="dsq-comment-message-19356" class="dsq-comment-message"><p>how about using hashing&#8230;???It should not be the bad idea..??</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-_naive_ odd alt thread-odd thread-alt depth-1" id="dsq-comment-18860">
        <div id="dsq-comment-header-18860" class="dsq-comment-header">
            <cite id="dsq-cite-18860">
                <span id="dsq-author-user-18860">_naive_</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18860" class="dsq-comment-body">
            <div id="dsq-comment-message-18860" class="dsq-comment-message"><p>Here&#8217;s one more solution (nlogn)<br />
1. sort the array (nlogn)<br />
2. pick the center element of the array.(if any element comes more than n/2 times , it must be present in the center after sorting)<br />
3. count the occurrence of this element in the array (n)<br />
4. if count is > n/2 then print this element otherwise print NONE.<br />
Any suggestion ??</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-18342">
        <div id="dsq-comment-header-18342" class="dsq-comment-header">
            <cite id="dsq-cite-18342">
                <span id="dsq-author-user-18342">achawla</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18342" class="dsq-comment-body">
            <div id="dsq-comment-message-18342" class="dsq-comment-message"><p>Q. Given an array of 2n elements of which n elements are same and the remaining n elements are all different. Write a C program to find out the value which is present n times in the array. There is no restriction on the elements in the array<br />
A. Divide array in two part and apply Voting algorithm in each.<br />
(If 2*n is not of form 2^n then n is sure an odd else its even. If n is odd then either of its left or right part will have an element with count more than n/2. Hence voting algorithm is applied here.) Run time will be linear.</p>
<pre> <code language="C">
#include &lt;iostream&gt;
#include &lt;conio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
using namespace std;

bool IsMajority(int a[], int left, int right, int key){
int count = 0;
for (int i = left; i&lt;= right;i++){
         if(key == a[i]) count ++;
         if(count &gt; 1) return true;   
}
return false;
}

int func(int a[], int left, int right){
int count=1;
int key = a[left];
for(int i = left + 1; i&lt;=right ; i++){
        if (a[i] == key){
             count++;
        }
        else{
             count--;
        }
        if(count == 0){
             key = a[i];
             count = 1;
        }    
}
return key;    
}

int main(){
int a[8]={9, 6, 1, 9, 9, 3, 4, 9};
int size=8, Maj;
if ((size / 2)%2 == 1){
          int left = func(a,0,size/2-1);
          if(IsMajority(a,0,size/2-1,left)){
                         Maj=left;
          }                                                                              
          int right= func(a, size/2,size-1);
          if(IsMajority(a,size/2,size-1,right)){
                         Maj=right;
          }                                  
}
else{
          if(a[size/2-1] == a[size/2]) {
                         Maj = a[size/2];
          }
          else{                
                 int left = func(a, 0,size/2-2);
                 if(IsMajority(a,0,size/2-2,left)){
                          Maj=left;
                 }          
                 int right = func(a, size/2+1,size-1);               
                 if(IsMajority(a,size/2+1,size-1,right)){
                        Maj=right;
                 }
          }
} 
cout&lt;&lt; &quot;Element with n/2 times: &quot; &lt;&lt; Maj;
getch();
return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17961">
        <div id="dsq-comment-header-17961" class="dsq-comment-header">
            <cite id="dsq-cite-17961">
                <span id="dsq-author-user-17961">pawan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17961" class="dsq-comment-body">
            <div id="dsq-comment-message-17961" class="dsq-comment-message"><pre> <code language="C">
#include&lt;stdio.h&gt;

int arr[]={3,3,4,2,4,4,2,4,4};
int arr_len=9;

int sort(int arr[])
{
	int i,j,temp;
	for(i=0;i&lt;arr_len;i++)
		{
			for(j=0;j&lt;arr_len-1;j++)
				{
					if(arr[j]&gt;arr[j+1])
						{
							temp=arr[j];
							arr[j]=arr[j+1];
							arr[j+1]=temp;
						}
				}
				
		}
		return 0;
}

int main()
{
	int i,j,n,a=0,count[]={1},req;
	
	req=arr_len/2;
	
	sort(arr);
	
	for(i=0;i&lt;arr_len;i++)
		{
			if(arr[i]==arr[i+1])
				{
					count[a]++;
					if(count[a]&gt;req)
						{
							printf(&quot;%d\n&quot;,arr[i]);
							break;
						}
					
				}
				
				else
				a++;
		}
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-16328">
        <div id="dsq-comment-header-16328" class="dsq-comment-header">
            <cite id="dsq-cite-16328">
                <span id="dsq-author-user-16328">Ankit Sablok</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16328" class="dsq-comment-body">
            <div id="dsq-comment-message-16328" class="dsq-comment-message"><p>This algorithm is guaranteed to work in linear time and also it doesn&#8217;t make any assumption about the input data it can be either positive or negative and uses maps in c++</p>
<pre> <code language="C">

// I/O Includes

#include&lt;new&gt;
#include&lt;cstdio&gt;
#include&lt;cctype&gt;
#include&lt;cmath&gt;
#include&lt;cstdlib&gt;
#include&lt;cstring&gt;
#include&lt;sstream&gt;
#include&lt;iostream&gt;
#include&lt;strstream&gt;

// Data Structure Includes

#include&lt;map&gt;
#include&lt;set&gt;
#include&lt;list&gt;?
#include&lt;stack&gt;
#include&lt;deque&gt;
#include&lt;queue&gt;
#include&lt;vector&gt;
#include&lt;bitset&gt;
#include&lt;string&gt;
#include&lt;iterator&gt;
#include&lt;algorithm&gt;

// Standard Namespace Inclusion

using namespace std;

// Supporting Macro

#define SZ( C )                 ( ( int ) ( ( C ).size() ) )
#define ALL( C )                ( C ).begin() , ( C ).end()
#define TR( C , it )            for( typeof( ( C ).begin() ) it = ( C ).begin(); it != ( C ).end() ; ++it )
#define LN( STRING )            ( ( int ) ( STRING ).length() )
#define SPRESENT( C , x )       ( ( ( C ).find( x ) ) != ( C ).end() )
#define CPRESENT( C , x )       ( find( ALL( C ) , x ) != ( C ).end() )
#define PB                      push_back

// Typedefed Versions of Data Types

typedef vector&lt; int &gt; VI;
typedef vector&lt; VI &gt; VVI;
typedef vector&lt; string &gt; VS;
typedef pair&lt; int ,int &gt; PII;
typedef long long LL;
typedef unsigned long long ULL;

int main(){

    map&lt;int , int&gt; hm;

    int n;
    cin &gt;&gt; n;

    for(int i = 0 ; i &lt; n ; ++i){
        int temp;
        cin &gt;&gt; temp;

        if( hm.find( temp ) != hm.end() ){
            ++( hm.find( temp )-&gt;second );
        }

        else
            hm.insert( make_pair(temp , 1) );
    }

    int element;
    int max = -1;

    TR( hm , it ){

        if( max &lt; it-&gt;second ){
            element = it-&gt;first;
            max = it-&gt;second;
        }
    }

    if( max &gt; n/2 )
        cout &lt;&lt; &quot;The majority element is : &quot; &lt;&lt; element &lt;&lt; endl;
    else
        cout &lt;&lt; &quot;NONE&quot; &lt;&lt; endl;

    return 0;
}


</code> </pre>
<p>Suggestions are appreciated <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geekyboy odd alt thread-odd thread-alt depth-1" id="dsq-comment-15376">
        <div id="dsq-comment-header-15376" class="dsq-comment-header">
            <cite id="dsq-cite-15376">
                <span id="dsq-author-user-15376">geekyboy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15376" class="dsq-comment-body">
            <div id="dsq-comment-message-15376" class="dsq-comment-message"><p>@geeksforgeeks<br />
@anyone and everyone</p>
<p>How do we go about finding the element occurring maximum number of times rather than the majority element.</p>
<p>Is there a better solution than O(n^2).</p>
<p>Also if there is already a post on this<br />
please provide me with the link</p>
<p>Any comments and suggestions are welcomed.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-geekyboy even depth-2" id="dsq-comment-15377">
        <div id="dsq-comment-header-15377" class="dsq-comment-header">
            <cite id="dsq-cite-15377">
                <span id="dsq-author-user-15377">geekyboy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15377" class="dsq-comment-body">
            <div id="dsq-comment-message-15377" class="dsq-comment-message"><p>i am quering about an array of numbers and their range is not known so we cannot apply hashmap technique.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-16553">
        <div id="dsq-comment-header-16553" class="dsq-comment-header">
            <cite id="dsq-cite-16553">
                <span id="dsq-author-user-16553">prakash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16553" class="dsq-comment-body">
            <div id="dsq-comment-message-16553" class="dsq-comment-message"><p>my suggestion is<br />
        sort the array -&gt;o(nlogn)(duplicates will be in continues location)<br />
   then do following,<br />
        max_count=1;max_count_elemnt=arr[0];count=1<br />
        for(i=1;imax_count)<br />
              {<br />
                   max_count=count;<br />
                    max_count_elemnt=arr[i];<br />
              }<br />
           }<br />
            else<br />
              count=1;<br />
        }<br />
        return max_count_elemnt;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-17233">
        <div id="dsq-comment-header-17233" class="dsq-comment-header">
            <cite id="dsq-cite-17233">
                <span id="dsq-author-user-17233">Chinmaya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17233" class="dsq-comment-body">
            <div id="dsq-comment-message-17233" class="dsq-comment-message"><p>This approach works fine. Complexity is also O(nlogn). Thanks Prakash.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15235">
        <div id="dsq-comment-header-15235" class="dsq-comment-header">
            <cite id="dsq-cite-15235">
                <span id="dsq-author-user-15235">Rohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15235" class="dsq-comment-body">
            <div id="dsq-comment-message-15235" class="dsq-comment-message"><p>how about this as a solution &#8230; This will work on O(n) always..<br />
comments please.</p>
<pre> <code language="C">

int a[]={3, 3, 4, 3, 4, 4, 3, 3, 5,18};

void find_majority()
{
	int i = 0 ;
	int max_element = 0 ;
	for(i=0;i&lt;sizeof(a)/sizeof(int);i++)
		if(max_element &lt; a[i])
			max_element = a[i];

	printf(&quot;max_element :%d\n&quot;,max_element);

	int HASH[max_element+1];

	for(i=0;i&lt;max_element+1;i++)
	{
		HASH[i]=0;
	}

	int array_size = sizeof(a)/sizeof(int);



	printf(&quot;Array Size : %d\n&quot;,array_size);
	for(i=0;i&lt;array_size;i++)
	{
	        HASH[a[i]]++;
		if(HASH[a[i]] &gt;= array_size/2 + 1)
		{
			printf(&quot;Majority Element present :  %d&quot;,a[i]);
			return;
		}
	}
	printf(&quot;No Majority Element present\n&quot;);
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-15237">
        <div id="dsq-comment-header-15237" class="dsq-comment-header">
            <cite id="dsq-cite-15237">
                <span id="dsq-author-user-15237">Rohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15237" class="dsq-comment-body">
            <div id="dsq-comment-message-15237" class="dsq-comment-message"><p>off course for negative numbers we will need a offset&#8230;!!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-15270">
        <div id="dsq-comment-header-15270" class="dsq-comment-header">
            <cite id="dsq-cite-15270">
                <span id="dsq-author-user-15270">pefullarton</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15270" class="dsq-comment-body">
            <div id="dsq-comment-message-15270" class="dsq-comment-message"><p>Dude, what if one of the array element is INT_MAX?????<br />
Too amateur algo as the HASH size can be too high.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-15272">
        <div id="dsq-comment-header-15272" class="dsq-comment-header">
            <cite id="dsq-cite-15272">
                <span id="dsq-author-user-15272">Rohan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15272" class="dsq-comment-body">
            <div id="dsq-comment-message-15272" class="dsq-comment-message"><p>Thanks for the correction&#8230;.<br />
I overlooked this situation..!!</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-29031">
        <div id="dsq-comment-header-29031" class="dsq-comment-header">
            <cite id="dsq-cite-29031">
                <span id="dsq-author-user-29031">Keerthi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29031" class="dsq-comment-body">
            <div id="dsq-comment-message-29031" class="dsq-comment-message"><p>The condition count==0 should be moved up in the loop.</p>
<p>	for(int i=1;i&lt;n;i++){<br />
if(count==0){<br />
			m=i;<br />
			count=1;<br />
		}<br />
		if(arr[m] == arr[i])<br />
			count++;<br />
		else count&#8211;;<br />
	}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-14893">
        <div id="dsq-comment-header-14893" class="dsq-comment-header">
            <cite id="dsq-cite-14893">
                <span id="dsq-author-user-14893">Ankit Malhotra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14893" class="dsq-comment-body">
            <div id="dsq-comment-message-14893" class="dsq-comment-message"><p>Using pass by reference, we can simplify the majority function and use it find n repeating in 2n elements. To do so, We need to append the last element of the array once. Now the n repeating element has to be present either as majority of 2n &#8211; 1 or majority of 2n + 1. Remember to remove the newly added element from relevant data structure, once the required element is found.</p>
<pre> <code language="C">
#include &lt;iostream&gt;
#define MAXCOUNT 99999
using namespace::std;
typedef unsigned long counter;
typedef long long element;

element occurenceCount (element term[], counter count, element candidate)
{
  counter findcount = 0;
  for (counter i = 0; i &lt; count; ++i)
    if (term[i] == candidate) ++findcount;
  return findcount;
}

bool majority (element term[], counter count, element &amp; candidate)
{
  for (counter i = 0, findcount = 0; i &lt; count; ++i)
  {
    if (!findcount) candidate = term[i];
    if (term[i] == candidate) ++findcount;
    else --findcount;
  }
  return (occurenceCount(term, count, candidate) &gt; (count / 2));
}

int main ()
{
  counter count;
  element term[MAXCOUNT] = {0}, candidate;
  cin &gt;&gt; count;
  for (counter i = 0; i != count; ++i) cin &gt;&gt; term[i];
  term[count++] = term[count - 1];
  if(majority (term, count - 2, candidate) || 
    majority (term, count, candidate))
  {
    --count;
    cout &lt;&lt; &quot; Half Count Element is &quot; &lt;&lt; candidate;
  }
  else cout &lt;&lt; &quot; No Half Count element found.&quot;;
  cout &lt;&lt; endl;
  return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14887">
        <div id="dsq-comment-header-14887" class="dsq-comment-header">
            <cite id="dsq-cite-14887">
                <span id="dsq-author-user-14887">Ankit Malhotra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14887" class="dsq-comment-body">
            <div id="dsq-comment-message-14887" class="dsq-comment-message"><p>Code to find n repeating from 2n elements.</p>
<p>Find majority element if any in first 2n &#8211; 1 elements. If found it is the needed element else check if the last element occurs n times in the array as that is the only probable candidate. If there is no majority element and last element does not occur n times then there is no such element.</p>
<pre> <code language="C">
#include &lt;iostream&gt;
#define MAXCOUNT 99999
using namespace::std;
typedef unsigned long counter;
typedef long long element;

element majority (element term[], counter count)
{
  element major;
  for (counter i = 0, findcount = 0; i &lt; count; ++i)
  {
    if (!findcount) major = term[i];
    if (term[i] == major) ++findcount;
    else --findcount;
  }
  return major;
}

element occurenceCount (element term[], counter count, element candidate)
{
  counter findcount = 0;
  for (counter i = 0; i &lt; count; ++i)
    if (term[i] == candidate) ++findcount;
  return findcount;
}

inline bool checkmajor (element term[], counter count, element candidate)
{
  return (occurenceCount(term, count, candidate) &gt; (count / 2));
}

int main ()
{
  counter count;
  element term[MAXCOUNT] = {0}, candidate;
  cin &gt;&gt; count;
  for (counter i = 0; i != count; ++i) cin &gt;&gt; term[i];
  candidate = majority (term, count - 1);
  if (checkmajor (term, count - 1, candidate))
    cout &lt;&lt; &quot; Half Count Element is &quot; &lt;&lt; candidate;
  else
    if (occurenceCount (term, count, term[count - 1]) == count/2)
      cout &lt;&lt; &quot; Half Count element is &quot; &lt;&lt; term[count - 1];
    else cout &lt;&lt; &quot; No Half Count element found.&quot;;
  cout &lt;&lt; endl;
  return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-14888">
        <div id="dsq-comment-header-14888" class="dsq-comment-header">
            <cite id="dsq-cite-14888">
                <span id="dsq-author-user-14888">Ankit Malhotra</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14888" class="dsq-comment-body">
            <div id="dsq-comment-message-14888" class="dsq-comment-message"><p>Above code will have worst case absolute of 3n which we can reduce to n by first checking for count of last element and then finding majority if required. main() will hence be re written as</p>
<pre> <code language="C">
int main ()
{
  counter count;
  element term[MAXCOUNT] = {0}, candidate;
  cin &gt;&gt; count;
  for (counter i = 0; i != count; ++i) cin &gt;&gt; term[i];
  if (occurenceCount (term, count, term[count - 1]) == count/2)
    cout &lt;&lt; &quot; Half Count element is &quot; &lt;&lt; term[count - 1];
  else
  {
    candidate = majority (term, count - 1);
    if (checkmajor (term, count - 1, candidate))
      cout &lt;&lt; &quot; Half Count Element is &quot; &lt;&lt; candidate;
    else
      cout &lt;&lt; &quot; No Half Count element found.&quot;;
  }
  cout &lt;&lt; endl;
  return 0;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10611">
        <div id="dsq-comment-header-10611" class="dsq-comment-header">
            <cite id="dsq-cite-10611">
                <span id="dsq-author-user-10611">Azhar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10611" class="dsq-comment-body">
            <div id="dsq-comment-message-10611" class="dsq-comment-message"><p>Problem: Given an array of 2n elements of which n elements are same and the remaining n elements are all different. Write a C program to find out the value which is present n times in the array. There is no restriction on the elements in the array. They are random (In particular they not sequential).</p>
<p>Soln:<br />
There are only two possibility.<br />
Case 1) Repeating elements are at every alternate position.<br />
Case 2) If not case1 then at least 2 consecutive elements are repeating.</p>
<p>Any element having this property is our answer.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-10510">
        <div id="dsq-comment-header-10510" class="dsq-comment-header">
            <cite id="dsq-cite-10510">
                <span id="dsq-author-user-10510">Abhi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10510" class="dsq-comment-body">
            <div id="dsq-comment-message-10510" class="dsq-comment-message"><p>Find the median of the array in O(n) using deterministic search.the median has to be the majority element of the array.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10282">
        <div id="dsq-comment-header-10282" class="dsq-comment-header">
            <cite id="dsq-cite-10282">
                <span id="dsq-author-user-10282">Zee</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10282" class="dsq-comment-body">
            <div id="dsq-comment-message-10282" class="dsq-comment-message"><p>This problem was asked in Goldman Sachs recruitment exam at DCE a couple of weeks back.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-9643">
        <div id="dsq-comment-header-9643" class="dsq-comment-header">
            <cite id="dsq-cite-9643">
                <span id="dsq-author-user-9643">a_b</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9643" class="dsq-comment-body">
            <div id="dsq-comment-message-9643" class="dsq-comment-message"><p>I have an O(n) approach?<br />
is there anything wrong in this method?</p>
<p>#include<br />
#include<br />
using namespace std;<br />
int main()<br />
{<br />
    int a[100],n,i,f=0,index,a1[1000]={0};<br />
    cin&gt;&gt;n;<br />
    for(i=0;i&gt;a[i];<br />
                    index=a[i];<br />
                    a1[index]++;<br />
	}<br />
	for(i=0;i(n/2))<br />
        {<br />
                       f=1;<br />
                       cout&lt;&lt;i;<br />
                       break;<br />
        }<br />
    }<br />
    if(f==0)<br />
            cout&lt;&lt;&quot;NONE&quot;;<br />
    getch();<br />
    return 0;<br />
}</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9513">
        <div id="dsq-comment-header-9513" class="dsq-comment-header">
            <cite id="dsq-cite-9513">
                <span id="dsq-author-user-9513">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9513" class="dsq-comment-body">
            <div id="dsq-comment-message-9513" class="dsq-comment-message"><p>Using Hash Map:</p>
<pre> <code language="C">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define SIZE 1000

void find_majority(int *a,int size)
{
    int max,i,val,hash[SIZE]={0};
    i=size;
    while(i--)
    {
        hash[a[i]]++;
    }
    i=size;
    i--;
    while(i)
    {
        if(hash[a[i]]&gt;hash[a[i-1]])
        {
            max=hash[a[i]];
            val=a[i];
        }
        else
        {
            max=hash[a[i-1]];
            val=a[i-1];
        }
        i--;
    }
    if(max&gt;size/2)
    printf(&quot;%d&quot;,val);
    else
    printf(&quot;NONE&quot;);
}

int main()
{
    int a[10]={1, 1, 1, 2, 1, 2, 3, 3, 1, 1};
    int sum;
    find_majority(a,10);

    return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-9514">
        <div id="dsq-comment-header-9514" class="dsq-comment-header">
            <cite id="dsq-cite-9514">
                <span id="dsq-author-user-9514">Nishant Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9514" class="dsq-comment-body">
            <div id="dsq-comment-message-9514" class="dsq-comment-message"><p>Time complexity : O(n)</p>
<p>correct me if i am wrong</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-9628">
        <div id="dsq-comment-header-9628" class="dsq-comment-header">
            <cite id="dsq-cite-9628">
                <span id="dsq-author-user-9628">chandra prakash</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9628" class="dsq-comment-body">
            <div id="dsq-comment-message-9628" class="dsq-comment-message"><p>works only if the range of numbers is known in advance&#8230;.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-8530">
        <div id="dsq-comment-header-8530" class="dsq-comment-header">
            <cite id="dsq-cite-8530">
                <span id="dsq-author-user-8530">Guddu sharma</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8530" class="dsq-comment-body">
            <div id="dsq-comment-message-8530" class="dsq-comment-message"><p>One different approach is based on idea that if an element if repeated more than half of the time, a count can be used.<br />
Count is incremented every time majority element is encountered &amp; decremented every time a different element comes.<br />
Thus at the end if count&gt;=1, the majority element is known.<br />
See the following code: </p>
<pre> <code language="C">
int find(arr)
{
	int count=1;
	int el=arr[0];
	for(i=1;i&lt;n;i++)
	{
		if(count==0)
		{
			el=arr[i];
			count=1;
		}
		else if(el==arr[i])
			count++;
		else
			count--;
	}
	if(count&gt;=1)
		return el;
	else
		return -1;
}
</code> </pre>
<p>Let me know if some corner cases have been missed</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8280">
        <div id="dsq-comment-header-8280" class="dsq-comment-header">
            <cite id="dsq-cite-8280">
                <span id="dsq-author-user-8280">karan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8280" class="dsq-comment-body">
            <div id="dsq-comment-message-8280" class="dsq-comment-message"><p>doesnt method 3 fail for the below input?</p>
<p>{2,1,2,3,2,4,2,6,2,7,2}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-8283">
        <div id="dsq-comment-header-8283" class="dsq-comment-header">
            <cite id="dsq-cite-8283">
                <span id="dsq-author-user-8283">Venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8283" class="dsq-comment-body">
            <div id="dsq-comment-message-8283" class="dsq-comment-message"><p>@karan, it won&#8217;t. Please check. The array size is 11 and the element 2 appears 6 times which is &gt; N/2.</p>
<p>See the code,</p>
<p><a href="http://ideone.com/RMaXt" rel="nofollow">http://ideone.com/RMaXt</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-8211">
        <div id="dsq-comment-header-8211" class="dsq-comment-header">
            <cite id="dsq-cite-8211">
                <span id="dsq-author-user-8211">rl</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8211" class="dsq-comment-body">
            <div id="dsq-comment-message-8211" class="dsq-comment-message"><p>cant it be done by hashing?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-vikas368 even thread-odd thread-alt depth-1" id="dsq-comment-7726">
        <div id="dsq-comment-header-7726" class="dsq-comment-header">
            <cite id="dsq-cite-7726">
                <span id="dsq-author-user-7726">vikas368</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7726" class="dsq-comment-body">
            <div id="dsq-comment-message-7726" class="dsq-comment-message"><p>what is the candidate from the voting algo for the example 2,2,2,3,3,4,4?</p>
<p>algo gives candidate as 4 but candidate is 2 right?<br />
Or am I missing something?</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-8037">
        <div id="dsq-comment-header-8037" class="dsq-comment-header">
            <cite id="dsq-cite-8037">
                <span id="dsq-author-user-8037">Ratnakar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8037" class="dsq-comment-body">
            <div id="dsq-comment-message-8037" class="dsq-comment-message"><p>I think question is that the majority element is one that occurs more than n/2 times where n is the length of the array</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-hidden_from_world even thread-even depth-1" id="dsq-comment-7054">
        <div id="dsq-comment-header-7054" class="dsq-comment-header">
            <cite id="dsq-cite-7054">
                <span id="dsq-author-user-7054">hidden_from_world</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7054" class="dsq-comment-body">
            <div id="dsq-comment-message-7054" class="dsq-comment-message"><p># include<stdio .h></p>
<p>void majority_element(int a[],int max,int size)<br />
{<br />
         int b[max];                    //taken one array b[max]<br />
         int I,J,K;<br />
         for(I=0; I< =max; I++)<br />
          b[I]=0;<br />
         for(J=0; J<size; J++)<br />
          b[a[J]]=b[a[J]]+1;<br />
         for(K=0; K<=max; K++)<br />
           {<br />
                if(ar[K]>(size/2))<br />
                   {<br />
                         printf(&#8220;%d&#8221;,K);<br />
                         break;<br />
                    }<br />
           }<br />
         if(K>max)<br />
           printf(&#8220;no repeating element is > n/2&#8243;) </p>
<p>}<br />
int main()<br />
{<br />
          int a[9]={3,3,4,2,4,4,2,4,4};<br />
          int max=a[0];<br />
          for(I=0; I&lt;9; I++){<br />
                      if(max<a[I])<br />
                        max=a[I];</p>
<p>           majority_element(ar,max,9);<br />
           return 0;<br />
}</p>
<p>// solution in O(n)</p>
<p>plz correct me if i am wrong&#8230;.</stdio></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rohitfeb14 odd alt thread-odd thread-alt depth-1" id="dsq-comment-5683">
        <div id="dsq-comment-header-5683" class="dsq-comment-header">
            <cite id="dsq-cite-5683">
http://www.cse.iitb.ac.in/~rohitfeb14/                <span id="dsq-author-user-5683">Rohit Saraf</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5683" class="dsq-comment-body">
            <div id="dsq-comment-message-5683" class="dsq-comment-message"><p>Another simpler algorithm that is O(n)<br />
Check for all even i, array[i] &amp; array[i+1],<br />
   if they are same, keep any one of them<br />
   else drop both<br />
This deterministically reduces the size of the candidate array to half (actually more in practice).<br />
Keep doing this, and at last the candidate would be found, checking which takes another O(n) time.</p>
<p>Proof:<br />
1. For being majority, two adjacent elements should be same.<br />
2. At every step, the majority element continues to be in majority, if any.</p>
<p>So, a very simple O(n) solution !! <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-rohitfeb14 even depth-2" id="dsq-comment-5684">
        <div id="dsq-comment-header-5684" class="dsq-comment-header">
            <cite id="dsq-cite-5684">
http://www.cse.iitb.ac.in/~rohitfeb14/                <span id="dsq-author-user-5684">Rohit Saraf</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5684" class="dsq-comment-body">
            <div id="dsq-comment-message-5684" class="dsq-comment-message"><p>Forgot to mention.</p>
<p>This is O(n) because</p>
<p>T(n) = n + T(n/2)<br />
which can be solved to give</p>
<p>T(n) = O(n)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rohitfeb14 odd alt depth-2" id="dsq-comment-5685">
        <div id="dsq-comment-header-5685" class="dsq-comment-header">
            <cite id="dsq-cite-5685">
http://www.cse.iitb.ac.in/~rohitfeb14/                <span id="dsq-author-user-5685">Rohit Saraf</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5685" class="dsq-comment-body">
            <div id="dsq-comment-message-5685" class="dsq-comment-message"><p>Forgot to mention.</p>
<p>T(n) = n + T(n/2)<br />
which can be solved to give</p>
<p>T(n) = O(n)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rohitfeb14 even depth-2" id="dsq-comment-5686">
        <div id="dsq-comment-header-5686" class="dsq-comment-header">
            <cite id="dsq-cite-5686">
http://www.cse.iitb.ac.in/~rohitfeb14/                <span id="dsq-author-user-5686">Rohit Saraf</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5686" class="dsq-comment-body">
            <div id="dsq-comment-message-5686" class="dsq-comment-message"><p>Sorry. This is all wrong! <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-5473">
        <div id="dsq-comment-header-5473" class="dsq-comment-header">
            <cite id="dsq-cite-5473">
                <span id="dsq-author-user-5473">Satyarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5473" class="dsq-comment-body">
            <div id="dsq-comment-message-5473" class="dsq-comment-message"><p>1&gt; We know that if majority element exists then it will must present at n/2th position after sorting the array. This is same as finding median of the array which can be found in O(n) using Order statistic.</p>
<p>2&gt; After getting this element, check whether this is majority element, again by traversing the array. </p>
<p>So, it can be found in O(n) time and O(1) space</p>
<p>Please correct me, if I am wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-5474">
        <div id="dsq-comment-header-5474" class="dsq-comment-header">
            <cite id="dsq-cite-5474">
                <span id="dsq-author-user-5474">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5474" class="dsq-comment-body">
            <div id="dsq-comment-message-5474" class="dsq-comment-message"><p>@Satyarth: Thanks for suggesting another O(n) approach.  This approach can be added to the original post.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-5591">
        <div id="dsq-comment-header-5591" class="dsq-comment-header">
            <cite id="dsq-cite-5591">
http://profiles.google.com/mindprince/about                <span id="dsq-author-user-5591">Rohit Agarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5591" class="dsq-comment-body">
            <div id="dsq-comment-message-5591" class="dsq-comment-message"><p>This assumes that there is an order relation between the elements. This assumption may not always be true. For example consider the case where the elements are GIF files or something like that.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-5628">
        <div id="dsq-comment-header-5628" class="dsq-comment-header">
            <cite id="dsq-cite-5628">
                <span id="dsq-author-user-5628">Satyarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5628" class="dsq-comment-body">
            <div id="dsq-comment-message-5628" class="dsq-comment-message"><p>I dont think above any method can be applied for GIF image.We need to take extra care for that.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-5598">
        <div id="dsq-comment-header-5598" class="dsq-comment-header">
            <cite id="dsq-cite-5598">
                <span id="dsq-author-user-5598">donbosio</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5598" class="dsq-comment-body">
            <div id="dsq-comment-message-5598" class="dsq-comment-message"><p>this is not O(n), sorting elements take O(nlogn). So, this is O(nlogn) .</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-5617">
        <div id="dsq-comment-header-5617" class="dsq-comment-header">
            <cite id="dsq-cite-5617">
                <span id="dsq-author-user-5617">Satyarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5617" class="dsq-comment-body">
            <div id="dsq-comment-message-5617" class="dsq-comment-message"><p>I am not sorting the elements. Read my post carefully.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-5682">
        <div id="dsq-comment-header-5682" class="dsq-comment-header">
            <cite id="dsq-cite-5682">
                <span id="dsq-author-user-5682">Ankur</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5682" class="dsq-comment-body">
            <div id="dsq-comment-message-5682" class="dsq-comment-message"><p>We know that if majority element exists then it will must present at n/2th position after sorting the array</p>
<p>I read..what does &#8220;sorting the array&#8221; means Satyarth <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-5" id="dsq-comment-8305">
        <div id="dsq-comment-header-8305" class="dsq-comment-header">
            <cite id="dsq-cite-8305">
                <span id="dsq-author-user-8305">Satyarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8305" class="dsq-comment-body">
            <div id="dsq-comment-message-8305" class="dsq-comment-message"><p>If it were sorted, then majority element must be present a n/2th position in array.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-5" id="dsq-comment-18025">
        <div id="dsq-comment-header-18025" class="dsq-comment-header">
            <cite id="dsq-cite-18025">
                <span id="dsq-author-user-18025">Ujjwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18025" class="dsq-comment-body">
            <div id="dsq-comment-message-18025" class="dsq-comment-message"><p>i think @Satyarth is right coz if majority ele is present at all, it will be @(n/2)th position, which is nothing but the median of an array. And we know that median of an array can be found out in O(n) time complexity (candidate ele)..<br />
We finally need to traverse the array again and check if it is at all a &#8220;majority ele&#8221;.. <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-5" id="dsq-comment-19619">
        <div id="dsq-comment-header-19619" class="dsq-comment-header">
            <cite id="dsq-cite-19619">
                <span id="dsq-author-user-19619">Satyarth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-19619" class="dsq-comment-body">
            <div id="dsq-comment-message-19619" class="dsq-comment-message"><p>@Ujjwal Thanks!</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4990">
        <div id="dsq-comment-header-4990" class="dsq-comment-header">
            <cite id="dsq-cite-4990">
                <span id="dsq-author-user-4990">Karthick</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4990" class="dsq-comment-body">
            <div id="dsq-comment-message-4990" class="dsq-comment-message"><p>Well, for the Moore&#8217;s algorithm, if the input is </p>
<p>{ 1,2,3,2,4,2,5} won&#8217;t findMajority() return &#8216;5&#8217; as the majority element?<br />
 Or was I wrong in interpreting the algorithm?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-5483">
        <div id="dsq-comment-header-5483" class="dsq-comment-header">
            <cite id="dsq-cite-5483">
                <span id="dsq-author-user-5483">AG</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5483" class="dsq-comment-body">
            <div id="dsq-comment-message-5483" class="dsq-comment-message"><p>ya dats why we need to check in the last step whether the candidate suggested by the Moore&#8217;s voting algorithm is occurring more than n/2 times in the array or not. In your test case there doesn&#8217;t exist any majority element. Hope u got it.. <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-2407">
        <div id="dsq-comment-header-2407" class="dsq-comment-header">
            <cite id="dsq-cite-2407">
                <span id="dsq-author-user-2407">donbosio</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2407" class="dsq-comment-body">
            <div id="dsq-comment-message-2407" class="dsq-comment-message"><p>is the new problem not same with new N=2n or am i getting it wrong?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-1454">
        <div id="dsq-comment-header-1454" class="dsq-comment-header">
            <cite id="dsq-cite-1454">
                <span id="dsq-author-user-1454">Ravi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1454" class="dsq-comment-body">
            <div id="dsq-comment-message-1454" class="dsq-comment-message"><p>Please tell me a O(logn) solution to this problem. </p>
<p>Given an array of N elements and where an element appears exactly N/2 times and the rest N/2 elements are unique. How would you find the element with a better run time?</p>
<p>Remember the elements are not sorted and you can assume N is even. For example,</p>
<p>input array [] = { 10, 2, 3, 10, 1, 4, 10, 5, 10, 10 }</p>
<p>So here 10 appears extactly 5 times which is N/2.</p>
<p>I know a solution with O(n) run time. But still looking forward to know a better solution with O(log n).</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-1478">
        <div id="dsq-comment-header-1478" class="dsq-comment-header">
            <cite id="dsq-cite-1478">
http://techpuzzl.wordpress.com                <span id="dsq-author-user-1478">ved</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1478" class="dsq-comment-body">
            <div id="dsq-comment-message-1478" class="dsq-comment-message"><p>@Ravi, @geeksforgeeks, please post O(n) or better solution here ?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-2539">
        <div id="dsq-comment-header-2539" class="dsq-comment-header">
            <cite id="dsq-cite-2539">
                <span id="dsq-author-user-2539">_TJ</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2539" class="dsq-comment-body">
            <div id="dsq-comment-message-2539" class="dsq-comment-message"><p>O(n) time is impossible if the array is not sorted. You need to visit at least n/2+1 element in the best case before declaring the majority element,which is O(n)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-4901">
        <div id="dsq-comment-header-4901" class="dsq-comment-header">
            <cite id="dsq-cite-4901">
                <span id="dsq-author-user-4901">Decompiler</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4901" class="dsq-comment-body">
            <div id="dsq-comment-message-4901" class="dsq-comment-message"><p>I think it is the same problem as above only difference is N &gt;= n/2 where in 1st case it was N &gt; n/2</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1260">
        <div id="dsq-comment-header-1260" class="dsq-comment-header">
            <cite id="dsq-cite-1260">
                <span id="dsq-author-user-1260">Rajeev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1260" class="dsq-comment-body">
            <div id="dsq-comment-message-1260" class="dsq-comment-message"><p>Hello,<br />
Can anyone elaborate how the time complexity and space complexity in the method is O(n*n) and O(1). I think it should be O(n) in both cases.</p>
<p>As in one single loop we calculate the frequency of all different elements.</p>
<p>Rajeev</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-1261">
        <div id="dsq-comment-header-1261" class="dsq-comment-header">
            <cite id="dsq-cite-1261">
                <span id="dsq-author-user-1261">Rajeev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1261" class="dsq-comment-body">
            <div id="dsq-comment-message-1261" class="dsq-comment-message"><p>In Method 1(basic)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-sandeep even depth-3" id="dsq-comment-1263">
        <div id="dsq-comment-header-1263" class="dsq-comment-header">
            <cite id="dsq-cite-1263">
                <span id="dsq-author-user-1263">Sandeep</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1263" class="dsq-comment-body">
            <div id="dsq-comment-message-1263" class="dsq-comment-message"><p>@Rajeev: I agree, space complexity should be O(n). The post doesn&#8217;t say space complexity is O(1), it says auxiliary space is O(1).</p>
<p>Regarding time complexity, if the input array is like [12, 21, 34, 45, 10, 10, 10, 10, 10], then the basic method would look for number of occurrences of 12, then 21, then 34, and 45. after reaching 10, it will be able to find majority element.  So we can say in worst case time complexity is O(n^2)</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-837">
        <div id="dsq-comment-header-837" class="dsq-comment-header">
            <cite id="dsq-cite-837">
                <span id="dsq-author-user-837">Himanshu Aggarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-837" class="dsq-comment-body">
            <div id="dsq-comment-message-837" class="dsq-comment-message"><p>Hi, </p>
<p>More info about the Boyer Moore&#8217;s voting algorithm is given at their website below.</p>
<p><a href="http://userweb.cs.utexas.edu/users/moore/best-ideas/mjrty/index.html" rel="nofollow">http://userweb.cs.utexas.edu/users/moore/best-ideas/mjrty/index.html</a></p>
<p>Thanks<br />
Himanshu Aggarwal</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-1262">
        <div id="dsq-comment-header-1262" class="dsq-comment-header">
            <cite id="dsq-cite-1262">
                <span id="dsq-author-user-1262">Rajeev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1262" class="dsq-comment-body">
            <div id="dsq-comment-message-1262" class="dsq-comment-message"><p>Hi,</p>
<p>According to the link, we don&#8217;t change the majority element when count is zero, it is changed on the next element. But in the code given here it is changed on the same element where the count becomes zero.</p>
<p>Is it making a differnce??</p>
<p>Thanx<br />
Rajeev</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-775">
        <div id="dsq-comment-header-775" class="dsq-comment-header">
            <cite id="dsq-cite-775">
                <span id="dsq-author-user-775">Himanshu Aggarwal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-775" class="dsq-comment-body">
            <div id="dsq-comment-message-775" class="dsq-comment-message"><p>Please find the algorithm below :</p>
<pre> <code language="C">#include&lt;stdio.h&gt;
int findmaj(int arr[], int n)
{
    int bitcount[32];
    int i, j, x;

    for(i = 0; i &lt; 32; i++)
        bitcount[i] = 0;
    for (i = 0; i &lt; n; i++)
         for (j = 0; j &lt; 32; j++)
               if (arr[i] &amp; (1 &lt;&lt; j)) // if bit j is on
                    bitcount[j]++;
               else
                    bitcount[j]--; 

    x = 0;
    for (i = 0; i &lt; 32; i++)
        if (bitcount[i] &gt; 0)
            x = x | (1 &lt;&lt; i);
    return x;
}

int main()
{
  int i;
  int arr[5] = {1, 3 ,1, 1, 3};

  printf(&quot; %d &quot;,  findmaj(arr, 5));

  getchar();
  return 0;
}
</code> </pre>
<p>We keep a count of frequency of each of the bits. Since majority element will dominate the frequency count, hence we can get its value.</p>
<p>The solution is constant space and linear time : O(n)</p>
<p>Regards<br />
Himanshu Aggarwal</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-782">
        <div id="dsq-comment-header-782" class="dsq-comment-header">
            <cite id="dsq-cite-782">
                <span id="dsq-author-user-782">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-782" class="dsq-comment-body">
            <div id="dsq-comment-message-782" class="dsq-comment-message"><p>Nice method!! It works, but it does more comparisons compared to Moore’s Voting Algorithm.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-odd thread-alt depth-1" id="dsq-comment-287">
        <div id="dsq-comment-header-287" class="dsq-comment-header">
            <cite id="dsq-cite-287">
                <span id="dsq-author-user-287">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-287" class="dsq-comment-body">
            <div id="dsq-comment-message-287" class="dsq-comment-message"><p>@sachin midha:  Thanks for suggesting a new method, we have added the method to original post. Please note that time complexity of the method will be O(n*n) for a BST and O(nlogn) for self-balancing BST</p>
<p>Reference: <a href="http://en.wikipedia.org/wiki/Binary_search_tree#Sort" rel="nofollow">http://en.wikipedia.org/wiki/Binary_search_tree#Sort</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-286">
        <div id="dsq-comment-header-286" class="dsq-comment-header">
            <cite id="dsq-cite-286">
                <span id="dsq-author-user-286">sachin midha</span>
            </cite>
        </div>
        <div id="dsq-comment-body-286" class="dsq-comment-body">
            <div id="dsq-comment-message-286" class="dsq-comment-message"><p>The original question can also be solved by using a BST.</p>
<pre> <code language="C">
struct tree
{
  int n;
  int count;
}BST;
</code> </pre>
<p>Each element would be inserted into the tree and if it is already present count will be updated.<br />
The advantage of this method would be that in the bast case scenario we would not have to scan through the whole of the array for findng the majority element, since if count variable becomes greater than n/2, our problem is solved. Eg. ar={1,1,1,1,1,2,3,4} here we do not have to scan through the whole array since after getting the 5th 1 its count becomes &gt; n/2(4).<br />
The sad part though, is that it requires an extra o(n) space in the worst case when all elements are different.<br />
But this approach would be useful if we have to scan through the array only once.<br />
Time complexity : o(n){best case:whole array does not hv to be scanned}<br />
Space complexity : o(n) worst case</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-9266">
        <div id="dsq-comment-header-9266" class="dsq-comment-header">
            <cite id="dsq-cite-9266">
                <span id="dsq-author-user-9266">Apoorv</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9266" class="dsq-comment-body">
            <div id="dsq-comment-message-9266" class="dsq-comment-message"><p>Nice. I feel we can improvise this by using a hash map instead of a BST. When using BST, in the worst case, for every insertion(increment of count), we&#8217;ll have to make log(n) comparisons. However, in HashMap, this will take constant time. Please correct me if I am wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even thread-odd thread-alt depth-1" id="dsq-comment-117">
        <div id="dsq-comment-header-117" class="dsq-comment-header">
            <cite id="dsq-cite-117">
                <span id="dsq-author-user-117">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-117" class="dsq-comment-body">
            <div id="dsq-comment-message-117" class="dsq-comment-message"><p>@Srinivas Iyengar: Thanks for writing to us.  Your solution is correct for the “Try it Yourself Part”. Another simple solution is to loop through all the elements and if you see an element who is same as element next to it or same as element next next to it, return the element.  Since all other n elements are different, this will work.</p>
<p>@Anshu Veda Jain: Thanks for providing a variation of the problem. Your solution is also correct for the variation.</p>
<p>Keep writing to us.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-2465">
        <div id="dsq-comment-header-2465" class="dsq-comment-header">
            <cite id="dsq-cite-2465">
                <span id="dsq-author-user-2465">Rajeev</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2465" class="dsq-comment-body">
            <div id="dsq-comment-message-2465" class="dsq-comment-message"><p>the suggested approach has a corner case (1, 2, 3, 1)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-neha2210 even depth-3" id="dsq-comment-16070">
        <div id="dsq-comment-header-16070" class="dsq-comment-header">
            <cite id="dsq-cite-16070">
                <span id="dsq-author-user-16070">neha2210</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16070" class="dsq-comment-body">
            <div id="dsq-comment-message-16070" class="dsq-comment-message"><p>Yes you are right!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-106">
        <div id="dsq-comment-header-106" class="dsq-comment-header">
            <cite id="dsq-cite-106">
                <span id="dsq-author-user-106">Anshu Veda Jain</span>
            </cite>
        </div>
        <div id="dsq-comment-body-106" class="dsq-comment-body">
            <div id="dsq-comment-message-106" class="dsq-comment-message"><p>@ geeksforgeeks: I think Srinivas based solution on the assumption in your problem &#8220;the remaining n elements are all different&#8221;. So then the input you are telling isn&#8217;t valid.<br />
May be the assumption you meant was:There is only a single Major or no other element can exist n times.</p>
<p>Would this work:<br />
Consider A[1..2n-1]:<br />
There could be two cases:<br />
1. A[2n] is the major element : 1,2,4,2,1,2,1,2,1,1<br />
2. A[2n] is not the major element: 1,1,2,1,1,1,2,3,2,4</p>
<p>If their exists a major element, it would either be A[2n] or  the majority of A[1..2n-1].<br />
Why?:<br />
Suppose its case 1: No issues we ll be directly checking for A[2n]<br />
Suppose its case 2: Then Major element exists n times in an array of 2n-1 (n &gt; (n-1)/2 )</p>
<p>Apply Moore&#8217;s voting for 2n-1 to calculate majority_2n-1.<br />
Check whether A[2n] or majority_2n-1 is the Major.<br />
Comments?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-4072">
        <div id="dsq-comment-header-4072" class="dsq-comment-header">
            <cite id="dsq-cite-4072">
                <span id="dsq-author-user-4072">Neela</span>
            </cite>
        </div>
        <div id="dsq-comment-body-4072" class="dsq-comment-body">
            <div id="dsq-comment-message-4072" class="dsq-comment-message"><p>For the variation you have talked about, i think the following will work.. Just a small variation of the voting algorithm .. instead of initializing the count to 1 (at the beginning or when it reaches zero), initialize it to 2;</p>
<p>Then with a single traversal of the array the element occuring times can be found using the voting algorithm.</p>
<pre>
findElementOccuringNtimes(a[], size)
1.  Initialize index and count of majority element
     maj_index = 0, count = 2
2.  Loop for i = 1 to size – 1
    (a)If a[maj_index] == a[i]
        count++
    (b)Else
        count--;
    (c)If count == 0
        maj_index = i;
        count = 2
3.  Return a[maj_index]
</pre>
<p>This will work because an element other than the desired element can occur atmost n-1 times.. Its count will thus eventually drop to zero because of the remaining n+1 different elements (because we initialize to 2, the count of an element occuring n-1 times will reach n at the max and will become zero because of the remaining n+1 elements) .. And only for the desired element occuring n times the count will be non zero till end and hence will be returned ..</p>
<p>@geeksforgeeks: Could you please verify this solution</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-29570">
        <div id="dsq-comment-header-29570" class="dsq-comment-header">
            <cite id="dsq-cite-29570">
                <span id="dsq-author-user-29570">Vinod</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29570" class="dsq-comment-body">
            <div id="dsq-comment-message-29570" class="dsq-comment-message"><p>@0698b94682093488ba78c5dccd78894b:disqus&#8230;Check for set = {4,3,3,2,1,3}&#8230;I don&#8217;t think suggested approach would work here&#8230;It would print as &#8220;1&#8221; which is incorrect.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even thread-odd thread-alt depth-1" id="dsq-comment-105">
        <div id="dsq-comment-header-105" class="dsq-comment-header">
            <cite id="dsq-cite-105">
                <span id="dsq-author-user-105">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-105" class="dsq-comment-body">
            <div id="dsq-comment-message-105" class="dsq-comment-message"><p>@Srinivas: Could you elaborate your approach little more, please? How will your approach work for the below array?</p>
<p>[2, 2, 3, 4, 5, 3, 3, 3, 2, 3]</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-102">
        <div id="dsq-comment-header-102" class="dsq-comment-header">
            <cite id="dsq-cite-102">
http://srini156.blogspot.com                <span id="dsq-author-user-102">Srinivas Iyengar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-102" class="dsq-comment-body">
            <div id="dsq-comment-message-102" class="dsq-comment-message"><p>Well, for 2n elements having n same and n different elements,we  check for first three elements. If total size is less than 3 we can trivially find the majority element.<br />
Now for the 3 Numbers,if all 3 are different then remove the 3 elements and check for the Majority Element in 2n-3 array using the above Voting Algorithm and verify in O(n) time.However,if any 2 of them are same,then it is the majority element.<br />
Is there some other Approach to this Problem?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-101">
        <div id="dsq-comment-header-101" class="dsq-comment-header">
            <cite id="dsq-cite-101">
http://srini156.blogspot.com                <span id="dsq-author-user-101">Srinivas Iyengar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-101" class="dsq-comment-body">
            <div id="dsq-comment-message-101" class="dsq-comment-message"><p>Can you please explain the solution for the &#8220;Try it Yourself Part&#8221; mentioned at the end of this Post.<br />
1) Naive Approach is O(n*log(n)) which involves sorting the entire array and loop i through the entire array checking for ith and (i+n-1)th element. If both are same then it is the Major Element in that case else if the loop terminates no major element exists.</p>
<p>2) I am pretty sure that Linear time algorithm exists to determine the major element in that case.But,I am unable to figure out.Even maintaining set bits for each position doesn&#8217;t seem to work.Anycase it doesn&#8217;t seem to run in linear time.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-even depth-1" id="dsq-comment-76">
        <div id="dsq-comment-header-76" class="dsq-comment-header">
            <cite id="dsq-cite-76">
                <span id="dsq-author-user-76">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-76" class="dsq-comment-body">
            <div id="dsq-comment-message-76" class="dsq-comment-message"><p>@joe blow: Thanks for visiting the portal. </p>
<p>Could you please elaborate with an example why the above solution will not work? </p>
<p>In the above solution, Moore&#8217;s Voting algorithm is only the first step to find a potential candidate for majority element. The final decision is taken based on function isMajority().</p>
<p>Besides, the solution you are proposing has time complexity O(nlogn) which is definitely sub-optimal than O(n).</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-72">
        <div id="dsq-comment-header-72" class="dsq-comment-header">
            <cite id="dsq-cite-72">
                <span id="dsq-author-user-72">joe blow</span>
            </cite>
        </div>
        <div id="dsq-comment-body-72" class="dsq-comment-body">
            <div id="dsq-comment-message-72" class="dsq-comment-message"><p>The optimized way doesn&#8217;t work.  Moore&#8217;s voting algorithm requires that one of the elements MUST be a majority.  If there is a majority, then the algorithm works, otherwise it doesn&#8217;t.  So if the condition of the question is to find the majority IF it exists, then you can&#8217;t use it.</p>
<p>Personally I would just sort the array, NlogN time, and then iterate through it, counting the max occurrence.  If I don&#8217;t find a majority element after N/2, then the answer is no, otherwise I will eventually find it when the number of elements &gt; N/2</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-55">
        <div id="dsq-comment-header-55" class="dsq-comment-header">
            <cite id="dsq-cite-55">
                <span id="dsq-author-user-55">Varun Bhatia</span>
            </cite>
        </div>
        <div id="dsq-comment-body-55" class="dsq-comment-body">
            <div id="dsq-comment-message-55" class="dsq-comment-message"><p>@geeksforgeeks: ya i worked my approach and found that it could be applied to a similar problem but not this one&#8230;&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even thread-odd thread-alt depth-1" id="dsq-comment-46">
        <div id="dsq-comment-header-46" class="dsq-comment-header">
            <cite id="dsq-cite-46">
                <span id="dsq-author-user-46">geeksforgeeks</span>
            </cite>
        </div>
        <div id="dsq-comment-body-46" class="dsq-comment-body">
            <div id="dsq-comment-message-46" class="dsq-comment-message"><p>@Varun: Could you elaborate your approach little more, please? How will your approach work in O(n) for the below array?</p>
<p>[1, 1, 1, 2, 1, 2, 3, 3, 1, 1]</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-45">
        <div id="dsq-comment-header-45" class="dsq-comment-header">
            <cite id="dsq-cite-45">
                <span id="dsq-author-user-45">Varun Bhatia</span>
            </cite>
        </div>
        <div id="dsq-comment-body-45" class="dsq-comment-body">
            <div id="dsq-comment-message-45" class="dsq-comment-message"><p>Hello,</p>
<p>I have an easier approach to find the candidate majority element. Take three pointers pointing at three successive locations. Now if any two of them point to the same number then that element can be the candidate for the majority element.</p>
<p>Now u can find the frequency of this candidate by scanning the array again.</p>
<p>O(1) space and O(n) time</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-blunderboy even depth-2" id="dsq-comment-3826">
        <div id="dsq-comment-header-3826" class="dsq-comment-header">
            <cite id="dsq-cite-3826">
                <span id="dsq-author-user-3826">blunderboy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-3826" class="dsq-comment-body">
            <div id="dsq-comment-message-3826" class="dsq-comment-message"><p>I have thought of an approach to the new problem (2n numbers).</p>
<p>Just remove the last element from the array and store in temp.<br />
Now there are two cases.<br />
Case1. The removed element is the element repeating n times.<br />
That means (n-1) elements same and n elements different.<br />
Case2. The removed element is normal element.<br />
That means n elements same and n-1 different.</p>
<p>Now, Just traverse the array using voting algorithm.You will get an element but not sure whether it is majority or not.<br />
And we also have another element stored in temp.</p>
<p>We are sure that ur desired element is either the temp or the element coming as candidate from the algorithm.</p>
<p>So traverse the array once again to count their frequency.<br />
Print the desired element.</p>
<p>Please correct me.<br />
I am not providing the code as code is already present above in the post and quite simple though.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-29171">
        <div id="dsq-comment-header-29171" class="dsq-comment-header">
            <cite id="dsq-cite-29171">
                <span id="dsq-author-user-29171">hemanth</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29171" class="dsq-comment-body">
            <div id="dsq-comment-message-29171" class="dsq-comment-message"><p>correct</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/majority-element/';
var disqus_identifier = '503 http://geeksforgeeks.org/?p=503';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Majority Element";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.275 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:33:27 -->

<!-- Compression = gzip -->
<!-- super cache -->