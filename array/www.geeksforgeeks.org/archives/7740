<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Merge Sort for Linked Lists - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/merge-sort-for-linked-list/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Merge Sort for Linked Lists - GeeksforGeeks" />
<meta property="og:description" content="Merge sort is often preferred for sorting a linked list. The slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. Let head be the first node of the linked list to be sorted and headRef be the pointer to head. Note &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/merge-sort-for-linked-list/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:section" content="Linked Lists" />
<meta property="article:published_time" content="2010-06-06T20:59:58+00:00" />
<meta property="article:modified_time" content="2012-03-30T13:27:25+00:00" />
<meta property="og:updated_time" content="2012-03-30T13:27:25+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.517 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111102 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Merge Sort for Linked Lists</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p><a href="http://en.wikipedia.org/wiki/Merge_sort">Merge sort</a> is often preferred for sorting a linked list. The slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible.<span id="more-7740"></span></p>
<p>Let head be the first node of the linked list to be sorted and headRef be the pointer to head. Note that we need a reference to head in MergeSort() as the below implementation changes next links to sort the linked lists (not data at the nodes), so head node has to be changed if the data at original head is not the smallest value in linked list.</p>
<pre>
MergeSort(headRef)
1) If head is NULL or there is only one element in the Linked List 
    then return.
2) Else divide the linked list into two halves.  
      FrontBackSplit(head, &#038;a, &#038;b); /* a and b are two halves */
3) Sort the two halves a and b.
      MergeSort(a);
      MergeSort(b);
4) Merge the sorted a and b (using SortedMerge() discussed <a href="http://geeksforgeeks.org/?p=3622">here</a>) 
   and update the head pointer using headRef.
     *headRef = SortedMerge(a, b);
</pre>
<pre class="brush: cpp; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
 
/* Link list node */
struct node
{
    int data;
    struct node* next;
};

/* function prototypes */
struct node* SortedMerge(struct node* a, struct node* b);
void FrontBackSplit(struct node* source,
          struct node** frontRef, struct node** backRef);

/* sorts the linked list by changing next pointers (not data) */
void MergeSort(struct node** headRef)
{
  struct node* head = *headRef;
  struct node* a;
  struct node* b;

  /* Base case -- length 0 or 1 */
  if ((head == NULL) || (head-&gt;next == NULL))
  {
    return;
  }

  /* Split head into 'a' and 'b' sublists */
  FrontBackSplit(head, &amp;a, &amp;b); 

  /* Recursively sort the sublists */
  MergeSort(&amp;a);
  MergeSort(&amp;b);

  /* answer = merge the two sorted lists together */
  *headRef = SortedMerge(a, b);
}

/* See http://geeksforgeeks.org/?p=3622 for details of this 
   function */
struct node* SortedMerge(struct node* a, struct node* b)
{
  struct node* result = NULL;

  /* Base cases */
  if (a == NULL)
     return(b);
  else if (b==NULL)
     return(a);

  /* Pick either a or b, and recur */
  if (a-&gt;data &lt;= b-&gt;data)
  {
     result = a;
     result-&gt;next = SortedMerge(a-&gt;next, b);
  }
  else
  {
     result = b;
     result-&gt;next = SortedMerge(a, b-&gt;next);
  }
  return(result);
}

/* UTILITY FUNCTIONS */
/* Split the nodes of the given list into front and back halves,
     and return the two lists using the reference parameters.
     If the length is odd, the extra node should go in the front list.
     Uses the fast/slow pointer strategy.  */
void FrontBackSplit(struct node* source,
          struct node** frontRef, struct node** backRef)
{
  struct node* fast;
  struct node* slow;
  if (source==NULL || source-&gt;next==NULL)
  {
    /* length &lt; 2 cases */
    *frontRef = source;
    *backRef = NULL;
  }
  else
  {
    slow = source;
    fast = source-&gt;next;

    /* Advance 'fast' two nodes, and advance 'slow' one node */
    while (fast != NULL)
    {
      fast = fast-&gt;next;
      if (fast != NULL)
      {
        slow = slow-&gt;next;
        fast = fast-&gt;next;
      }
    }

    /* 'slow' is before the midpoint in the list, so split it in two
      at that point. */
    *frontRef = source;
    *backRef = slow-&gt;next;
    slow-&gt;next = NULL;
  }
}

/* Function to print nodes in a given linked list */
void printList(struct node *node)
{
  while(node!=NULL)
  {
   printf(&quot;%d &quot;, node-&gt;data);
   node = node-&gt;next;
  }
}

/* Function to insert a node at the beginging of the linked list */
void push(struct node** head_ref, int new_data)
{
  /* allocate node */
  struct node* new_node =
            (struct node*) malloc(sizeof(struct node));
 
  /* put in the data  */
  new_node-&gt;data  = new_data;
 
  /* link the old list off the new node */
  new_node-&gt;next = (*head_ref);    
 
  /* move the head to point to the new node */
  (*head_ref)    = new_node;
} 
 
/* Drier program to test above functions*/
int main()
{
  /* Start with the empty list */
  struct node* res = NULL;
  struct node* a = NULL;
 
  /* Let us create a unsorted linked lists to test the functions
   Created lists shall be a: 2-&gt;3-&gt;20-&gt;5-&gt;10-&gt;15 */
  push(&amp;a, 15);
  push(&amp;a, 10);
  push(&amp;a, 5); 
  push(&amp;a, 20);
  push(&amp;a, 3);
  push(&amp;a, 2); 
 
  /* Sort the above created Linked List */
  MergeSort(&amp;a);
 
  printf(&quot;\n Sorted Linked List is: \n&quot;);
  printList(a);           
 
  getchar();
  return 0;
}
</pre>
<p>Time Complexity: O(nLogn)</p>
<p>Sources:<br />
<a href="http://en.wikipedia.org/wiki/Merge_sort">http://en.wikipedia.org/wiki/Merge_sort</a><br />
<a href="http://cslibrary.stanford.edu/105/LinkedListProblems.pdf">http://cslibrary.stanford.edu/105/LinkedListProblems.pdf</a></p>
<p>Please write comments if you find the above code/algorithm incorrect, or find better ways to solve the same problem.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/given-linked-list-reverse-alternate-nodes-append-end/" title="Given a linked list, reverse alternate nodes and append at the end">Given a linked list, reverse alternate nodes and append at the end</a></li><li><a href="http://www.geeksforgeeks.org/pairwise-swap-elements-of-a-given-linked-list-by-changing-links/" title="Pairwise swap elements of a given linked list by changing links">Pairwise swap elements of a given linked list by changing links</a></li><li><a href="http://www.geeksforgeeks.org/self-organizing-list-set-1-introduction/" title="Self Organizing List | Set 1 (Introduction)">Self Organizing List | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/merge-a-linked-list-into-another-linked-list-at-alternate-positions/" title="Merge a linked list into another linked list at alternate positions">Merge a linked list into another linked list at alternate positions</a></li><li><a href="http://www.geeksforgeeks.org/quicksort-on-singly-linked-list/" title="QuickSort on Singly Linked List">QuickSort on Singly Linked List</a></li><li><a href="http://www.geeksforgeeks.org/delete-n-nodes-after-m-nodes-of-a-linked-list/" title="Delete N nodes after M nodes of a linked list">Delete N nodes after M nodes of a linked list</a></li><li><a href="http://www.geeksforgeeks.org/design-a-stack-with-find-middle-operation/" title="Design a stack with operations on middle element">Design a stack with operations on middle element</a></li><li><a href="http://www.geeksforgeeks.org/swap-kth-node-from-beginning-with-kth-node-from-end-in-a-linked-list/" title="Swap Kth node from beginning with Kth node from end in a Linked List">Swap Kth node from beginning with Kth node from end in a Linked List</a></li></ul>
<p></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fmerge-sort-for-linked-list%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/merge-sort-for-linked-list/" data-text="Merge Sort for Linked Lists" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/merge-sort-for-linked-list/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-34211">
        <div id="dsq-comment-header-34211" class="dsq-comment-header">
            <cite id="dsq-cite-34211">
                <span id="dsq-author-user-34211">Aditya Chhilwar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34211" class="dsq-comment-body">
            <div id="dsq-comment-message-34211" class="dsq-comment-message"><p>FrontBackSplit will be called for every partition. For n elements for first call to this function will traverse n nodes (order of n), for second it will be called two times n/2+n/2 = n and so on. How the time complexity is order of nlogn?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34210">
        <div id="dsq-comment-header-34210" class="dsq-comment-header">
            <cite id="dsq-cite-34210">
                <span id="dsq-author-user-34210">Aditya Chhilwar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34210" class="dsq-comment-body">
            <div id="dsq-comment-message-34210" class="dsq-comment-message"><p>FrontBackSplit will be called for every partition. For n elements for first call to this function will traverse n nodes (order of n), for second it will be called two times n/2+n/2 = n and so on. How the time complexity is order of nlogn?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-34136">
        <div id="dsq-comment-header-34136" class="dsq-comment-header">
            <cite id="dsq-cite-34136">
                <span id="dsq-author-user-34136">guest11</span>
            </cite>
        </div>
        <div id="dsq-comment-body-34136" class="dsq-comment-body">
            <div id="dsq-comment-message-34136" class="dsq-comment-message"><p>can anyone explain why slow-&gt;next has been set to null</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32620">
        <div id="dsq-comment-header-32620" class="dsq-comment-header">
            <cite id="dsq-cite-32620">
http://www.ankitstar.blogspot.com                <span id="dsq-author-user-32620">Ankit</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32620" class="dsq-comment-body">
            <div id="dsq-comment-message-32620" class="dsq-comment-message"><p>better understandable code &#8230;<br />
<code><br />
#include<br />
#include</p>
<p>struct node<br />
{<br />
    int data;<br />
    struct node *next;<br />
};</p>
<p>struct node * createNode(int value)<br />
{<br />
    struct node * N=(struct node *)malloc(sizeof(struct node));<br />
    N-&gt;next=NULL;<br />
    N-&gt;data=value;<br />
    return N;<br />
};</p>
<p>struct node *FindMid(struct node *head) // auxilary method required<br />
{<br />
    struct node *p=head,*q=head;<br />
    if(p&amp;&amp;p-&gt;next)<br />
    {<br />
        p=p-&gt;next-&gt;next;<br />
        q=q-&gt;next;<br />
    }<br />
    return q;<br />
};<br />
// auxilary method required<br />
struct node * mergeSortedList(struct node *a,struct node *b)<br />
{<br />
    if(!a)<br />
        return b;<br />
    if(!b)<br />
        return a;<br />
    struct node *result=NULL;<br />
    if(a-&gt;data<b>data)<br />
    {<br />
        result=a;<br />
        result-&gt;next=mergeSortedList(a-&gt;next,b);<br />
    }<br />
    else<br />
    {<br />
        result=b;<br />
        result-&gt;next=mergeSortedList(a,b-&gt;next);<br />
    }<br />
    return result;<br />
};</p>
<p>struct node *mergeSort(struct node *head)<br />
{<br />
    if(!head)<br />
        return NULL;<br />
    if(head-&gt;next==NULL)<br />
        return head;</p>
<p>    else if(head-&gt;next-&gt;next==NULL)<br />
    {<br />
        struct node *p=head;<br />
        if(p-&gt;data&gt;p-&gt;next-&gt;data)<br />
        {<br />
            head=head-&gt;next;<br />
            p-&gt;next=NULL;<br />
            head-&gt;next=p;<br />
            return head;<br />
        }<br />
        else return head;</p>
<p>    }<br />
    else<br />
    {<br />
        struct node *mid=FindMid(head);<br />
        struct node *SHalf=mid-&gt;next;<br />
        mid-&gt;next=NULL;<br />
        struct node *head1=mergeSort(head);<br />
        struct node *head2=mergeSort(SHalf);</p>
<p>        return mergeSortedList(head1,head2);<br />
    }</p>
<p>};</p>
<p>void main()<br />
{<br />
    struct node *head=createNode(25);<br />
    head-&gt;next=createNode(10);<br />
    head-&gt;next-&gt;next=createNode(15);<br />
    head-&gt;next-&gt;next-&gt;next=createNode(30);<br />
    head-&gt;next-&gt;next-&gt;next-&gt;next=createNode(5);<br />
    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next=NULL;<br />
    printf("LINKED LIST TO BE SORTEDnn");<br />
    struct node *a=head;<br />
    while(a!=NULL)<br />
    {<br />
        printf("%d--&gt;",a-&gt;data);<br />
        a=a-&gt;next;<br />
    }</p>
<p>    a=mergeSort(head);<br />
    printf("nnSORTED LINKED LIST ISnn");<br />
    while(a!=NULL)<br />
    {<br />
        printf("%d--&gt;",a-&gt;data);<br />
        a=a-&gt;next;<br />
    }<br />
}<br />
</b></code></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-32335">
        <div id="dsq-comment-header-32335" class="dsq-comment-header">
            <cite id="dsq-cite-32335">
                <span id="dsq-author-user-32335">Himanshu Dagar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-32335" class="dsq-comment-body">
            <div id="dsq-comment-message-32335" class="dsq-comment-message"><p>Merge sort whole in recursive way is at below link</p>
<p><a href="http://ideone.com/Wacpan" rel="nofollow">http://ideone.com/Wacpan</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31563">
        <div id="dsq-comment-header-31563" class="dsq-comment-header">
            <cite id="dsq-cite-31563">
                <span id="dsq-author-user-31563">Anil kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31563" class="dsq-comment-body">
            <div id="dsq-comment-message-31563" class="dsq-comment-message"><p>I hope best way to join sorted list is :</p>
<p>list</p>
<p>merge_sorted_lists(list a, list b)</p>
<p>{</p>
<p>    list    result, result2;</p>
<p>    if(a-&gt;data <b>data)</p>
<p>    {</p>
<p>        result = a;</p>
<p>        a = a-&gt;next;</p>
<p>    }</p>
<p>    else</p>
<p>    {</p>
<p>        result = b;</p>
<p>        b = b-&gt;next;</p>
<p>    }</p>
<p>    result2 = result;</p>
<p>    while((a != NULL) &amp;&amp; (b!= NULL))</p>
<p>    {</p>
<p>        if(a-&gt;data </b><b>data)</p>
<p>        {</p>
<p>            result-&gt;next = a;</p>
<p>            a = a-&gt;next;</p>
<p>        }</p>
<p>        else</p>
<p>        {</p>
<p>            result-&gt;next = b;</p>
<p>            b = b-&gt;next;</p>
<p>        }</p>
<p>        result = result-&gt;next;</p>
<p>    }</p>
<p>    if(a == NULL)</p>
<p>        result-&gt;next = b;</p>
<p>    if(b == NULL)</p>
<p>        result-&gt;next = a;</p>
<p>    return result2;</p>
<p>}</b></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-28692">
        <div id="dsq-comment-header-28692" class="dsq-comment-header">
            <cite id="dsq-cite-28692">
                <span id="dsq-author-user-28692">J</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28692" class="dsq-comment-body">
            <div id="dsq-comment-message-28692" class="dsq-comment-message"><p>This only gives me one half of the list</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-26860">
        <div id="dsq-comment-header-26860" class="dsq-comment-header">
            <cite id="dsq-cite-26860">
                <span id="dsq-author-user-26860">nutcoder</span>
            </cite>
        </div>
        <div id="dsq-comment-body-26860" class="dsq-comment-body">
            <div id="dsq-comment-message-26860" class="dsq-comment-message"><p>y has not struct node **a been used as parameter in  sorted merge function??</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-28338">
        <div id="dsq-comment-header-28338" class="dsq-comment-header">
            <cite id="dsq-cite-28338">
                <span id="dsq-author-user-28338">Deepak</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28338" class="dsq-comment-body">
            <div id="dsq-comment-message-28338" class="dsq-comment-message"><p>bcz we are returning the result list&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-20543">
        <div id="dsq-comment-header-20543" class="dsq-comment-header">
            <cite id="dsq-cite-20543">
                <span id="dsq-author-user-20543">sush</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20543" class="dsq-comment-body">
            <div id="dsq-comment-message-20543" class="dsq-comment-message"><pre> <code language="C">
void SortedMerge(struct node**h,struct node* a, struct node* b)
{
 
	if(a==NULL)
	{
		*h=b;
		return;
	}
	if(b==NULL)
	{
		*h=a;
		return;
	}
	if(a-&gt;data &lt;= b-&gt;data)
	{
		*h=a;
		SortedMerge(&amp;((*h)-&gt;next),a-&gt;next,b);
	}
	else
	{	
		*h=b;
		SortedMerge(&amp;((*h)-&gt;next),a,b-&gt;next);
	}
}


/* sorts the linked list by changing next pointers (not data) */
void MergeSort(struct node** h)
{
	if(*h ==NULL || (*h)-&gt;next==NULL)
		return;
  struct node* slow=*h;
  struct node* fast=*h;
 
 
  /* Split head into 'a' and 'b' sublists */
  while(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next)
  {
	  slow=slow-&gt;next;
	  fast=fast-&gt;next;
  }
  struct node* h1=*h;
  struct node* h2=slow-&gt;next;
  slow-&gt;next=NULL;
  MergeSort(&amp;h1);
  MergeSort(&amp;h2);
 SortedMerge(h,h1,h2);
  /* answer = merge the two sorted lists together */
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-ramesh-mxian even thread-odd thread-alt depth-1" id="dsq-comment-17265">
        <div id="dsq-comment-header-17265" class="dsq-comment-header">
            <cite id="dsq-cite-17265">
                <span id="dsq-author-user-17265">Ramesh.Mxian</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17265" class="dsq-comment-body">
            <div id="dsq-comment-message-17265" class="dsq-comment-message"><p>I think we can count the number of elements in the list before starting the Merge start and pass the count also as a parameter to merge sort function.</p>
<p>This count can be used to split the list into two parts without having fast and slow pointers.</p>
<p>For example:</p>
<p>assume there are 10 elements in the list. So main function will<br />
call merge sort with MergeSort(Head,10).</p>
<p>We can easily split this list by finding<br />
mid = count/2; //10/2 =5<br />
then traverse the list 5 nodes to find the head of the second part and call merge as<br />
merge(head,mid)<br />
merge(secondHead,count-mid)</p>
<p>everything else will work as usuall</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-17209">
        <div id="dsq-comment-header-17209" class="dsq-comment-header">
            <cite id="dsq-cite-17209">
                <span id="dsq-author-user-17209">Priyanka</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17209" class="dsq-comment-body">
            <div id="dsq-comment-message-17209" class="dsq-comment-message"><pre> <code language="C">
I think it should be like this
/* Advance 'fast' two nodes, and advance 'slow' one node */
    while (fast != NULL)
    {
      fast = fast-&gt;next;
      if (fast_next != NULL)
      {
        slow = slow-&gt;next;
        fast = fast-&gt;next;
      }
    }
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-17225">
        <div id="dsq-comment-header-17225" class="dsq-comment-header">
            <cite id="dsq-cite-17225">
                <span id="dsq-author-user-17225">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17225" class="dsq-comment-body">
            <div id="dsq-comment-message-17225" class="dsq-comment-message"><p>@Priyanka: I think the code given is correct.  Any reason for this change? What is &#8216;fast_next&#8217; in your code?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-priyankasingh-136 odd alt depth-3" id="dsq-comment-17227">
        <div id="dsq-comment-header-17227" class="dsq-comment-header">
            <cite id="dsq-cite-17227">
                <span id="dsq-author-user-17227">priyankasingh.136</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17227" class="dsq-comment-body">
            <div id="dsq-comment-message-17227" class="dsq-comment-message"><p>Sorry, it&#8217;s fast-&gt; next not fast_next. if we check for  if (fast != NULL), slow will point<br />
to middle of the linked list. But as you said, slow should point to one node before the<br />
middle. So we should check for if (fast-&gt;next != NULL). Please let me know if it&#8217;s wrong.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10398">
        <div id="dsq-comment-header-10398" class="dsq-comment-header">
            <cite id="dsq-cite-10398">
                <span id="dsq-author-user-10398">vishanything</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10398" class="dsq-comment-body">
            <div id="dsq-comment-message-10398" class="dsq-comment-message"><p>Can&#8217;t we just store the addresses of each node in an array and then sort the whole thing on the basis of the data present in those addresses?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10128">
        <div id="dsq-comment-header-10128" class="dsq-comment-header">
            <cite id="dsq-cite-10128">
                <span id="dsq-author-user-10128">Ankit Gupta</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10128" class="dsq-comment-body">
            <div id="dsq-comment-message-10128" class="dsq-comment-message"><p>T(n) = T(n/2) + a * (n/2) + b * n<br />
Where a * (n/2) for computing mid-point (or partitioning) and b * n for merge step.<br />
So O(n log n)</p>
<p>Node mergeSort(Node head, Node rear) {<br />
    if (head == rear) {<br />
        head.next = null;<br />
        return head;<br />
    }<br />
    Node mid = getMidNode(head, rear);<br />
    Node right = mergeSort(mid.next, rear); // Compute right half first<br />
    Node left = mergeSort(head, mid); // Compute left<br />
    return mergeList(left, right);<br />
}</p>
<p>Node getMidNode(Node head, Node rear) {<br />
    Node it1, it2;<br />
    it1 = it2 = head;<br />
    while (it2 != rear &amp;&amp; it2.next != rear) {<br />
        it1 = it1.next;<br />
        it2 = it2.next.next;<br />
    }<br />
    return it1;<br />
}</p>
<p>Node mergeList(Node p, Node q) {<br />
    if (p == null)  return q;<br />
    if (q == null)  return p;</p>
<p>    Node N;<br />
    if (p.info &lt;= q.info) {<br />
        N = p;<br />
        N.next = mergeList(p.next, q);<br />
    } else {<br />
        N = q;<br />
        N.next = mergeList(p, q.next);<br />
    }<br />
    return N;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-29008">
        <div id="dsq-comment-header-29008" class="dsq-comment-header">
            <cite id="dsq-cite-29008">
                <span id="dsq-author-user-29008">chandeepsingh85</span>
            </cite>
        </div>
        <div id="dsq-comment-body-29008" class="dsq-comment-body">
            <div id="dsq-comment-message-29008" class="dsq-comment-message"><p>Could you please explain why here &#8221; while (it2 != rear &amp;&amp; it2.next != rear) &#8221;</p>
<p>&amp;&amp; is used? I am unable to grasp the logic.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10053">
        <div id="dsq-comment-header-10053" class="dsq-comment-header">
            <cite id="dsq-cite-10053">
                <span id="dsq-author-user-10053">Chiranjeev Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10053" class="dsq-comment-body">
            <div id="dsq-comment-message-10053" class="dsq-comment-message"><pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code)
// Selection Sort
#include&lt;stdio.h&gt;
typedef struct node
{
    int value;
    struct node *next;
}mynode;
void add(mynode **head,int data)
{
    mynode *temp = (mynode *)malloc(sizeof(struct node));
    temp-&gt;value = data;
    temp-&gt;next = NULL;
    mynode *t = *head;
    if(!t)
    {
        printf(&quot;..............Creating SLL.......\n&quot;);
        *head = temp;
        return;
    }
    temp-&gt;next = t;
    *head = temp;
}
int print(mynode *head)
{
    int c = 0;
    if(!head)
    {
        printf(&quot;Empty!\n&quot;);
        return 0;
    }
    printf(&quot;\n&quot;);
    while(head)
    {
        printf(&quot;%d  &quot;,head-&gt;value);
        c++;
        head = head-&gt;next;
    }
    printf(&quot;--|NULL|&quot;);
    return c;
}
int count(mynode *head)
{
    int c=0;
    if(!head) return 0;
    while(head)
    {
        head = head-&gt;next;
        c++;
    }
    return c;
}
void Selection_sort(mynode **head,int n)
{
    if(!(*head) || (*head)-&gt;next==NULL)
    {
        //printf(&quot;Empty!\n&quot;);
        return;
    }
    printf(&quot;\nSorted elements using selection sort are ::&quot;);
    mynode *p1,*p2,*p3,*p4,*t,*a;
    p1=*head;
    p2=p1-&gt;next;
    p3=p1;
    while(p1)
    {
        p2=p1-&gt;next;
        while(p2)
        {
            if(p1-&gt;value&gt;p2-&gt;value)
            {
                if(p1==*head &amp;&amp; p1-&gt;next==p2)   // starting node
                {
                    p1-&gt;next = p2-&gt;next;
                    p2-&gt;next = p1;
                    *head = p2;
                }
                else if(p1==*head &amp;&amp; p1-&gt;next != p2)
                {
                    t = p1-&gt;next;
                    p1-&gt;next = p2-&gt;next;
                    p2-&gt;next = t;
                    p4-&gt;next = p1;
                    *head = p2;
                }
                else if(p1 != *head &amp;&amp; p1-&gt;next==p2)
                {
                    p3-&gt;next = p2;
                    p1-&gt;next = p2-&gt;next;
                    p2-&gt;next = p1;
                }
                else
                {
                    p3-&gt;next = p2;
                    p4-&gt;next = p1;
                    t = p2-&gt;next;
                    p2-&gt;next = p1-&gt;next;
                    p1-&gt;next =t;
                }
                a=p1;p1=p2;p2=a;
            }
            p4=p2;
            p2 = p2-&gt;next;
            //print(*head);
        }
        p3=p1;
        p1 = p1-&gt;next;
    }

}
int main()
{
    int n=11,i;
    mynode *head=NULL;
    add(&amp;head,10);add(&amp;head,1);add(&amp;head,5);
    add(&amp;head,7);add(&amp;head,4);add(&amp;head,0);
    add(&amp;head,15);add(&amp;head,0);add(&amp;head,11);
    add(&amp;head,22);add(&amp;head,101);add(&amp;head,61);
    print(head);
    printf(&quot;\nNumber of elements is :: %d&quot;,count(head));
    Selection_sort(&amp;head,count(head));
    print(head);
    printf(&quot;\n\n\n&quot;);
}
 */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-5789">
        <div id="dsq-comment-header-5789" class="dsq-comment-header">
            <cite id="dsq-cite-5789">
                <span id="dsq-author-user-5789">Rushi Agrawal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5789" class="dsq-comment-body">
            <div id="dsq-comment-message-5789" class="dsq-comment-message"><p>Great code. Very lucid. Would have been better had an explanation on the use of pointers to pointers was given.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5379">
        <div id="dsq-comment-header-5379" class="dsq-comment-header">
            <cite id="dsq-cite-5379">
                <span id="dsq-author-user-5379">tuhin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5379" class="dsq-comment-body">
            <div id="dsq-comment-message-5379" class="dsq-comment-message"><p>i just wished to know if it meant insitu merging</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-rka143 even thread-even depth-1" id="dsq-comment-2943">
        <div id="dsq-comment-header-2943" class="dsq-comment-header">
            <cite id="dsq-cite-2943">
                <span id="dsq-author-user-2943">rka143</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2943" class="dsq-comment-body">
            <div id="dsq-comment-message-2943" class="dsq-comment-message"><p>I believe in solution 1 should have following condition in place of written one:<br />
Now:<br />
if (fast != NULL)       {         slow = slow-&gt;next;         fast = fast-&gt;next;       }<br />
Correct:<br />
if (fast != NULL &amp;&amp; fast-&gt;next != NULL)       {         slow = slow-&gt;next;         fast = fast-&gt;next;       } </p>
<p>Reason:<br />
In the case of 2 nodes, it will continue to split the list in infinite loop. Where one part is NULL and other part has 2 nodes.</p>
<p>Please let me know if somebody have differnet thought or need more clarification.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-trinadh odd alt thread-odd thread-alt depth-1" id="dsq-comment-2307">
        <div id="dsq-comment-header-2307" class="dsq-comment-header">
            <cite id="dsq-cite-2307">
                <span id="dsq-author-user-2307">trinadh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2307" class="dsq-comment-body">
            <div id="dsq-comment-message-2307" class="dsq-comment-message"><p>How about this?</p>
<pre> <code language="C">
/* Merge two sorted linked lists */
Node * merge(Node *first, Node *second) {
    Node head; //dummy Node which points to merged list
    Node *last_sorted = &amp;head; //points to last Node of sorted list

    while (first != NULL &amp;&amp; second != NULL) {
        if (first-&gt;data &lt; second-&gt;data) {
            last_sorted-&gt;next = first;
            last_sorted = first;
            first = first-&gt;next;
        }
        else {
            last_sorted-&gt;next = second;
            last_sorted = second;
            second = second-&gt;next;
        }
    }

    if (first == NULL)
        last_sorted-&gt;next = second;
    else
        last_sorted-&gt;next = first;

    return head.next;
}

/* Get the head node of the splitted linked-list */
Node * get_midPoint(Node *cur) {
    Node *mid_pt = cur;
    Node *itr = cur;

    if (cur == NULL || cur-&gt;next == NULL)
        return NULL;

    /*
     * when there are only 2 elements in the list, there will be a dead-lock.
     * Avoid that
     */
    if (cur-&gt;next-&gt;next == NULL) {
        mid_pt = cur-&gt;next;
        cur-&gt;next = NULL;
        return mid_pt;
    }

    while (cur != NULL &amp;&amp; cur-&gt;next != NULL) {
        itr = itr-&gt;next;
        cur = cur-&gt;next-&gt;next;
    }

    mid_pt = itr-&gt;next;
    itr-&gt;next = NULL;

    return mid_pt;
}

void merge_sort(Node *&amp;cur) {
    Node* middle = get_midPoint(cur);

    if (cur != NULL &amp;&amp; cur-&gt;next != NULL)
        merge_sort(cur);
    if (middle != NULL &amp;&amp; middle-&gt;next != NULL)
        merge_sort(middle);

    cur = merge(cur, middle);
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-5800">
        <div id="dsq-comment-header-5800" class="dsq-comment-header">
            <cite id="dsq-cite-5800">
                <span id="dsq-author-user-5800">Richa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5800" class="dsq-comment-body">
            <div id="dsq-comment-message-5800" class="dsq-comment-message"><p>Thanks for the flawless code. Very simple and easily understandable. Thanks a lot.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-6347">
        <div id="dsq-comment-header-6347" class="dsq-comment-header">
            <cite id="dsq-cite-6347">
                <span id="dsq-author-user-6347">Ken</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6347" class="dsq-comment-body">
            <div id="dsq-comment-message-6347" class="dsq-comment-message"><pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
<p>                 Is there a way to get the two lists out of this code? for instance the values on either side of mid_pt seperated into 2 lists?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-6352">
        <div id="dsq-comment-header-6352" class="dsq-comment-header">
            <cite id="dsq-cite-6352">
                <span id="dsq-author-user-6352">Trinadh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6352" class="dsq-comment-body">
            <div id="dsq-comment-message-6352" class="dsq-comment-message"><p>Ken,</p>
<p>You can get two separate lists which are sorted.</p>
<p>But it is not guaranteed that the over-all list is sorted.</p>
<p>For ex:<br />
If you give the following list for sorting:<br />
32&#8211;&gt;3&#8211;&gt;13&#8211;&gt;93&#8211;&gt;21&#8211;&gt;66&#8211;&gt;87&#8211;&gt;46&#8211;&gt;50&#8211;&gt;1&#8211;&gt;NULL</p>
<p>You will get the following 2 lists.</p>
<p>#1  3&#8211;&gt;13&#8211;&gt;21&#8211;&gt;32&#8211;&gt;66&#8211;&gt;93&#8211;&gt;NULL (sorted)<br />
#2  1&#8211;&gt;46&#8211;&gt;50&#8211;&gt;87&#8211;&gt;NULL (sorted)</p>
<p>The above 2 lists are merged </p>
<pre class="brush: plain; title: ; notranslate" title="">cur = merge(cur, middle);</pre>
<p>.</p>
<p>May be you can use some control variable (static bool) to get the above lists</p>
<p>In case you are expecting the following:<br />
(splitting the completely sorted-list)<br />
#1  1&#8211;&gt;3&#8211;&gt;13&#8211;&gt;21&#8211;&gt;32&#8211;&gt;46&#8211;&gt;NULL<br />
#2  50&#8211;&gt;66&#8211;&gt;87&#8211;&gt;93&#8211;&gt;NULL<br />
You need to write your own functionality.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-21045">
        <div id="dsq-comment-header-21045" class="dsq-comment-header">
            <cite id="dsq-cite-21045">
                <span id="dsq-author-user-21045">gantashala venki</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21045" class="dsq-comment-body">
            <div id="dsq-comment-message-21045" class="dsq-comment-message"><p>trinadh i think ur merge function is better because it avoids recursion in merge function&#8230;.which will prevent stack over flow in the case of large data.:)</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-2135">
        <div id="dsq-comment-header-2135" class="dsq-comment-header">
            <cite id="dsq-cite-2135">
                <span id="dsq-author-user-2135">gagan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2135" class="dsq-comment-body">
            <div id="dsq-comment-message-2135" class="dsq-comment-message"><p>in the SortMerge function there will be replication of data in the merged list if the lists a and b contains similar values</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-tech-login-id2 odd alt thread-odd thread-alt depth-1" id="dsq-comment-2001">
        <div id="dsq-comment-header-2001" class="dsq-comment-header">
            <cite id="dsq-cite-2001">
                <span id="dsq-author-user-2001">tech.login.id2</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2001" class="dsq-comment-body">
            <div id="dsq-comment-message-2001" class="dsq-comment-message"><p>I think SortedMerge should also take a parameter length so that it merges only the sorted parts.<br />
For example, at the leaf-1 level of recursion, SortedMerge is expected to merge only two nodes.<br />
But it is merging all the way upto NULL which is incorrect (and can even lead to infinite loops).</p>
<p>A non-recursive version of SortedMerge is as follows:</p>
<pre> <code language="C">
struct node* SortedMerge(struct node* a, struct node* b, int count)
{
    struct node *head = null;
    struct node *prev = null;
    int c1 = count;
    int c2 = count;

    while (c1 &amp;&amp; c2 &amp;&amp; a &amp;&amp; b) {
        if (a &amp;&amp; a-&gt;data data &amp;&amp; c1) {
            while (a &amp;&amp; a-&gt;data data &amp;&amp; c1) {
                if (!head) head = a;
                prev = a;
                a = a-&gt;next;
                c1--;
            }
            prev-&gt;next = b;
        }
        if (b &amp;&amp; b-&gt;data data &amp;&amp; c2) {
            while (b &amp;&amp; b-&gt;data data &amp;&amp; c2) {
                if (!head) head = b;
                prev = b;
                b = b-&gt;next;
                c2--;
            }
            prev-&gt;next = a;
        }
    }
    return head;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-1928">
        <div id="dsq-comment-header-1928" class="dsq-comment-header">
            <cite id="dsq-cite-1928">
                <span id="dsq-author-user-1928">Ankul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1928" class="dsq-comment-body">
            <div id="dsq-comment-message-1928" class="dsq-comment-message"><p>This solution is O(n^2logn) for sure.. each time for partitioning the linked list, we are iterating over the list in O(n)&#8230;</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-shekhu odd alt depth-2" id="dsq-comment-1933">
        <div id="dsq-comment-header-1933" class="dsq-comment-header">
            <cite id="dsq-cite-1933">
                <span id="dsq-author-user-1933">Shekhu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1933" class="dsq-comment-body">
            <div id="dsq-comment-message-1933" class="dsq-comment-message"><p>I think it is O(nLogn) only. </p>
<p>In this case the recurrence relation is.</p>
<p>T(n) = T(n/2) + an + bn</p>
<p>an &#8211;&gt; For partitioning<br />
bn &#8211;&gt; For merging.</p>
<p>So overall the relation becomes</p>
<p>T(n) = T(n/2) + O(n) </p>
<p>which is noting but O(nLogn)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kp101090 even depth-3" id="dsq-comment-2291">
        <div id="dsq-comment-header-2291" class="dsq-comment-header">
            <cite id="dsq-cite-2291">
                <span id="dsq-author-user-2291">kp101090</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2291" class="dsq-comment-body">
            <div id="dsq-comment-message-2291" class="dsq-comment-message"><p>@Shekhu and All<br />
I am somewhat good in coding..i think i understand all other phenomenas of coding&#8230;but i really never understood the concept of complexity..and never understood steps to be followed to calculate the complexity of given program..can you pls suggest me some good books to be read so that my basic concepts of time and space complexity would be clear??? any online tutorial would be most welcome&#8230;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-2669">
        <div id="dsq-comment-header-2669" class="dsq-comment-header">
            <cite id="dsq-cite-2669">
                <span id="dsq-author-user-2669">Shri</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2669" class="dsq-comment-body">
            <div id="dsq-comment-message-2669" class="dsq-comment-message"><p>I think the recurrence relation is </p>
<p>T(n) = T(n/2) + an + T(n/2)</p>
<p>an &#8211;&gt; for merging<br />
T(n/2) &#8211;&gt; for partitioning. </p>
<p>If you look closely you are calling partition each time you call merge sort. And in partition you traverse link list almost 3n/2 times.</p>
<p>Shri</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-rahul-jainz even thread-odd thread-alt depth-1" id="dsq-comment-1924">
        <div id="dsq-comment-header-1924" class="dsq-comment-header">
            <cite id="dsq-cite-1924">
                <span id="dsq-author-user-1924">rahul.jainz</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1924" class="dsq-comment-body">
            <div id="dsq-comment-message-1924" class="dsq-comment-message"><p>I think its complexity should be o(n^2) instead of nlogn, as the division/splitting of link list is itself an o(n) operation, rather than o(1) as in arrays ?????</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-1286">
        <div id="dsq-comment-header-1286" class="dsq-comment-header">
            <cite id="dsq-cite-1286">
                <span id="dsq-author-user-1286">Anunay</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1286" class="dsq-comment-body">
            <div id="dsq-comment-message-1286" class="dsq-comment-message"><p>Wouldn&#8217;t Insertion Sort be a better way to sort the linked list? Following is C# code </p>
<pre> <code language="Java">
public void SortLinkList(Node headReference)
{
    Node curr = headReference;

    Node result = null;
    Node temp = null;
    while (curr != null)
    {
        temp = curr;
        curr = curr.Next;
        temp.Next = null;
        insertSorted(ref result, temp);
    }
    headReference = result;
}
        
public void insertSorted(ref Node head, Node node)
{
    Node curr = head;

    //insertion at front
    if (head == null || node.Value  node.Value)
        {
            node.Next = curr.Next;
            curr.Next = node;
            break;
        }

        curr = curr.Next;
    }

    // Insertion at the end
    if (curr.Next == null)
    {
        curr.Next = node;
    }
}
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-1288">
        <div id="dsq-comment-header-1288" class="dsq-comment-header">
            <cite id="dsq-cite-1288">
                <span id="dsq-author-user-1288">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1288" class="dsq-comment-body">
            <div id="dsq-comment-message-1288" class="dsq-comment-message"><p>Insertion sort can be better for linked lists compared to arrays as we don&#8217;t have to move elements in Linked list, but when compared to Merge Sort, Merge Sort is definitely better as time complexity of Insertion Sort is O(n*n) and time complexity of Merge Sort is O(nLogn)</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-10055">
        <div id="dsq-comment-header-10055" class="dsq-comment-header">
            <cite id="dsq-cite-10055">
                <span id="dsq-author-user-10055">Chiranjeev Kumar</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10055" class="dsq-comment-body">
            <div id="dsq-comment-message-10055" class="dsq-comment-message"><p>Time complexity of merge sort is n^2 in case of linked list.<br />
Don&#8217;t make a blunder <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" /></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-4" id="dsq-comment-10057">
        <div id="dsq-comment-header-10057" class="dsq-comment-header">
            <cite id="dsq-cite-10057">
                <span id="dsq-author-user-10057">kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10057" class="dsq-comment-body">
            <div id="dsq-comment-message-10057" class="dsq-comment-message"><p>Time complexity of merge sort for linked list is O(nLogn).<br />
See <a href="http://en.wikipedia.org/wiki/Merge_sort#Comparison_with_other_sort_algorithms" rel="nofollow">this</a> for reference.</p>
<p>Merging two sorted linked lists of size n/2 takes O(n) time.  So recursion for time complexity for linked list is same as arrays.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/merge-sort-for-linked-list/';
var disqus_identifier = '7740 http://geeksforgeeks.org/?p=7740';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Merge Sort for Linked Lists";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPlain.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.207 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:28:23 -->

<!-- Compression = gzip -->
<!-- super cache -->