<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
       <title>Write C Code to Determine if Two Trees are Identical - GeeksforGeeks</title>
       <style type="text/css" media="screen">
          @import url('http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/style.css');
    </style>
      <link href="http://d2o58evtke57tz.cloudfront.net/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon" />    
    
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.geeksforgeeks.org/write-c-code-to-determine-if-two-trees-are-identical/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Write C Code to Determine if Two Trees are Identical - GeeksforGeeks" />
<meta property="og:description" content="Two trees are identical when they have same data and arrangement of data is also same. To identify if two trees are identical, we need to traverse both trees simultaneously, and while traversing we need to compare data and children of the trees. Algorithm: sameTree(tree1, tree2) 1. If both trees are empty then return 1. &hellip;" />
<meta property="og:url" content="http://www.geeksforgeeks.org/write-c-code-to-determine-if-two-trees-are-identical/" />
<meta property="og:site_name" content="GeeksforGeeks" />
<meta property="article:tag" content="Tree Traveral" />
<meta property="article:tag" content="Trees" />
<meta property="article:section" content="Trees" />
<meta property="article:published_time" content="2009-06-26T14:54:46+00:00" />
<meta property="article:modified_time" content="2013-08-29T09:32:05+00:00" />
<meta property="og:updated_time" content="2013-08-29T09:32:05+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=4.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='bbp-default-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.5.4-5380' type='text/css' media='screen' />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/wp-quicklatex/js/wp-quicklatex-frontend.js?ver=1.0'></script>

<!-- Bad Behavior 2.2.16 run time: 1.506 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1417111159 210.212.53.139 172.19.11.169';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css" id="syntaxhighlighteranchor"></style>
   <meta name="google-site-verification" content="rHK2v8_zzuAZQY8JHAzbllDN8u-aQxcn2Kqnp67Old0" />
</head>

<body>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p>  <h2 align="right"> <a href="http://geeksquiz.com/">GeeksQuiz</a></h2> 
   <a href="http://www.geeksforgeeks.org/wp-login.php">Login</a> 
         </p></b>  
         
         <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
 <li><a href="http://www.geeksforgeeks.org">Home</a></li>
  <li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
 <li><a href="http://www.geeksforgeeks.org/data-structures/">DS</a></li>
  <li><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Corner</a></li>
  <li><a href="http://www.geeksforgeeks.org/forums/">Q&A</a></li>
  <li><a href="http://www.geeksforgeeks.org/c/">C</a></li>
  <li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
  <li><a href="http://www.geeksforgeeks.org/java/">Java</a></li>
  <li><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
  <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a Q</a></li>
  <li><a href="http://www.geeksforgeeks.org/about/">About</a></li>
            </ul>

               
            <div class="clear"></div>     
        </div>
             <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays/" title="Questions regarding Arrays">Array</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic/" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles/" title="View all posts filed under C/C++ Puzzles">C/C++</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles/" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact/" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list/" title="Linked List problems">Linked List</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs/" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output/" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings/" title="Questions related to strings">String</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree/" title="View all posts filed under Trees">Tree</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/graph/" title="View all posts filed under Graph">Graph</a>
</li>
</ul>
        </div>
             <div id="content">	   	
	<div class="post" id="post">
							<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Write C Code to Determine if Two Trees are Identical</h2>
					</div>			
					<div class="clear"></div>				  
				<div class="post-content" id="post-content">
					<p>Two trees are identical when they have same data and arrangement of data is also same.<br />
<span id="more-642"></span></p>
<p>To identify if two trees are identical, we need to traverse both trees simultaneously, and while traversing we need to compare data and children of the trees.  </p>
<p><strong>Algorithm:</strong></p>
<pre>
sameTree(tree1, tree2)
1. If both trees are empty then return 1.
2. Else If both trees are non -empty
     (a) Check data of the root nodes (tree1->data ==  tree2->data)
     (b) Check left subtrees recursively  i.e., call sameTree( 
          tree1->left_subtree, tree2->left_subtree)
     (c) Check right subtrees recursively  i.e., call sameTree( 
          tree1->right_subtree, tree2->right_subtree)
     (d) If a,b and c are true then return 1.
3  Else return 0 (one is empty and other is not)
</pre>
<pre class="brush: cpp; highlight: [26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
    struct node* node = (struct node*)
                             malloc(sizeof(struct node));
    node-&gt;data  = data;
    node-&gt;left  = NULL;
    node-&gt;right = NULL;

    return(node);
}

/* Given two trees, return true if they are
 structurally identical */
int identicalTrees(struct node* a, struct node* b)
{
    /*1. both empty */
    if (a==NULL &amp;&amp; b==NULL)
        return 1;

    /* 2. both non-empty -&gt; compare them */
    if (a!=NULL &amp;&amp; b!=NULL)
    {
        return
        (
            a-&gt;data == b-&gt;data &amp;&amp;
            identicalTrees(a-&gt;left, b-&gt;left) &amp;&amp;
            identicalTrees(a-&gt;right, b-&gt;right)
        );
    }
    
    /* 3. one empty, one not -&gt; false */
    return 0;
} 

/* Driver program to test identicalTrees function*/
int main()
{
    struct node *root1 = newNode(1);
    struct node *root2 = newNode(1);
    root1-&gt;left = newNode(2);
    root1-&gt;right = newNode(3);
    root1-&gt;left-&gt;left  = newNode(4);
    root1-&gt;left-&gt;right = newNode(5); 

    root2-&gt;left = newNode(2);
    root2-&gt;right = newNode(3);
    root2-&gt;left-&gt;left = newNode(4);
    root2-&gt;left-&gt;right = newNode(5); 

    if(identicalTrees(root1, root2))
        printf(&quot;Both tree are identical.&quot;);
    else
        printf(&quot;Trees are not identical.&quot;);

    getchar();
  return 0;
}

</pre>
<p><strong>Time Complexity:</strong><br />
Complexity of the identicalTree() will be according to the tree with lesser number of nodes. Let number of nodes in two trees be m and n then complexity of sameTree() is O(m)  where m < n.</p>
		
&nbsp;
&nbsp;
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



&nbsp;
&nbsp;
&nbsp;
<h3>Related Topics:</h3><ul><li><a href="http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/" title="Perfect Binary Tree Specific Level Order Traversal">Perfect Binary Tree Specific Level Order Traversal</a></li><li><a href="http://www.geeksforgeeks.org/print-nodes-top-view-binary-tree/" title="Print Nodes in Top View of Binary Tree">Print Nodes in Top View of Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/k-dimensional-tree/" title="K Dimensional Tree">K Dimensional Tree</a></li><li><a href="http://www.geeksforgeeks.org/convert-binary-tree-threaded-binary-tree/" title="Convert a Binary Tree to Threaded binary tree">Convert a Binary Tree to Threaded binary tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-n-ary-tree/" title="Serialize and Deserialize an N-ary Tree">Serialize and Deserialize an N-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/" title="Serialize and Deserialize a Binary Tree">Serialize and Deserialize a Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/" title="Print nodes between two given level numbers of a binary tree">Print nodes between two given level numbers of a binary tree</a></li><li><a href="http://www.geeksforgeeks.org/find-height-binary-tree-represented-parent-array/" title="Find Height of Binary Tree represented by Parent array">Find Height of Binary Tree represented by Parent array</a></li></ul>
<p>Tags: <a href="http://www.geeksforgeeks.org/tag/tree-traveral/" rel="tag">Tree Traveral</a>, <a href="http://www.geeksforgeeks.org/tag/tree/" rel="tag">Trees</a></p> 
<div>
<iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.geeksforgeeks.org%2Fwrite-c-code-to-determine-if-two-trees-are-identical%2F&layout=button_count&show_faces=false&width=90&action=like&colorscheme=light" scrolling="no" frameborder="0" allowTransparency="true" style="border:none; overflow:hidden; width:90px; height:20px"></iframe>
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.geeksforgeeks.org/write-c-code-to-determine-if-two-trees-are-identical/" data-text="Write C Code to Determine if Two Trees are Identical" data-count="horizontal" data-via="jakerutter">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<g:plusone size="medium" href="http://www.geeksforgeeks.org/write-c-code-to-determine-if-two-trees-are-identical/"></g:plusone>
<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></div>





				</div>		  
			</div> <!-- end post main -->					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>			
        
			<div class="comments-main">		
 <b>Writing code in comment?</b> Please use <b><a href="http://ideone.com/">ideone.com</a></b> and share the link here.
				
<div id="disqus_thread">
            <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-31544">
        <div id="dsq-comment-header-31544" class="dsq-comment-header">
            <cite id="dsq-cite-31544">
                <span id="dsq-author-user-31544">neelabhsingh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31544" class="dsq-comment-body">
            <div id="dsq-comment-message-31544" class="dsq-comment-message"><p>Please noted it down following condition is essential when you are comparing<br />
nonidentical trees. It will compares nodes only if they are non null. So following is required to avoid segmentation fault in C and NULL Pointer Exception in Java.<br />
If you are comparing the Identical you will not required the following conditions.<br />
/* 2. both non-empty -&gt; compare them */<br />
    if (a!=NULL &amp;&amp; b!=NULL)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30648">
        <div id="dsq-comment-header-30648" class="dsq-comment-header">
            <cite id="dsq-cite-30648">
                <span id="dsq-author-user-30648">Uma Trika</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30648" class="dsq-comment-body">
            <div id="dsq-comment-message-30648" class="dsq-comment-message"><p>int identicalTrees(struct node* a, struct node* b)<br />
{<br />
    if(a== NULL &amp;&amp; b == NULL)<br />
        return 1;<br />
    if ((a==NULL &amp;&amp; b!=NULL) || (a!=NULL &amp;&amp; b==NULL))<br />
        return 0;</p>
<p>    if(a-&gt;data != b-&gt;data)<br />
        return 0;<br />
    identicalTrees(a-&gt;left, b-&gt;left);<br />
    identicalTrees(a-&gt;right, b-&gt;right);</p>
<p>}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-33180">
        <div id="dsq-comment-header-33180" class="dsq-comment-header">
            <cite id="dsq-cite-33180">
                <span id="dsq-author-user-33180">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33180" class="dsq-comment-body">
            <div id="dsq-comment-message-33180" class="dsq-comment-message"><p>Your code doesnt work in case the 2 trees dont have identical data because the value returned by recursive call to the left and right subtree has not been stored anywhere and not reflected in the final result</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-33181">
        <div id="dsq-comment-header-33181" class="dsq-comment-header">
            <cite id="dsq-cite-33181">
                <span id="dsq-author-user-33181">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33181" class="dsq-comment-body">
            <div id="dsq-comment-message-33181" class="dsq-comment-message"><p>i think the corection to be made is</p>
<p>int identicalTrees(struct node* a, struct node* b)</p>
<p>{</p>
<p>if(a== NULL &amp;&amp; b == NULL)</p>
<p>return 1;</p>
<p>if ((a==NULL &amp;&amp; b!=NULL) || (a!=NULL &amp;&amp; b==NULL))</p>
<p>return 0;</p>
<p>if(a-&gt;data != b-&gt;data)</p>
<p>return 0;</p>
<p>return identicalTrees(a-&gt;left, b-&gt;left)&amp;&amp;identicalTrees(a-&gt;right, b-&gt;right);</p>
<p>}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-27111">
        <div id="dsq-comment-header-27111" class="dsq-comment-header">
            <cite id="dsq-cite-27111">
                <span id="dsq-author-user-27111">gaurav</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27111" class="dsq-comment-body">
            <div id="dsq-comment-message-27111" class="dsq-comment-message"><p>Won&#8217;t a level order traversal be sufficient to check the identical arrangement and data.  Please correct me if I&#8217;m wrong.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-27113">
        <div id="dsq-comment-header-27113" class="dsq-comment-header">
            <cite id="dsq-cite-27113">
                <span id="dsq-author-user-27113">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27113" class="dsq-comment-body">
            <div id="dsq-comment-message-27113" class="dsq-comment-message"><p>There can be many ways to solve a problem.  You can do it using level order traversal also, but the code may turn out to be more complex than simple recursive code.  Time Complexity wise, both are O(n) and both need O(n) extra space.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-27114">
        <div id="dsq-comment-header-27114" class="dsq-comment-header">
            <cite id="dsq-cite-27114">
                <span id="dsq-author-user-27114">Kartik</span>
            </cite>
        </div>
        <div id="dsq-comment-body-27114" class="dsq-comment-body">
            <div id="dsq-comment-message-27114" class="dsq-comment-message"><p>There can be many ways to solve a problem.  You can do it using level order traversal also, but the code may turn out to be more complex than simple recursive code.  Time Complexity wise, both are O(n) and both need O(n) extra space.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-28545">
        <div id="dsq-comment-header-28545" class="dsq-comment-header">
            <cite id="dsq-cite-28545">
                <span id="dsq-author-user-28545">pavansrinivas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-28545" class="dsq-comment-body">
            <div id="dsq-comment-message-28545" class="dsq-comment-message"><p>Using LevelOrder Traversal in JAVA</p>
<p><code></p>
<p>    boolean areIdentical(Node r1,Node r2){<br />
        Node temp = r1;<br />
        Node temp2 = r2;<br />
        Queue q = new LinkedList();<br />
        Queue q2 = new LinkedList();<br />
        q.add(temp);<br />
        q2.add(r2);<br />
        while (!q.isEmpty()&amp;&amp;!q2.isEmpty()) {<br />
            temp = q.remove();<br />
            temp2 = q2.remove();</p>
<p>            if((temp==null&amp;&amp;temp2!=null)||(temp!=null&amp;&amp;temp2==null)){<br />
                return false;<br />
            }<br />
            if(temp!=null&amp;&amp;temp2!=null){<br />
                if(temp.iData!=temp2.iData){<br />
                    return false;<br />
                }<br />
            }</p>
<p>            if(temp!=null){<br />
                    q.add(temp.leftChild);<br />
                    q.add(temp.rightChild);<br />
            }<br />
            if(temp2!=null){<br />
                q2.add(temp2.leftChild);<br />
                q2.add(temp2.rightChild);<br />
        }</p>
<p>    }<br />
        if(!q.isEmpty()||!q2.isEmpty()){<br />
            return false;<br />
        }else{<br />
            return true;<br />
        }<br />
    }</code></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-30550">
        <div id="dsq-comment-header-30550" class="dsq-comment-header">
            <cite id="dsq-cite-30550">
                <span id="dsq-author-user-30550">Anonymous</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30550" class="dsq-comment-body">
            <div id="dsq-comment-message-30550" class="dsq-comment-message"><p>i think , level order traversal will not work because two different trees may produce same output when traversed in Level order.</p>
<p>For example: &#8211; below tree will process node in same order so your code wil return true saying that both trees are same..</p>
<p>a)<br />
      1<br />
     /<br />
   2<br />
 /<br />
3 </p>
<p>b)</p>
<p>    1</p>
<p>        2</p>
<p>           3<br />
please correct me if i misunderstood your approach.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-30573">
        <div id="dsq-comment-header-30573" class="dsq-comment-header">
            <cite id="dsq-cite-30573">
                <span id="dsq-author-user-30573">pavansrinivas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30573" class="dsq-comment-body">
            <div id="dsq-comment-message-30573" class="dsq-comment-message"><p>My approach gives the correct result.I used 2 queues one for first tree and the other for second tree..I simultaneously travel the 2 trees and if I find null in one queue and not null in second or vice-verse I return false..<br />
In your condition , first root is entered in first queue and second root in second queue, then both the left child are added..when popped,node in first queue is not null but that in the second queue is null, so it returns false&#8230;.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-abhishek08aug even thread-odd thread-alt depth-1" id="dsq-comment-18034">
        <div id="dsq-comment-header-18034" class="dsq-comment-header">
            <cite id="dsq-cite-18034">
                <span id="dsq-author-user-18034">abhishek08aug</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18034" class="dsq-comment-body">
            <div id="dsq-comment-message-18034" class="dsq-comment-message"><p>C++ code: extended from my earlier code in: <a href="http://www.geeksforgeeks.org/write-a-c-program-to-calculate-size-of-a-tree/" rel="nofollow">http://www.geeksforgeeks.org/write-a-c-program-to-calculate-size-of-a-tree/</a></p>
<pre> <code language="C">
#include&lt;iostream&gt;
using namespace std;
 
class tree_node {
  private:
    int data;
    tree_node * left;
    tree_node * right;
  public:
    tree_node() {
      left=NULL;
      right=NULL;
    }
    void set_data(int data) {
      this-&gt;data=data;
    }
    int get_data() {
      return this-&gt;data;
    }
    void set_left(tree_node * left) {
      this-&gt;left=left;
    }
    tree_node * get_left() {
      return this-&gt;left;
    }
    void set_right(tree_node * right) {
      this-&gt;right=right;
    }
    tree_node * get_right() {
      return this-&gt;right;
    }
    tree_node ** get_left_ref() {
      return &amp;(this-&gt;left);
    }
    tree_node ** get_right_ref() {
      return &amp;(this-&gt;right);
    }
};
 
class tree {
  private:
    tree_node * root;
    int size;
    void _recursive_insert(tree_node ** root_ref, int value);
    void _print_preorder(tree_node * root);
    void _print_inorder(tree_node * root);
    void _print_postorder(tree_node * root);
    int _find_size(tree_node * root);
    int _are_identical(tree_node * tn1, tree_node * tn2);
  public:
    tree() {
      root=NULL;
      size=0;
    }
    void insert(int value);
    void recursive_insert(int value);
    void print_preorder();
    void print_inorder();
    void print_postorder();
    int find_size();
    int get_size() {
      return this-&gt;size;
    }
    int are_identical(tree t);
};
 
void tree::insert(int value) {
  if(root==NULL) {
    root=new tree_node;
    root-&gt;set_data(value);
  } else {
    tree_node * parent=NULL;
    tree_node * current=root;
    tree_node * new_node=new tree_node;
    new_node-&gt;set_data(value);
    while(current!=NULL) {
      if(value&lt;=current-&gt;get_data()) {
        parent=current;
        current=current-&gt;get_left();
      } else {
        parent=current;
        current=current-&gt;get_right();
      }
    }
    if(value&lt;=parent-&gt;get_data() &amp;&amp; parent-&gt;get_left()==NULL) {
      parent-&gt;set_left(new_node);
    } else if(value&gt;parent-&gt;get_data() &amp;&amp; parent-&gt;get_right()==NULL) {
      parent-&gt;set_right(new_node);
    }
  }
  size++;
}
 
void tree::recursive_insert(int value) {
  _recursive_insert(&amp;root, value);
  size++;
}
 
void tree::_recursive_insert(tree_node ** root_ref, int value) {
  if(*root_ref==NULL) {
    tree_node * new_node=new tree_node;
    new_node-&gt;set_data(value);
    *root_ref=new_node;   
  } else {
    if(value&lt;=(*root_ref)-&gt;get_data()) {
      _recursive_insert((*root_ref)-&gt;get_left_ref(), value);
    } else {
      _recursive_insert((*root_ref)-&gt;get_right_ref(), value);
    }
  }
}
 
void tree::print_preorder() {
  if(root==NULL) {
    return;
  }
  _print_preorder(root);
  cout&lt;&lt;endl;
}
 
void tree::_print_preorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
  if(root-&gt;get_left()!=NULL)
    _print_preorder(root-&gt;get_left());
  if(root-&gt;get_right()!=NULL)
    _print_preorder(root-&gt;get_right());
}
 
void tree::print_inorder() {
  if(root==NULL) {
    return;
  }
  _print_inorder(root);
  cout&lt;&lt;endl;
}
 
void tree::_print_inorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root-&gt;get_left()!=NULL)
    _print_inorder(root-&gt;get_left());
  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
  if(root-&gt;get_right()!=NULL)
    _print_inorder(root-&gt;get_right());
}
 
void tree::print_postorder() {
  if(root==NULL) {
    return;
  }
  _print_postorder(root);
  cout&lt;&lt;endl;
}
 
void tree::_print_postorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root-&gt;get_left()!=NULL)
    _print_postorder(root-&gt;get_left());
  if(root-&gt;get_right()!=NULL)
    _print_postorder(root-&gt;get_right());
  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;
}

int tree::find_size() {
  return _find_size(root);
}

int tree::_find_size(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return 1+_find_size(root-&gt;get_left())+_find_size(root-&gt;get_right());
  }
}

int tree::are_identical(tree t) {
  return _are_identical(this-&gt;root, t.root);
}

int tree::_are_identical(tree_node * tn1, tree_node * tn2) {
  if(tn1==NULL &amp;&amp; tn2==NULL) {
    return 1;
  } else if((tn1==NULL &amp;&amp; tn2!=NULL) || (tn1!=NULL &amp;&amp; tn2==NULL) || (tn1-&gt;get_data()!=tn2-&gt;get_data())) {
    return 0;
  } else {
    return _are_identical(tn1-&gt;get_left(), tn2-&gt;get_left()) &amp;&amp; _are_identical(tn1-&gt;get_right(), tn2-&gt;get_right());
  }
}

int main() {
  tree t1;
  t1.recursive_insert(5);
  t1.recursive_insert(3);
  t1.insert(1);
  t1.insert(7);
  t1.recursive_insert(50);
  t1.recursive_insert(6);
  cout&lt;&lt;&quot;Preorder Traversal&quot;&lt;&lt;endl;
  t1.print_preorder();
  cout&lt;&lt;&quot;Inorder Traversal&quot;&lt;&lt;endl;
  t1.print_inorder();
  cout&lt;&lt;&quot;Postorder Traversal&quot;&lt;&lt;endl;
  t1.print_postorder();
  cout&lt;&lt;&quot;Size of the tree (as stored in tree object) is: &quot;&lt;&lt;t1.get_size()&lt;&lt;endl;
  cout&lt;&lt;&quot;Size of the tree is: &quot;&lt;&lt;t1.find_size()&lt;&lt;endl;
  tree t2;
  t2.recursive_insert(5);
  t2.recursive_insert(3);
  t2.insert(1);
  t2.insert(7);
  t2.recursive_insert(50);
  t2.recursive_insert(6);
  cout&lt;&lt;&quot;Preorder Traversal&quot;&lt;&lt;endl;
  t2.print_preorder();
  cout&lt;&lt;&quot;Inorder Traversal&quot;&lt;&lt;endl;
  t2.print_inorder();
  cout&lt;&lt;&quot;Postorder Traversal&quot;&lt;&lt;endl;
  t2.print_postorder();
  cout&lt;&lt;&quot;Size of the tree (as stored in tree object) is: &quot;&lt;&lt;t2.get_size()&lt;&lt;endl;
  cout&lt;&lt;&quot;Size of the tree is: &quot;&lt;&lt;t2.find_size()&lt;&lt;endl;
  if(t1.are_identical(t2)) {
    cout&lt;&lt;&quot;Trees are identical&quot;&lt;&lt;endl;
  } else {
    cout&lt;&lt;&quot;Trees are not identical&quot;&lt;&lt;endl;
  }
  t2.recursive_insert(70);
  cout&lt;&lt;&quot;Inorder Traversal&quot;&lt;&lt;endl;
  t2.print_inorder();
  if(t1.are_identical(t2)) {
    cout&lt;&lt;&quot;Trees are identical&quot;&lt;&lt;endl;
  } else {
    cout&lt;&lt;&quot;Trees are not identical&quot;&lt;&lt;endl;
  }
  return 0;
}
</code> </pre>
<p>Preorder Traversal<br />
5 3 1 7 6 50<br />
Inorder Traversal<br />
1 3 5 6 7 50<br />
Postorder Traversal<br />
1 3 6 50 7 5<br />
Size of the tree (as stored in tree object) is: 6<br />
Size of the tree is: 6<br />
Preorder Traversal<br />
5 3 1 7 6 50<br />
Inorder Traversal<br />
1 3 5 6 7 50<br />
Postorder Traversal<br />
1 3 6 50 7 5<br />
Size of the tree (as stored in tree object) is: 6<br />
Size of the tree is: 6<br />
Trees are identical<br />
Inorder Traversal<br />
1 3 5 6 7 50 70<br />
Trees are not identical</p>
</div>
        </div>

    </li><!-- #comment-## -->
<ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-33189">
        <div id="dsq-comment-header-33189" class="dsq-comment-header">
            <cite id="dsq-cite-33189">
                <span id="dsq-author-user-33189">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33189" class="dsq-comment-body">
            <div id="dsq-comment-message-33189" class="dsq-comment-message"><p>u hav to go through basics of pointers to understand that </p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-33190">
        <div id="dsq-comment-header-33190" class="dsq-comment-header">
            <cite id="dsq-cite-33190">
                <span id="dsq-author-user-33190">Marsha Donna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-33190" class="dsq-comment-body">
            <div id="dsq-comment-message-33190" class="dsq-comment-message"><p>u hav to go through basics of pointers to understand that </p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15459">
        <div id="dsq-comment-header-15459" class="dsq-comment-header">
            <cite id="dsq-cite-15459">
                <span id="dsq-author-user-15459">Nikin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15459" class="dsq-comment-body">
            <div id="dsq-comment-message-15459" class="dsq-comment-message"><pre> <code language="C">
bool areIdentical(node *sr1, node *sr2)
{
if(sr1 == NULL &amp;&amp; sr2 == NULL) return true;
if(sr1 != NULL &amp;&amp; sr2 != NULL)
return (sr1-&gt;data == sr2-&gt;data &amp;&amp; 
areIdentical(sr1-&gt;left, sr2-&gt;left) &amp;&amp;
areIdentical(sr1-&gt;right, sr2-&gt;right));
return false;
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-9646">
        <div id="dsq-comment-header-9646" class="dsq-comment-header">
            <cite id="dsq-cite-9646">
                <span id="dsq-author-user-9646">Ankush</span>
            </cite>
        </div>
        <div id="dsq-comment-body-9646" class="dsq-comment-body">
            <div id="dsq-comment-message-9646" class="dsq-comment-message"><p>In identicaltrees() ,can&#8217;t we break as soon as third condition happens..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-8401">
        <div id="dsq-comment-header-8401" class="dsq-comment-header">
            <cite id="dsq-cite-8401">
                <span id="dsq-author-user-8401">Ankit Sablok</span>
            </cite>
        </div>
        <div id="dsq-comment-body-8401" class="dsq-comment-body">
            <div id="dsq-comment-message-8401" class="dsq-comment-message"><p>A much simpler solution would be to find the inorder traversals of the trees as strings and compare the strings using a simple strcmp() function.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-10960">
        <div id="dsq-comment-header-10960" class="dsq-comment-header">
            <cite id="dsq-cite-10960">
                <span id="dsq-author-user-10960">annonimus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-10960" class="dsq-comment-body">
            <div id="dsq-comment-message-10960" class="dsq-comment-message"><p>No, There may be trees whose inorder are same but they are not identical.<br />
e.g:<br />
1.  a<br />
   b<br />
  c</p>
<p>2. c<br />
    b<br />
     a</p>
<p>Both are having inoder same but not identical.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-14690">
        <div id="dsq-comment-header-14690" class="dsq-comment-header">
            <cite id="dsq-cite-14690">
                <span id="dsq-author-user-14690">Ramakrishna</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14690" class="dsq-comment-body">
            <div id="dsq-comment-message-14690" class="dsq-comment-message"><p>I agree with Anonimous&#8230; </p>
<p>I think trees with the same inorder traversal string need not be identical.. That&#8217;s why you can not form the tree just with inorder string as an input. You would also need a pre-order or post-order string to form the tree. </p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-16305">
        <div id="dsq-comment-header-16305" class="dsq-comment-header">
            <cite id="dsq-cite-16305">
                <span id="dsq-author-user-16305">Ankit Sablok</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16305" class="dsq-comment-body">
            <div id="dsq-comment-message-16305" class="dsq-comment-message"><p>@anonnimus and @Ramakrishna : Thanks for the clarification, so one could find 2 strings per tree the inorder and the preorder strings and compare if both of them are same or not using strcmp, I think that would suffice.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-4" id="dsq-comment-20310">
        <div id="dsq-comment-header-20310" class="dsq-comment-header">
            <cite id="dsq-cite-20310">
                <span id="dsq-author-user-20310">Krish</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20310" class="dsq-comment-body">
            <div id="dsq-comment-message-20310" class="dsq-comment-message"><p>@Ankit : But the complexity may be more than the above code&#8230;.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-17119">
        <div id="dsq-comment-header-17119" class="dsq-comment-header">
            <cite id="dsq-cite-17119">
                <span id="dsq-author-user-17119">Karanpreet</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17119" class="dsq-comment-body">
            <div id="dsq-comment-message-17119" class="dsq-comment-message"><p>just the inorder traversal won&#8217;t be sufficient.<br />
If inorder traversal as well as preorder or postorder traversal strings are same then we can say that the trees are identical.<br />
So inorder+preorder<br />
     OR<br />
   inorder+postorder</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-22911">
        <div id="dsq-comment-header-22911" class="dsq-comment-header">
            <cite id="dsq-cite-22911">
                <span id="dsq-author-user-22911">paramjeet parlokiya</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22911" class="dsq-comment-body">
            <div id="dsq-comment-message-22911" class="dsq-comment-message"><p>smart n very tricky<br />
#intelligent;)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-30547">
        <div id="dsq-comment-header-30547" class="dsq-comment-header">
            <cite id="dsq-cite-30547">
                <span id="dsq-author-user-30547">Gaurav Ramesh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-30547" class="dsq-comment-body">
            <div id="dsq-comment-message-30547" class="dsq-comment-message"><p>this might work with just in-order if you add/append a dummy value to your string for every null pointer you get .. like 0 or something..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2460">
        <div id="dsq-comment-header-2460" class="dsq-comment-header">
            <cite id="dsq-cite-2460">
                <span id="dsq-author-user-2460">Tushar Roy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-2460" class="dsq-comment-body">
            <div id="dsq-comment-message-2460" class="dsq-comment-message"><p>This is much sleek code for identicalTrees method.</p>
<pre> <code language="C">
int identicalTrees(Node *node1,Node *node2)
{
	return ((!node1 &amp;&amp; !node2) || (node1 &amp;&amp; node2) &amp;&amp;         
        node1-&gt;data == node2-&gt;data &amp;&amp; sameTree(node1-&gt;left,node2-&gt;left) &amp;&amp; sameTree(node1-&gt;right,node2-&gt;right));
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
var disqus_url = 'http://www.geeksforgeeks.org/write-c-code-to-determine-if-two-trees-are-identical/';
var disqus_identifier = '642 http://geeksforgeeks.org/?p=642';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Write C Code to Determine if Two Trees are Identical";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>

			</div>
	
					
			
			

		</div> <!-- end post -->	

<br></br>
	
</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><script>
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<gcse:search></gcse:search>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    </div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-like-box" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="250" data-height="170" data-colorscheme="light" data-show-faces="true" data-header="false" data-stream="false" data-show-border="false"></div></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LargeRectangleSide -->
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="1884636833"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big 300x600 Sidebar -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4402736037"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/median-of-two-sorted-arrays/">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/lowest-common-ancestor-in-a-binary-search-tree/"> Lowest Common Ancestor in a BST.</span></a> </li>
<li><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="https://twitter.com/GeeksforGeeks" class="twitter-follow-button" data-show-count="false">Follow @GeeksforGeeks</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>         


<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="" style="border:0"/></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="text-21" class="widget widget_text"><h2 class="widgettitle">Recent Comments</h2>
			<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>
		</li>
<li id="text-22" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- LinkAd -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:90px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="2606115235"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
		</li>

</ul>					  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		        <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script>
        <script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://d2o58evtke57tz.cloudfront.net/wp-content/plugins/bbpress/templates/default/js/editor.js?ver=2.5.4-5380'></script>
				  
		</div> <!--end wrapper-->
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	</body>

</html>
<!-- Dynamic page generated in 0.193 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-11-27 23:29:19 -->

<!-- Compression = gzip -->
<!-- super cache -->